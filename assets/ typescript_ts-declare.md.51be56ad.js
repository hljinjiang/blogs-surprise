import{_ as l,c as i,o as t,a as s}from"./app.9e35db72.js";const j=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":" typescript/ts-declare.md","lastUpdated":1673343761000}'),o={name:" typescript/ts-declare.md"},e=s('<ol><li>编译型 <ol><li>源代码编译⽣成机器指令，再由机器运⾏机器码（⼆进制）</li></ol></li><li><strong>解释型</strong> （如 js） <ol><li>源代码翻译成中间代码，再⽤解释器对中间代码解释运⾏</li></ol></li><li><strong>动态类型语⾔</strong> （如 js） <ol><li>对数据类型检查是在运⽤时进⾏的</li></ol></li><li>静态类型语⾔（如 ts） <ol><li>对数据类型的检查是在运⾏前进⾏的</li></ol></li><li>强类型定义语⾔（如 ts） <ol><li>强制数据类型定义的语⾔，变量被指定了某个数据类型，如果不经过强制转换，那么永远是这个数据类型</li></ol></li><li><strong>弱类型定义语⾔</strong> （如 js） <ol><li>数据类型定义可以被忽略，可以对变量类型定义赋予不同类型的值</li></ol></li><li><strong>作⽤域</strong></li></ol><p>a. ts同⼀个⽂件夹中的 typescript⽂件，不使⽤块作⽤域或声明本地作⽤域，就会让变量处于⽂件夹中的全局命 名空间，就会造成不同⽂件内的变量命名冲突</p><p><strong>其他</strong></p><ol><li>安装 npm install -g typescript后，在 js⽂件头部，使⽤ // @ts-check，可以使 js⽂件拥有类型检测功能</li><li>声明</li></ol><p>a. declare（ <strong>使⽤不是</strong> ts<strong>编写</strong> 的第三⽅库，或⾃定义库、成员、类时，使⽤ declare声明，才能获得对应代码</p><p>补全功能）</p><p><strong>发布typescript的npm包</strong></p><p>关于发布npm，</p><ol><li>新建⽂件，并 npm init-y，初始化项⽬，⽣成 pakeage.json⽂件</li><li>全局安装 npm install typescript -g <ol><li>使⽤ tsc --init创建 tsconfig.json</li><li>修改 outDir编译的⽬录： ./dist</li></ol></li><li>在项⽬⽂件中 <ol><li>新建 dist⽬录，⽤来存放 typescript打包后的⽂件</li><li>新建 src⽬录，⽤来存放 typescript的⽂件</li></ol></li><li>更改 pakeage.json的配置⽂件</li><li>main： <ol><li>dist/index.js</li></ol></li><li>typings：（使 IDE给出该项⽬的代码智能提示） <ol><li>dist/index.d.ts</li></ol></li><li>每次发布版本需要更改 version的版本号</li><li>写完项⽬后，需要 tsc编译 typescript⽂件到 dist⽬录</li><li>最后需要删除⼀些⽂件，这些⽂件不⽤上传 <ol><li>node_modules</li><li>tsconfig.json</li></ol></li><li>项⽬⽂件存在 github</li></ol><p>a. <a href="https://github.com/Surprise-ling/czjs" target="_blank" rel="noreferrer">Surprise-ling/czjs (github.com)</a></p>',10),r=[e];function n(p,a,c,g,_,d){return t(),i("div",null,r)}const u=l(o,[["render",n]]);export{j as __pageData,u as default};
