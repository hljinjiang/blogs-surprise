import{_ as l,c as i,o,d as t}from"./app.0c6ab22f.js";const b=JSON.parse('{"title":"前端⼯程化","description":"","frontmatter":{},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"框架及插件选型","slug":"框架及插件选型","link":"#框架及插件选型","children":[]},{"level":2,"title":"划分前端项⽬的开发概念","slug":"划分前端项目的开发概念","link":"#划分前端项目的开发概念","children":[]},{"level":2,"title":"资源管理","slug":"资源管理","link":"#资源管理","children":[]},{"level":2,"title":"规范化","slug":"规范化","link":"#规范化","children":[]},{"level":2,"title":"⾃动化","slug":"自动化","link":"#自动化","children":[]},{"level":2,"title":"最后","slug":"最后","link":"#最后","children":[]}],"relativePath":"build/front-end-engineering.md","lastUpdated":1677140614000}'),s={name:"build/front-end-engineering.md"},e=t('<h1 id="前端工程化" tabindex="-1">前端⼯程化 <a class="header-anchor" href="#前端工程化" aria-hidden="true">#</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">简介</p><ol><li>⼀个项⽬相当于⼀个⼯程</li><li>⼯程化在我理解为：<strong>完成项⽬过程中，⽤到的各种⼯具和技术</strong></li><li><strong>工程化体现在项⽬的组织能⼒，需将整个项⽬串联起来</strong></li></ol><p><strong>为什么使⽤</strong></p><ol><li>通过各种⼯具和技术，提升开发效率、降低成本、质量保证为目的</li><li>优化开发流程，提高编码效率和质量，提高项目的可维护性</li></ol></div><h2 id="框架及插件选型" tabindex="-1">框架及插件选型 <a class="header-anchor" href="#框架及插件选型" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">简介</p><ol><li><strong>框架/库</strong>（ vue、react、angular、element、antd）</li><li><strong>构建/管理⼯具</strong>（ webpack、vite、esbuild)</li><li><strong>规范</strong>（eslint、prettier、git）</li><li><strong>JS模块化</strong>（ AMD、 CommonJS、 ES6 Module）</li><li><strong>CSS模块化</strong>（ Less、 Sass、 Stylus）</li></ol></div><h2 id="划分前端项目的开发概念" tabindex="-1">划分前端项⽬的开发概念 <a class="header-anchor" href="#划分前端项目的开发概念" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">简介</p><ol><li><strong>JS模块</strong>（独⽴的⼯具函数、应⽤配置、⽹络请求、单元测试） <ol><li>可以具有独⽴算法，数据配置</li><li>如：axios、lodash等封装函数、config</li></ol></li><li><strong>CSS模块</strong>（animate、reset、icon-font） <ol><li>可以具有独⽴功能性的样式</li><li>如：全局样式、动画样式、字体样式</li></ol></li><li><strong>UI组件</strong>（layout、header、footer、sidebar、nav） <ol><li>可以具有可复⽤公共样式布局</li><li>如：单⽂件⾯公共 UI 部分</li></ol></li><li><strong>⻚⾯</strong>（views） <ol><li>如：⾸⻚、列表⻚、⽤户管理⻚⾯等⻚⾯组成</li></ol></li><li><strong>应⽤</strong>（整个项⽬或整个站点被称为应⽤，由多个⻚⾯组成） <ol><li>如 SPA（单⼀⻚⾯应⽤）、 PWA（渐进式 Web应⽤）</li></ol></li></ol></div><h2 id="资源管理" tabindex="-1">资源管理 <a class="header-anchor" href="#资源管理" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">简介</p><ol><li>前端资源都部署在远程服务器中，⽤户使⽤浏览访问不同⻚⾯来加载不同资源</li><li>因此性能优化中<code>资源管理</code>成为性能优化的核⼼</li><li>加载相关的⻚⾯需要 <strong>按需加载</strong>、<strong>延迟加载</strong>、<strong>预加载</strong>、<strong>请求合并</strong>、<strong>懒加载</strong></li><li>缓存相关的浏览器 <strong>缓存利⽤</strong>、<strong>缓存更新</strong>、<strong>缓存共享</strong></li><li>这些优化⽅案围绕着将 <strong>增量</strong> 原则做到极致⽽展开</li></ol></div><h2 id="规范化" tabindex="-1">规范化 <a class="header-anchor" href="#规范化" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">简介</p><p>良好的规范利于开发质量，代码质量，以及后期维护难度</p><ol><li>⽬录结构规范制定</li><li>编码规范</li><li>前后端接⼝规范</li><li>⽂档规范</li><li>组件管理</li><li>Git分⽀管理</li><li>Commit描述规范</li><li>定期 code review</li></ol></div><h2 id="自动化" tabindex="-1">⾃动化 <a class="header-anchor" href="#自动化" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">简介</p><p>将<code>提交代码</code>~<code>代码发布</code>这种<strong>重复性⼯作</strong></p><ol><li>提交代码</li><li>合并⾄ master分⽀</li><li>合并代码</li><li>打包构建</li><li>备份服务器上项⽬⽂件</li><li>将打包⽂件上传服务区项⽬⽬录<br> ...<br> ...<br> ...</li><li>应该让机器流程化自动完成</li></ol></div><h2 id="最后" tabindex="-1">最后 <a class="header-anchor" href="#最后" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">简介</p><ol><li>从<strong>模块化</strong>、<strong>组件化</strong>、<strong>规范化</strong>、<strong>⾃动化</strong>四个⽅⾯总结<strong>前端⼯程化需要使⽤的技术和⼯具</strong></li><li><strong>模块化</strong>：将复杂的程序封装成⼏个模块 (⽂件 )组成在⼀起，块内部数据私有，只是向外暴露接⼝⽤来与其他模块通信</li><li><strong>组件化</strong>：将⼀个项⽬拆分成若⼲组件构成，每个组件有独⽴的逻辑业务，增加组件的复用性</li><li><strong>规范化</strong>：整个项目统一为一个规范，提高项目开发效率及统一管理</li><li><strong>⼯程化</strong>：⼀个⼯程相当于⼀个项⽬，完成项⽬过程中，⽤到的各种⼯具和技术以提升开发效率、降低开发难度、提升产品质量、降低企业成本就是⼯程化</li></ol></div>',15),n=[e];function r(a,c,d,g,h,u){return o(),i("div",null,n)}const m=l(s,[["render",r]]);export{b as __pageData,m as default};
