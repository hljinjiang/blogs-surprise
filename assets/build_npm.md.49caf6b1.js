import{_ as l,c as i,o as n,a as t}from"./app.46bbe91d.js";const q=JSON.parse('{"title":"NPM","description":"","frontmatter":{},"headers":[],"relativePath":"build/npm.md","lastUpdated":1673763462000}'),o={name:"build/npm.md"},p=t('<h1 id="npm" tabindex="-1">NPM <a class="header-anchor" href="#npm" aria-hidden="true">#</a></h1><p><strong>npm</strong></p><p>包管理⼯具，前端模块化</p><ol><li>安装 npm包⽅式 <ol><li>npm install -g 包名（全局安装）</li><li>npm install 包名（安装到项⽬， package不会记录）</li><li>npm install --save 包名（安装到项⽬必须依赖）</li><li>npm install --save-d 包名（安装到项⽬开发依赖）</li></ol></li><li>删除 npm包 <ol><li>npm uninstall -g 包名（全局删除模块）</li><li>npm uninstall 包名（删除本地模块）</li><li>npm uninstall --save 包名（删除本地模块，并删除项⽬依赖）</li><li>npm uninstall --save -d 包名（删除本地模块，并删除项⽬开发依赖）</li></ol></li><li>发布 npm包 <ol><li>npm adduser（输⼊ npm注册的账号、密码、邮箱）</li><li>npm publish（发布包，包名不能有⼤写字⺟、空格、下划线，已经在 package.json中定义）</li><li>npm unpublish（取消发布包）</li><li>.gitignore或 .npmignore（忽略相关⽂件上传）</li></ol></li><li>更新 npm包</li><li>修改 package中的 version版本号 <ol><li>x.y.z（⼤改，⼩改，补丁）</li></ol></li><li>再使⽤ npm publish</li><li>关于发布 typescript的 npm请链接到 [发布typescript的n pm包]</li><li>npm版本</li><li>^：表示第⼀位版本不变，后⾯两位最新</li><li>~：表示前两位版本不变，最后⼀位最新</li><li>*：表示全部取最新</li><li>什么都不加：固定版本号</li></ol><p>1 &quot;dependencies&quot;: {</p><p>2 &quot;ejs&quot;: &quot;^2.3.4&quot;,</p><p>3 &quot;express&quot;: &quot;~4.1.3&quot;, 4 &quot;axios&quot;: &quot;*0.1.1&quot;, 5 &quot;vue&quot;: &quot;2.6.0&quot;</p><p>6 }</p><ol start="5"><li>1</li></ol><p><strong>npx</strong></p><p>npx express-generator 运⾏⼀个包，⾸先在当前⽬录下寻找要执⾏的包，寻找在node_modules中的包 若不存在，则安装最新版本，并执⾏它</p><ol><li>临时安装可执⾏依赖包，不⽤全局安装，不⽤担⼼⻓期的污染。</li><li>可以执⾏依赖包中的命令，安装完成⾃动运⾏。</li><li>⾃动加载 node_modules中依赖包，不⽤指定 $PATH。</li><li>可以指定 node版本、命令的版本，解决了不同项⽬使⽤不同版本的命令的问题。</li></ol>',12),e=[p];function s(a,r,u,m,d,_){return n(),i("div",null,e)}const g=l(o,[["render",s]]);export{q as __pageData,g as default};
