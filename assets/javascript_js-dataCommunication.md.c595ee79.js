import{_ as s,c as n,o as a,a as l}from"./app.46bbe91d.js";const m=JSON.parse('{"title":"JavaScript Communication","description":"","frontmatter":{},"headers":[{"level":2,"title":"Web Workers","slug":"web-workers","link":"#web-workers","children":[]},{"level":2,"title":"AJAX","slug":"ajax","link":"#ajax","children":[]},{"level":2,"title":"Fetch","slug":"fetch","link":"#fetch","children":[]},{"level":2,"title":"WebSocket","slug":"websocket","link":"#websocket","children":[]},{"level":2,"title":"EventSource","slug":"eventsource","link":"#eventsource","children":[]},{"level":2,"title":"跨域相关","slug":"跨域相关","link":"#跨域相关","children":[]}],"relativePath":"javascript/js-dataCommunication.md","lastUpdated":1673862046000}'),p={name:"javascript/js-dataCommunication.md"},e=l(`<h1 id="javascript-communication" tabindex="-1">JavaScript Communication <a class="header-anchor" href="#javascript-communication" aria-hidden="true">#</a></h1><h2 id="web-workers" tabindex="-1">Web Workers <a class="header-anchor" href="#web-workers" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">简介</p><ol><li>workers 开启一个新线程，运行在另一个全局上下文中</li><li>允许JavaScript创建多个子线程，子线程完全受主线程控制，不得操作DOM，不得使用window</li><li>用来处理异步事件，以及一些比较耗时的事件</li><li>workers 可以依次生成新的 workers</li><li>postMessage() 方法发送消息，onmessage 事件处理函数来响应消息</li><li>worker 的一个优势在于能够执行处理器密集型的运算而不会阻塞 UI 线程</li><li>在主页面与 worker 之间传递的数据是通过 拷贝 ，而不是 共享 来完成的</li><li>传递给 worker 的对象需要经过序列化，接下来在另一端还需要反序列化，<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Structured_clone_algorithm" target="_blank" rel="noreferrer">结构化克隆算法</a></li></ol></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// index.js</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> myWorker </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Worker</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;./worker.js&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">myWorker.</span><span style="color:#A6E22E;">postMessage</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">myWorker.</span><span style="color:#A6E22E;">onmessage</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">e</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(e.data);</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// worker.js</span></span>
<span class="line"><span style="color:#A6E22E;">onmessage</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">e</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// workers 也可以调用自己的 close 方法进行关闭</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">close</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">postMessage</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;收到啦: &quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> e.data);</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#88846F;">// 终止 worker，立即杀死</span></span>
<span class="line"><span style="color:#F8F8F2;">myWorker.</span><span style="color:#A6E22E;">terminate</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>参考链接：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Worker" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/API/Worker</a></p><h2 id="ajax" tabindex="-1">AJAX <a class="header-anchor" href="#ajax" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">简介</p><p>Asynchronous JavaScript + XML (异步 JavaScript 和 XML)<br> 不需要重载 (刷新) 整个页面则可以更新网页部分内容</p></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> oReq </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">XMLHttpRequest</span><span style="color:#F8F8F2;">();    </span><span style="color:#88846F;">// new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;) IE老版本使用的语法</span></span>
<span class="line"><span style="color:#F8F8F2;">oReq.</span><span style="color:#A6E22E;">open</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;post&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;https://www.runoob.com/try/ajax/ajax_info&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#88846F;">// i1=qwe&amp;i2=join，表单数据被编码成以 &#39;&amp;&#39; 分隔的键 - 值对，同时以 &#39;=&#39; 分隔键和值，符号会被编码</span></span>
<span class="line"><span style="color:#88846F;">// oReq.setRequestHeader(&#39;Content-Type&#39;, &#39;application/x-www-form-urlencoded&#39;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// name: (二进制) name1: join，不要设置此类请求头，浏览器会自动识别 文件流 并设置请求头</span></span>
<span class="line"><span style="color:#88846F;">// oReq.setRequestHeader(&#39;Content-Type&#39;, &#39;multipart/form-data&#39;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// {name: &#39;join&#39;}，要使用JSON.stringify({name: &#39;join&#39;})</span></span>
<span class="line"><span style="color:#F8F8F2;">oReq.</span><span style="color:#A6E22E;">setRequestHeader</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Content-Type&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;application/json&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// load 传输完成，所有数据保存在 response 中</span></span>
<span class="line"><span style="color:#F8F8F2;">oReq.</span><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;load&quot;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FD971F;font-style:italic;">e</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(oReq));</span></span>
<span class="line"><span style="color:#88846F;">// progress 数据量发生了变化，下载进度，下载和上传</span></span>
<span class="line"><span style="color:#F8F8F2;">oReq.</span><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;progress&quot;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FD971F;font-style:italic;">e</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// lengthComputable 数据量可计算</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// loaded   已经执行的数据量</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// total    数据总量</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(oReq)</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#88846F;">// 上传相关事件，用来表示上传的进度</span></span>
<span class="line"><span style="color:#F8F8F2;">oReq.upload.</span><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;progress&quot;</span><span style="color:#F8F8F2;">, console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(oReq));</span></span>
<span class="line"><span style="color:#88846F;">// 远程内容获取到一个存储原生二进制数据的 ArrayBuffer 对象中</span></span>
<span class="line"><span style="color:#88846F;">// oReq.responseType = &quot;arraybuffer&quot;</span></span>
<span class="line"><span style="color:#88846F;">// 超时时间，单位是毫秒</span></span>
<span class="line"><span style="color:#88846F;">// oReq.timeout = 2000</span></span>
<span class="line"><span style="color:#88846F;">// 终止该请求</span></span>
<span class="line"><span style="color:#88846F;">// oReq.abort()</span></span>
<span class="line"><span style="color:#88846F;">// 请求readyState状态值发生改变时触发 0: 未初始化(请求还未初始化)；1: 正在加载(已建立服务器链接)；2: 加载成功(请求已接受)；3: 交互(正在处理请求)；4: 请求已完成</span></span>
<span class="line"><span style="color:#F8F8F2;">oReq.</span><span style="color:#A6E22E;">onreadystatechange</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { oReq.readyState }</span></span>
<span class="line"><span style="color:#88846F;">// 浏览器返回的状态码，200 ok, 404 not found</span></span>
<span class="line"><span style="color:#F8F8F2;">oReq.status</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> formData </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">FormData</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">formData.</span><span style="color:#A6E22E;">append</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Blob</span><span style="color:#F8F8F2;">([</span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">ArrayBuffer</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">)]))</span></span>
<span class="line"><span style="color:#F8F8F2;">formData.</span><span style="color:#A6E22E;">append</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;name1&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;join&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">oReq.</span><span style="color:#A6E22E;">send</span><span style="color:#F8F8F2;">(JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">({name: </span><span style="color:#E6DB74;">&#39;join&#39;</span><span style="color:#F8F8F2;">}));</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p>参考链接：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest</a></p><h2 id="fetch" tabindex="-1">Fetch <a class="header-anchor" href="#fetch" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">简介</p><p>JavaScript的api接口，用于访问和操作HTTP请求 (现代通用方法)</p></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">fetch</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;https://www.runoob.com/try/ajax/ajax_info&#39;</span><span style="color:#F8F8F2;">,{</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 请求方法</span></span>
<span class="line"><span style="color:#F8F8F2;">    method: </span><span style="color:#E6DB74;">&#39;post&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 发送主体数据</span></span>
<span class="line"><span style="color:#F8F8F2;">    body: JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">({ name: </span><span style="color:#E6DB74;">&#39;join&#39;</span><span style="color:#F8F8F2;"> }),</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 设置请求头</span></span>
<span class="line"><span style="color:#F8F8F2;">    headers:{</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#E6DB74;">&#39;content-type&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;application/json&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// FormData对象，设置为multipart/form-data</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">/*  请求是否允许跨域</span></span>
<span class="line"><span style="color:#88846F;">        same-origin: 不允许跨域，它需要遵守同源策略，若不是同源，会报错当前请求非同源</span></span>
<span class="line"><span style="color:#88846F;">        cors: 允许跨域，若服务器不允许跨域，则会提示 No &#39;Access-Control-Allow-Origin&#39; header</span></span>
<span class="line"><span style="color:#88846F;">        no-cors: 不允许跨域，允许浏览器发送本次跨域请求，但是不能访问响应返回的内容，这也是其response type为opaque透明的原因</span></span>
<span class="line"><span style="color:#88846F;">    */</span></span>
<span class="line"><span style="color:#F8F8F2;">    mode: </span><span style="color:#E6DB74;">&#39;cors&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">/*  请求缓存方式</span></span>
<span class="line"><span style="color:#88846F;">        default: 浏览器从 HTTP 缓存中寻找匹配的请求</span></span>
<span class="line"><span style="color:#88846F;">            缓存匹配上，则返回缓存</span></span>
<span class="line"><span style="color:#88846F;">            缓存匹配上但已经过期，先请求服务器端显示资源没有改动，它将从缓存中返回资源；如果服务器显示资源变动，那么重新从服务器下载资源更新缓存</span></span>
<span class="line"><span style="color:#88846F;">            缓存没有匹配，则以普通方式请求</span></span>
<span class="line"><span style="color:#88846F;">        no-store: 浏览器直接从远程服务器获取资源，不查看缓存，不会缓存资源</span></span>
<span class="line"><span style="color:#88846F;">        reload: 浏览器直接从远程服务器获取资源，不查看缓存，会缓存资源</span></span>
<span class="line"><span style="color:#88846F;">        no-cache: </span></span>
<span class="line"><span style="color:#88846F;">            缓存有匹配，浏览器会向远程服务器发出条件请求，如果指示资源没有更改，则将从缓存中返回该资源。否则，将从服务器下载资源并更新缓存</span></span>
<span class="line"><span style="color:#88846F;">            缓存没有匹配，浏览器将发出正常请求，并使用下载的资源更新缓存</span></span>
<span class="line"><span style="color:#88846F;">        force-cache:</span></span>
<span class="line"><span style="color:#88846F;">            缓存有匹配，不管是新匹配项还是旧匹配项，都将从缓存中返回</span></span>
<span class="line"><span style="color:#88846F;">            缓存没有匹配，浏览器将发出正常请求，并使用下载的资源更新缓存</span></span>
<span class="line"><span style="color:#88846F;">        only-if-cached: </span></span>
<span class="line"><span style="color:#88846F;">            缓存有匹配，不管是新匹配项还是旧匹配项，都将从缓存中返回</span></span>
<span class="line"><span style="color:#88846F;">            缓存没有匹配，浏览器将返回一个错误</span></span>
<span class="line"><span style="color:#88846F;">    */</span></span>
<span class="line"><span style="color:#F8F8F2;">    cache: </span><span style="color:#E6DB74;">&#39;default&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">response</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(response) })</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p>参考链接：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch</a></p><h2 id="websocket" tabindex="-1">WebSocket <a class="header-anchor" href="#websocket" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">简介</p><p>在浏览器和服务器之间建立持久持续连接，通过该连接发送和接收数据的 API websocket没有跨域限制，可以发送/接收字符串和二进制数据</p></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 打开一个websocket连接</span></span>
<span class="line"><span style="color:#88846F;">// wss 可以使用该协议，该协议具有SSL证书，传输是被加密的，而且更可靠</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> socket </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">WebSocket</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;ws://localhost:8080&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">// 连接已建立</span></span>
<span class="line"><span style="color:#F8F8F2;">socket.</span><span style="color:#A6E22E;">onopen</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">event</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;">  { console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;WebSocket is open now.&quot;</span><span style="color:#F8F8F2;">) }</span></span>
<span class="line"><span style="color:#88846F;">// 发送数据</span></span>
<span class="line"><span style="color:#F8F8F2;">socket.</span><span style="color:#A6E22E;">send</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;data&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">// 接收服务端发送的数据</span></span>
<span class="line"><span style="color:#F8F8F2;">socket.</span><span style="color:#A6E22E;">onmessage</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">data</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;">  { console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(data) }</span></span>
<span class="line"><span style="color:#88846F;">// 连接发生错误</span></span>
<span class="line"><span style="color:#F8F8F2;">socket.</span><span style="color:#A6E22E;">onerror</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">err</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;">  { console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(err) }</span></span>
<span class="line"><span style="color:#88846F;">// 连接已关闭</span></span>
<span class="line"><span style="color:#F8F8F2;">socket.</span><span style="color:#A6E22E;">onclose</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">event</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;">  { console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(event) }</span></span>
<span class="line"><span style="color:#88846F;">// 连接关闭可能是客户端主动关闭，也可能是服务端主动关闭</span></span>
<span class="line"><span style="color:#88846F;">// 参数: 数字状态码，解析连接关闭原因 (对连接关闭的描述)</span></span>
<span class="line"><span style="color:#F8F8F2;">socket.</span><span style="color:#A6E22E;">close</span><span style="color:#F8F8F2;">(code, description)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 心跳机制</span></span>
<span class="line"><span style="color:#F8F8F2;">Websocket 在一定时间的无操作情况下会自动断开连接，因此需要加入一个心跳机制防止自断</span></span>
<span class="line"><span style="color:#F8F8F2;">可以设置定时器setInterval，持续socket.</span><span style="color:#A6E22E;">send</span><span style="color:#F8F8F2;">()向服务端发送消息</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>参考链接：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket</a></p><h2 id="eventsource" tabindex="-1">EventSource <a class="header-anchor" href="#eventsource" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">简介</p><p>SSE (server-sent-event)，是服务器推送的一个网络事件接口<br> 对 HTTP 服务开启一个持久化的连接，以text/event-stream 格式发送事件，会一直保持开启直到被要求关闭<br> 与 WebSockets 不同的是，服务端推送是单向的。数据信息被单向从服务端到客户端分发</p></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> es </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">EventSource</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;http://localhost:8080/Home/GetNotices?user=lxw&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">es.</span><span style="color:#A6E22E;">onmessage</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">event</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(event.data) };</span></span>
<span class="line"><span style="color:#F8F8F2;">es.</span><span style="color:#A6E22E;">onopen</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">event</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(event) };</span></span>
<span class="line"><span style="color:#F8F8F2;">es.</span><span style="color:#A6E22E;">onerror</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">event</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(event) };</span></span>
<span class="line"><span style="color:#F8F8F2;">es.</span><span style="color:#A6E22E;">close</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>参考链接：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventSource" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/API/EventSource</a></p><h2 id="跨域相关" tabindex="-1">跨域相关 <a class="header-anchor" href="#跨域相关" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">简介</p><ul><li>后端设置请求域的跨域配置</li></ul><ol><li>Access-Control-Allow-Origin: * 允许所有域名的脚本访问该资源 <ol><li>value: <a href="https://www.baidu.com" target="_blank" rel="noreferrer">https://www.baidu.com</a> 允许指定的域名访问</li></ol></li><li>Access-Control-Allow-Methods 允许的请求方式</li><li>Access-Control-Allow-Headers 跨域允许包含的头</li></ol><ul><li>jsonp</li></ul><ol><li>ajax发起请求是有同源保护策略的限制，会报错</li><li><code>&lt;scrip /&gt;</code> 会发起一个get请求，这个请求是不受同源策略限制的</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// html代码</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">func</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">result</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(result)   </span><span style="color:#88846F;">// { message: &quot;hello world&quot; }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">script</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">src</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;http://localhost:3000/jsonp?callback=func&quot;</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#F92672;">script</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#88846F;">// 请求返回 /**/ typeof func === &#39;function&#39; &amp;&amp; func({&quot;message&quot;:&quot;hello world&quot;});</span></span>
<span class="line"><span style="color:#88846F;">// 后端返回jsonp数据，检测callback指定是否为函数，并执行函数，将数据传入给指定的函数的参数中</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// nodejs代码</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> express </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;express&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> app </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">express</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> port </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">3000</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;/&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">req</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  res.</span><span style="color:#A6E22E;">send</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;hello world&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#88846F;">// /jsonp?callback=func</span></span>
<span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;/jsonp&quot;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FD971F;font-style:italic;">req</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  res.</span><span style="color:#A6E22E;">jsonp</span><span style="color:#F8F8F2;">({ message: </span><span style="color:#E6DB74;">&quot;hello world&quot;</span><span style="color:#F8F8F2;"> });</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// =&gt; func({ &quot;message&quot;: &quot;hello world&quot; })</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#A6E22E;">listen</span><span style="color:#F8F8F2;">(port, () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">\`Example app listening on port </span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">port</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;">\`</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><ul><li>proxy<br> 在本地启动node服务器，将本地请求通过本地服务器代理进行转发，从而绕过了浏览器同源协议的限制</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 对 /api/users 的请求会将请求代理到 http://10.82.26.117:8097/api/users</span></span>
<span class="line"><span style="color:#F8F8F2;">proxy: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#E6DB74;">&#39;/api&#39;</span><span style="color:#F8F8F2;">: {</span></span>
<span class="line"><span style="color:#F8F8F2;">        target: </span><span style="color:#E6DB74;">&#39;http://10.82.26.117:8097/&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        changeOrigin: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        ws: </span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// 重新路径，是否将/api替换成其它路径</span></span>
<span class="line"><span style="color:#F8F8F2;">        pathRewrite: {</span></span>
<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#E6DB74;">&#39;^/api&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;/api&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></div>`,23),o=[e];function r(c,t,F,i,y,b){return a(),n("div",null,o)}const d=s(p,[["render",r]]);export{m as __pageData,d as default};
