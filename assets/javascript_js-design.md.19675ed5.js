import{_ as s,c as n,o as a,a as l}from"./app.b2a11054.js";const p="/assets/proxy_magic.75e4b202.png",E=JSON.parse('{"title":"JavaScript Design Pattern","description":"","frontmatter":{},"headers":[{"level":2,"title":"工厂模式","slug":"工厂模式","link":"#工厂模式","children":[]},{"level":2,"title":"单例模式","slug":"单例模式","link":"#单例模式","children":[]},{"level":2,"title":"策略模式","slug":"策略模式","link":"#策略模式","children":[]},{"level":2,"title":"代理模式","slug":"代理模式","link":"#代理模式","children":[]},{"level":2,"title":"观察者模式 (发布订阅)","slug":"观察者模式-发布订阅","link":"#观察者模式-发布订阅","children":[]}],"relativePath":"javascript/js-design.md","lastUpdated":1679923499000}'),e={name:"javascript/js-design.md"},o=l(`<h1 id="javascript-design-pattern" tabindex="-1">JavaScript Design Pattern <a class="header-anchor" href="#javascript-design-pattern" aria-hidden="true">#</a></h1><div class="info custom-block"><p class="custom-block-title">设计模式</p><p>设计模式是解决某个特定场景下对某种问题的解决方案<br> 设计模式可能会增加复杂的逻辑，或更多的代码量<br> 作用: 让人们写出可复用和可维护性高的程序</p></div><h2 id="工厂模式" tabindex="-1">工厂模式 <a class="header-anchor" href="#工厂模式" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">简介</p><p>不涉及到 User 的具体的实现类，达到封装效果，主要用来创建同一类对象 (产品)</p><p>优点：<br> 1. 你只需要一个正确的参数，就可以获取到你所需要的对象，而无需知道其创建的具体细节<br> 2. 扩展性高，可任意扩展<br> 3. 当不同实例都有相同的行为时，就可使用工厂模式<br> 缺点：<br> 1. 每增加一个产品，相应的也要增加一个子工厂，加大了额外的开发量</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">User</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">//构造器</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">opt</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> opt.name;</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.viewPage </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> opt.viewPage;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">//静态方法</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">static</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">getInstance</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">role</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">switch</span><span style="color:#F8F8F2;"> (role) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">case</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;superAdmin&quot;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">User</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">                name: </span><span style="color:#E6DB74;">&quot;超级管理员&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">                viewPage: [</span><span style="color:#E6DB74;">&quot;首页&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;通讯录&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;发现页&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;应用数据&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;权限管理&quot;</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">            });</span></span>
<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#F92672;">break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">case</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;admin&quot;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">User</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">                name: </span><span style="color:#E6DB74;">&quot;管理员&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">                viewPage: [</span><span style="color:#E6DB74;">&quot;首页&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;通讯录&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;发现页&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;应用数据&quot;</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">            });</span></span>
<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#F92672;">break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">case</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;user&quot;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">User</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">                name: </span><span style="color:#E6DB74;">&quot;普通用户&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">                viewPage: [</span><span style="color:#E6DB74;">&quot;首页&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;通讯录&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;发现页&quot;</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">            });</span></span>
<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#F92672;">break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">default</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#F92672;">throw</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Error</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;参数错误, 可选参数:superAdmin、admin、user&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 调用</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> superAdmin </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> User.</span><span style="color:#A6E22E;">getInstance</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;superAdmin&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> admin </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> User.</span><span style="color:#A6E22E;">getInstance</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;admin&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> normalUser </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> User.</span><span style="color:#A6E22E;">getInstance</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;user&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div></div><h2 id="单例模式" tabindex="-1">单例模式 <a class="header-anchor" href="#单例模式" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">简介</p><p>保证一个类仅有一个实例，并提供一个访问它的全局访问点<br> 要创建一个标准的单列模式并不复杂，无非是通过一个变量来标志当前是否已经为某个类创建过对象</p><p>优点：<br> 1. 内存中只有一个实例，减少内存开支<br> 2. 减少系统的性能开销<br> 缺点：<br> 1. 扩展很困难<br> 2. 单例类的职责过重，在一定程度上违背了&quot;单一职责原则&quot;</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Single</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> name</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.instance </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">null</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Single</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#A6E22E;">getName</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">Single.</span><span style="color:#A6E22E;">getInstance</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">!</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.instance) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.instance </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Single</span><span style="color:#F8F8F2;">(name)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.instance</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> one </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Single.</span><span style="color:#A6E22E;">getInstance</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;one&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> two </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Single.</span><span style="color:#A6E22E;">getInstance</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;two&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></div><h2 id="策略模式" tabindex="-1">策略模式 <a class="header-anchor" href="#策略模式" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">简介</p><p>定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换<br> 重心在于组织、调用这些算法，从而让程序结构更灵活，具有更好的维护性和扩展性</p><p>优点：<br> 1. 避免代码重复，更好的封装性<br> 2. 避免使用多重条件语句，易于扩展，易于切换<br> 缺点：<br> 1. 客户端必须知道所有的策略类，并自行决定使用哪一个策略类</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> strategies </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#E6DB74;">&quot;S&quot;</span><span style="color:#F8F8F2;">:(</span><span style="color:#FD971F;font-style:italic;">salary</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> salary </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">4</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#E6DB74;">&quot;A&quot;</span><span style="color:#F8F8F2;">:(</span><span style="color:#FD971F;font-style:italic;">salary</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> salary </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">3</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#E6DB74;">&quot;B&quot;</span><span style="color:#F8F8F2;">:(</span><span style="color:#FD971F;font-style:italic;">salary</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> salary </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">2</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">calculateBonus</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">level</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">salary</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> strategies[ level ](salary)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#A6E22E;">calculateBonus</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;S&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">10000</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#A6E22E;">calculateBonus</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">10000</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div></div><h2 id="代理模式" tabindex="-1">代理模式 <a class="header-anchor" href="#代理模式" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">简介</p><p>一个类别可以作为其它东西的接口，以便控制对它的访问<br> 代理对象，对目标对象做出一定的响应事件</p><p>优点：<br> 1. 将代理对象与真实被调用的目标对象分离<br> 2. 保护目标对象的作用<br> 3. 对目标对象的功能增强<br> 缺点：<br> 1. 客户端和目标对象增加一个代理对象，会造成请求处理速度变慢<br> 2. 增加系统的复杂度</p><p><img src="`+p+`" alt="代理模式.png"></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 客户对象</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> start </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 请求</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">invite</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">data</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#F8F8F2;">    data </span><span style="color:#F92672;">&amp;&amp;</span><span style="color:#F8F8F2;"> middle.</span><span style="color:#A6E22E;">reception</span><span style="color:#F8F8F2;">(data)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">// 代理</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> middle </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 代理收数据，做处理</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">reception</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">data</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#F8F8F2;">    data.host </span><span style="color:#F92672;">??=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;8080&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 处理完成，提交给目标本体对象</span></span>
<span class="line"><span style="color:#F8F8F2;">    target.</span><span style="color:#A6E22E;">reception</span><span style="color:#F8F8F2;">(data)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">// 亮</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> target </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 接收请求</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">reception</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">data</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(data)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">// 调用方法</span></span>
<span class="line"><span style="color:#F8F8F2;">start.</span><span style="color:#A6E22E;">invite</span><span style="color:#F8F8F2;">({ url: </span><span style="color:#E6DB74;">&#39;http:www.baidu.com&#39;</span><span style="color:#F8F8F2;">, host: </span><span style="color:#E6DB74;">&#39;9000&#39;</span><span style="color:#F8F8F2;"> })</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div></div><h2 id="观察者模式-发布订阅" tabindex="-1">观察者模式 (发布订阅) <a class="header-anchor" href="#观察者模式-发布订阅" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">简介</p><p>一对多的依赖关系，当一个对象状态发生改变时，所有依赖于它的对象都将得到通知<br> 多个订阅者，只需要等发布者通知订阅者即可<br> 多个订阅者订阅某事件，当某事件触发时 (发布)，订阅者 (订阅)事件</p><p>优点：<br> 1. 观察者和被观察者是抽象耦合的<br> 2. 建立一套触发机制<br> 缺点：<br> 1. 如果观察者对象有很多，都通知到会花费很多时间</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 主体</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Subject</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    observers </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line"><span style="color:#F8F8F2;">    state;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">getState</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.state;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">setState</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.state </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> state;</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">notifyAllObservers</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 放入观察者实现类</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">attach</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">observer</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.observers.</span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">(observer);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 通知所有观察者</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">notifyAllObservers</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> observer </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.observers) {</span></span>
<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.observers[observer].</span><span style="color:#A6E22E;">update</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">// 观察者抽象类</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Observer</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;">.target </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> Observer) {</span></span>
<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#F92672;">throw</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Error</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Vehicle&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    subject;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">update</span><span style="color:#F8F8F2;">() {}</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">// 观察者实现类</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">BinaryObserver</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">extends</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;font-style:italic;text-decoration:underline;">Observer</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">subject</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">super</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.subject </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> subject;</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.subject.</span><span style="color:#A6E22E;">attach</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">update</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">        console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Binary String: &quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> subject.</span><span style="color:#A6E22E;">getState</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> subject </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Subject</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">BinaryObserver</span><span style="color:#F8F8F2;">(subject);</span></span>
<span class="line"><span style="color:#88846F;">// 触发订阅</span></span>
<span class="line"><span style="color:#F8F8F2;">subject.</span><span style="color:#A6E22E;">setState</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">15</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">subject.</span><span style="color:#A6E22E;">setState</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div></div><p>参考链接：<a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html" target="_blank" rel="noreferrer">https://www.runoob.com/design-pattern/design-pattern-tutorial.html</a></p>`,13),F=[o];function r(t,c,y,i,b,u){return a(),n("div",null,F)}const d=s(e,[["render",r]]);export{E as __pageData,d as default};
