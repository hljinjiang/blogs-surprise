import{_ as s,c as n,o as a,a4 as l}from"./chunks/framework.BEVO561w.js";const e="/assets/stack-memory-explained.D9sO_rFT.png",o="/assets/stack-heap-pointers.D3uap7PP.png",p="/assets/event-loop.BpAI9kO2.mp4",c="/assets/stack-heap-gc-animation.DOrJoNc0.mp4",t="/assets/reference-cycle.3FgIr6SJ.png",r="/assets/garbage-collectoion-algorithm.h8VmbJdZ.png",k=JSON.parse('{"title":"JavaScript Engine","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/js-engine.md","filePath":"javascript/js-engine.md","lastUpdated":1709617958000}'),i={name:"javascript/js-engine.md"},F=l('<h1 id="javascript-engine" tabindex="-1">JavaScript Engine <a class="header-anchor" href="#javascript-engine" aria-label="Permalink to &quot;JavaScript Engine&quot;">​</a></h1><div><p><code>一个页面中的所有 JavaScript 脚本，以及呈现布局，回流，和垃圾回收都在一个线程中运行。</code><br><code>本节总结由 JavaScript 引擎所环绕的相关浏览器知识点</code></p></div><div class="info custom-block"><p class="custom-block-title">进程和线程</p><p><code>进程：CPU 进行资源分配的基本单位</code><br><code>线程：CPU 调度的最小单位，建立在进程的基础上运行的单位，共享进程的内存空间</code><br><code>多进程：多个进程建立运用运行，进程之间互不影响</code><br><code>多线程：多个线程建立工作，可互相通信，共同完成任务</code></p></div><h2 id="页面常用线程" tabindex="-1">页面常用线程 <a class="header-anchor" href="#页面常用线程" aria-label="Permalink to &quot;页面常用线程&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">1. GUI渲染线程 (Render)</p><p><code>渲染浏览器界面，解析HTML，CSS，构建dom树，布局和绘制</code><br><code>如当JS引擎添加DOM元素时，会调用渲染引擎，创建一个JS引擎所指定的DOM元素，包括相应的attribute</code><br><code>该线程与JS线程互斥，当JS引擎执行时，该线程会被挂起，会保存在队列中等到JS引擎空闲时立即执行</code></p></div><div class="info custom-block"><p class="custom-block-title">2. JS引擎线程 (JS内核)</p><p><code>负责处理 JavaScript 脚本程序 (例如V8引擎)，解析 JavaScript 脚本，运行代码</code><br><code>一个页面中只有一个JS线程在运行JS程序</code><br><code>如果JS引擎运行时间过长，会造成阻塞页面加载，影响GUI渲染线程页面加载</code><br><code>当JS引擎修改DOM的时候，如果同时运行GUI引擎，会造成页面数据不一致</code><br><code>因此GUI更新渲染会先记录JS脚本对DOM的操作，把执行任务放到任务队列中，等JS引擎空闲时立即执行</code><br><code>JS引擎是基于事件驱动单线程执行，JS线程一直在等待任务列表中的任务到来</code><br><code>而JS线程与GUI渲染线程是互斥的，当JS线程执行时，渲染线程呈挂起状态，只有当JS线程空闲时渲染线程才会执行。</code></p></div><div class="info custom-block"><p class="custom-block-title">3. 浏览器事件线程 (Event)</p><p><code>该事件归属于浏览器，用来控制处理事件</code><code>当JS引擎遇到事件时 (不是首先同步处理的事件)，Dom Event事件等，会将这些任务添加到该事件线程中</code><code>当事件符合触发条件被触发时 (如点击，移动等操作)，该线程会把事件添加到任务队列末尾，等待JS引擎的处理</code><code>由于JS时单线程，所以任务队列需要等待JS引擎依次处理</code></p></div><div class="info custom-block"><p class="custom-block-title">4. 定时器触发线程 (setTimeout,setInterval)</p><p><code>定时器不是由JS引擎计数的，因为JS是单线程，如果处于阻塞状态就会影响计时的准确，所以会在其他线程运行</code><br><code>当计时完毕后，会添加到任务队列中，等待JS引擎执行</code><br><code>注意！！！</code><br><code>如果JS引擎处理其他任务超过定时器时间</code><br><code>如定时器5000ms，循环事件用了10000ms，就算定时器线程在5000ms的时候把执行函数放入到事件队列中，也必须等循环结束后才能调用，这就造成实际是10秒之后才触发</code></p></div><div class="info custom-block"><p class="custom-block-title">5. HTTP异步线程 (Ajax,Fetch)</p><p><code>当 XMLHttpRequest 创建连接后，浏览器会新开一个线程请求</code><br><code>该异步线程产生状态变更事件时，当检测到状态变更时 (onreadystateChange = function () {})</code><br><code>将这个回调函数放入事件队列中，再由JS引擎执行</code></p></div><h2 id="内存" tabindex="-1">内存 <a class="header-anchor" href="#内存" aria-label="Permalink to &quot;内存&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">简介</p><p><code>在 JavaScript 中定义的所有内容，引擎会分配内存并在我们不再需要它时释放它</code><br><code>JavaScript 引擎有两个可以存储数据的地方：栈和堆</code><br><code>栈和堆是引擎用于不同目的而创建的两块内存，不同的数据结构</code></p></div><h2 id="栈" tabindex="-1">栈 <a class="header-anchor" href="#栈" aria-label="Permalink to &quot;栈&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">简介</p><p><code>属于静态内存分配</code><br><code>静态数据是引擎在编译时知道大小的数据 (String,Number,Boolean,Undefined,Null)</code><br><code>由于引擎知道大小不会更改，因此它将为每个值分配固定数量的内存</code><br><code>在执行之前分配内存的过程称为静态内存分配</code><img src="'+e+'" alt="栈.png"></p></div><h2 id="堆" tabindex="-1">堆 <a class="header-anchor" href="#堆" aria-label="Permalink to &quot;堆&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">简介</p><p><code>属于动态内存分配</code><br><code>存储Object和Function</code><br><code>由于在编译阶段无法得知固定的内存大小，则不会分配固定数量的内存，相反，将根据需要分配更多空间</code><br><code>栈内存中存储的变量值记录的是堆内存地址，指针通过内存地址找到对应的引用对象</code><img src="'+o+'" alt="堆.png"></p></div><p><strong>区别</strong></p><table><thead><tr><th></th><th>栈</th><th>堆</th></tr></thead><tbody><tr><td>存储内容</td><td>基础数据和堆内存地址</td><td>对象和函数</td></tr><tr><td>存储大小</td><td>大小在编译时已知</td><td>大小在运行时已知</td></tr><tr><td>内存区别</td><td>分配固定数量的内存</td><td>动态内存空间</td></tr></tbody></table><h2 id="event-loop" tabindex="-1">Event Loop <a class="header-anchor" href="#event-loop" aria-label="Permalink to &quot;Event Loop&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">简介</p><p><code>解决JavaScript单线程运行时不会阻塞的一种机制，也就是实现异步的原理</code><br><code>Javascript本身是没有异步这一说法的，是由其宿主环境提供的</code></p><p><video height="400" width="100%" controls autoplay loop src="'+p+`"></video></p><p><code>调用脚本和函数时，都会依次添加到 执行栈 顶部，执行完毕后 解释器 会将其从 执行栈 中删除</code><br><code>在执行栈中当解析为 同步任务 则直接运行，若解析为 异步任务 则将放入 Web APIs 中等到触发时机成熟便将任务推送到 Callback Queue，Callback Queue 再推送给 执行栈 依次执行</code></p><ol><li><p><strong>执行栈 (Call Stack)</strong><br><code>JavaScript 代码被解析和执行时所在环境，具有 LIFO(后进先出) 结构</code><br><code>在 JavaScript 执行之前，会先编译代码，创建执行上下文，压入执行栈中</code></p></li><li><p><strong>Web平台接口 (Web Apis)</strong><br><code>Web 环境所拥有的接口，当执行AjAx、Fetch、setTimeout、DOM、UserHandle操作 等调用时，它们往往不是同步进行的，而是通知 其他线程 进行操作</code><br><code>当这些外部接口调用 符合一定条件 时，会将对应的 回调函数 或 事件消息 推送到 任务队列 末尾，等待依次放入 执行栈 执行</code></p></li><li><p><strong>回调队列 (Callback Queue)</strong><br><code>回调队列 也称为 事件队列，具有 FIFO(先进先出) 结构</code><br><code>当 Web APIs 有事件触发时，会向 回调队列末尾 推入对应的 脚本 或 函数，回调队列 再依次推入 执行栈 执行</code></p></li><li><p><strong>同步任务和异步任务</strong></p></li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#A6E22E;">setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;setTimeout&#39;</span><span style="color:#F8F8F2;">) }, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">输出: </span><span style="color:#AE81FF;">1</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;"> setTimeout</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>以上代码在执行时</code><br><code>同步任务是 1 2 ，在 执行栈 中会依次执行</code><br><code>异步任务是 setTimeout，在 执行栈 解析到后会让 宿主环境(Web接口)进行对应的接口操作，在接口符合条件的情况下再推入 回调队列 末尾</code></p><ol start="5"><li><strong>宏任务和微任务</strong></li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#A6E22E;">requestIdleCallback</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;requestIdleCallback&#39;</span><span style="color:#F8F8F2;">) },{ timeout: </span><span style="color:#AE81FF;">2000</span><span style="color:#F8F8F2;"> })</span></span>
<span class="line"><span style="color:#A6E22E;">setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;setTimeout&#39;</span><span style="color:#F8F8F2;">) }, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#A6E22E;">requestAnimationFrame</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;requestAnimationFrame&#39;</span><span style="color:#F8F8F2;">) })</span></span>
<span class="line"><span style="color:#A6E22E;">queueMicrotask</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;queueMicrotask&#39;</span><span style="color:#F8F8F2;">) })</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">输出: </span><span style="color:#AE81FF;">1</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;"> queueMicrotask requestAnimationFrame setTimeout requestIdleCallback</span></span>
<span class="line"><span style="color:#F8F8F2;">输出: </span><span style="color:#AE81FF;">1</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;"> queueMicrotask setTimeout requestAnimationFrame requestIdleCallback</span></span>
<span class="line"><span style="color:#88846F;">/* </span></span>
<span class="line"><span style="color:#88846F;">   queueMicrotask: 微任务 (microtask)，在执行事件循环队列之前调用</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"><span style="color:#88846F;">/* 请求动画帧</span></span>
<span class="line"><span style="color:#88846F;">   requestAnimationFrame: 要求浏览器在下次重绘之前调用指定的回调函数，如更新动画</span></span>
<span class="line"><span style="color:#88846F;">      - 把每一帧中的所有DOM操作集中起来，在下次重绘之前调用，把所有动画操作集中在一次重绘</span></span>
<span class="line"><span style="color:#88846F;">      - 重绘时间间隔紧紧跟随浏览器的刷新频率，一般来说，这个频率为每秒60帧，1000ms/60</span></span>
<span class="line"><span style="color:#88846F;">      - 相当于每16.7ms就会刷新一次，生成动画可以执行递归操作</span></span>
<span class="line"><span style="color:#88846F;">      - cancelAnimationFrame(raf)取消</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"><span style="color:#88846F;">/* 请求空闲回调</span></span>
<span class="line"><span style="color:#88846F;">   requestIdleCallback: 在浏览器空闲时期被调用，不会影响延迟关键事件，如动画和输入响应</span></span>
<span class="line"><span style="color:#88846F;">      - timeout: 如果回调函数在2000ms后还未执行，那么回调任务将放入事件循环中排队</span></span>
<span class="line"><span style="color:#88846F;">      - cancelIdleCallback(ric)取消</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p><code>以上代码在执行时</code><br><code>同步任务是 1 2 ，在 执行栈 中会依次执行</code><br><code>异步任务在这里进行了划分 宏任务 和 微任务</code></p><ul><li>宏任务 <ul><li>setTimeout、setInterval、AjAx、Fetch、UserHandle</li><li>这些 宏任务 会放入 回调队列 中执行</li></ul></li><li>微任务 <ul><li>queueMicrotask、Promise.then、MutationObserver</li><li>这些 微任务 会放入 微任务队列 中执行</li></ul></li></ul><p><code>在 宏任务 执行前，都会先检查 微任务队列，看是否有待执行的 微任务，必先执行 微任务 再执行 宏任务</code></p></div><h2 id="垃圾回收" tabindex="-1">垃圾回收 <a class="header-anchor" href="#垃圾回收" aria-label="Permalink to &quot;垃圾回收&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">简介</p><p><code>当我们申明变量、引用对象时，使用结束后应当 释放内存 </code><br><code>就像内存分配一样，JavaScript 引擎也为我们处理这一步，垃圾回收器会处理这个问题</code><br><code>一旦 JavaScript 引擎识别出不再需要给定的变量或函数，它就会释放它占用的内存</code><br><code>这样做的主要问题是，是否仍然需要一些内存是一个无法确定的问题，这意味着不可能有一种算法能够在它过时的那一刻收集所有不再需要的内存</code></p><ol><li><strong>引用计数</strong></li></ol><p><code>当对象的引用计数为0时，垃圾回收就发生了</code><br><code>它实际上是通过在对象头中分配一个空间来保存该对象被引用的次数。如果该对象被其它对象引用，则它的引用计数加一</code><br><code>如果删除对该对象的引用，那么它的引用计数就减一，当该对象的引用计数为0时，那么该对象就会被回收</code><br><video height="400" width="100%" controls autoplay loop src="`+c+'"></video></p><p><code>此算法的问题在于它不考虑循环引用。当一个或多个对象相互引用，但无法再通过代码访问它们时，就会发生这种情况。</code><img src="'+t+`" alt="garbage.png"></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> son </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> { name: </span><span style="color:#E6DB74;">&#39;John&#39;</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> dad </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> { name: </span><span style="color:#E6DB74;">&#39;Johnson&#39;</span><span style="color:#F8F8F2;"> }</span></span>
<span class="line"><span style="color:#88846F;">// 由于两个对象相互引用，因此算法不会释放分配的内存</span></span>
<span class="line"><span style="color:#F8F8F2;">son.dad </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> dad;</span></span>
<span class="line"><span style="color:#F8F8F2;">dad.son </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> son;</span></span>
<span class="line"><span style="color:#88846F;">// 手动标记清空以释放内存</span></span>
<span class="line"><span style="color:#F8F8F2;">son </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> null</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">dad </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> null</span><span style="color:#F8F8F2;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ol start="2"><li><strong>标记清除</strong></li></ol><p><code>扫描全局对象，递归查找引用的对象，如果能访问到，就表示活跃，不会被释放</code><br><code>该算法将无法访问的对象标记为垃圾，然后扫描（收集）它们</code><img src="`+r+`" alt="garbage.png"></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;">// 函数结束后发现两个对象都无法从根访问，则标记为垃圾清除</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#A6E22E;"> garbage</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    let</span><span style="color:#F8F8F2;"> son </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> { name: </span><span style="color:#E6DB74;">&#39;John&#39;</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    let</span><span style="color:#F8F8F2;"> dad </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> { name: </span><span style="color:#E6DB74;">&#39;Johnson&#39;</span><span style="color:#F8F8F2;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    son.dad </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> dad;</span></span>
<span class="line"><span style="color:#F8F8F2;">    dad.son </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> son;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#A6E22E;">garbage</span><span style="color:#F8F8F2;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ol start="3"><li><strong>内存泄漏</strong><ul><li><strong>全局变量</strong><br><code>变量的不当使用，创建意外的全局变量，导致函数执行完毕后无法销毁。可在使用 &quot;use strict&quot; 开启严格模式避免</code></li></ul></li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#A6E22E;"> foo</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#F8F8F2;">    name </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;前端曰&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">// 其实是把name变量挂载在window对象上</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#A6E22E;"> foo</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#F8F8F2;">    window.name </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;前端曰&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">// 又或者</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#A6E22E;"> foo</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#88846F;">    // 其实这里的this就是指向的window对象</span></span>
<span class="line"><span style="color:#FD971F;">    this</span><span style="color:#F8F8F2;">.name </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;前端曰&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#A6E22E;">foo</span><span style="color:#F8F8F2;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><ul><li><strong>定时器</strong><br><code>定时器的不当使用，定时器中的引用不会被标记清除，因为他仍在使用，在SPA页面中就算离开该页面，定时器也会继续执行</code></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> object </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {};</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> intervalId </span><span style="color:#F92672;">=</span><span style="color:#A6E22E;"> setInterval</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#A6E22E;">  doSomething</span><span style="color:#F8F8F2;">(object);</span></span>
<span class="line"><span style="color:#F8F8F2;">}, </span><span style="color:#AE81FF;">2000</span><span style="color:#F8F8F2;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><strong>监听器</strong><br><code>监听器使用过后，不再使用应当移除掉</code></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> element </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#A6E22E;">getElementById</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;button&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#A6E22E;"> onClick</span><span style="color:#F92672;"> =</span><span style="color:#F8F8F2;"> () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#A6E22E;"> alert</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;hi&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">element.</span><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;click&#39;</span><span style="color:#F8F8F2;">, onClick);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">element.</span><span style="color:#A6E22E;">removeEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;click&#39;</span><span style="color:#F8F8F2;">, onClick);</span></span>
<span class="line"><span style="color:#F8F8F2;">element.parentNode.</span><span style="color:#A6E22E;">removeChild</span><span style="color:#F8F8F2;">(element);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li><strong>闭包</strong><br><code>内部匿名函数可以访问父级作用域的变量，实现数据私有化，减少重复调用函数时所造成开辟的内存开销，使外部可以使用函数内部的变量</code><br><code>当closure函数执行完毕后，垃圾回收机制是应当清空函数的所占用的内存的</code><br><code>但是内部return的匿名函数还引用着父级作用域中的变量，则导致无法标记垃圾回收</code></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#A6E22E;"> closure</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    let</span><span style="color:#F8F8F2;"> min </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 10</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#66D9EF;font-style:italic;"> function</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">max</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F8F8F2;"> min </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> max;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> clo </span><span style="color:#F92672;">=</span><span style="color:#A6E22E;"> closure</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#A6E22E;">clo</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#A6E22E;">clo</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#A6E22E;">clo</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1000</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li><strong>JavaScript 内存管理 (生命周期)</strong></li></ul><ol><li>分配需要的内存</li><li>使用分配的内存</li><li>不需要时，释放内存</li></ol></div>`,21),d=[F];function b(y,u,m,E,g,v){return a(),n("div",null,d)}const A=s(i,[["render",b]]);export{k as __pageData,A as default};
