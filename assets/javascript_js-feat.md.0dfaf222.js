import{_ as s,c as n,o as a,a as l}from"./app.1870fd30.js";const E=JSON.parse('{"title":"JavaScript New Features","description":"","frontmatter":{},"headers":[{"level":2,"title":"ES6","slug":"es6","link":"#es6","children":[]},{"level":2,"title":"ES2016","slug":"es2016","link":"#es2016","children":[]},{"level":2,"title":"ES2017","slug":"es2017","link":"#es2017","children":[]},{"level":2,"title":"ES2018","slug":"es2018","link":"#es2018","children":[]},{"level":2,"title":"ES2019","slug":"es2019","link":"#es2019","children":[]},{"level":2,"title":"ES2020","slug":"es2020","link":"#es2020","children":[]},{"level":2,"title":"ES2021","slug":"es2021","link":"#es2021","children":[]},{"level":2,"title":"ES2022","slug":"es2022","link":"#es2022","children":[]},{"level":2,"title":"ES2023","slug":"es2023","link":"#es2023","children":[]}],"relativePath":"javascript/js-feat.md","lastUpdated":1678179430000}'),p={name:"javascript/js-feat.md"},o=l(`<h1 id="javascript-new-features" tabindex="-1">JavaScript New Features <a class="header-anchor" href="#javascript-new-features" aria-hidden="true">#</a></h1><h2 id="es6" tabindex="-1">ES6 <a class="header-anchor" href="#es6" aria-hidden="true">#</a></h2><ul><li><strong>let与const</strong></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">/* </span></span>
<span class="line"><span style="color:#88846F;">        不存在变量提升</span></span>
<span class="line"><span style="color:#88846F;">        报错 Cannot access &#39;a&#39; before initialization</span></span>
<span class="line"><span style="color:#88846F;">    */</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(a)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    a   </span><span style="color:#88846F;">// 0</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">/* </span></span>
<span class="line"><span style="color:#88846F;">        不能重复声明</span></span>
<span class="line"><span style="color:#88846F;">        SyntaxError: Identifier &#39;a&#39; has already been declared</span></span>
<span class="line"><span style="color:#88846F;">    */</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">        常量不允许改变</span></span>
<span class="line"><span style="color:#88846F;">        TypeError: Assignment to constant variable</span></span>
<span class="line"><span style="color:#88846F;">    */</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span></span>
<span class="line"><span style="color:#F8F8F2;">    a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">        const声明变量必须初始化值</span></span>
<span class="line"><span style="color:#88846F;">        SyntaxError: Missing initializer in const declaration</span></span>
<span class="line"><span style="color:#88846F;">    */</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> b</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">/* </span></span>
<span class="line"><span style="color:#88846F;">    只在let与const代码块内有效</span></span>
<span class="line"><span style="color:#88846F;">    ReferenceError: a is not defined</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"><span style="color:#F8F8F2;">a</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">/* var 会存在变量提升，但是值不会提升，所以 a = undefined */</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(a)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">/* var 声明后变量会绑定在window全局对象上 */</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">/* var不会形成代码块作用域 */</span></span>
<span class="line"><span style="color:#F8F8F2;">a </span><span style="color:#88846F;">// 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><ul><li><strong>解构赋值</strong></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> [a,b,c] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">] </span><span style="color:#88846F;">// a=1,b=2,c=3</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> [a,[b,c]] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,[</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]] </span><span style="color:#88846F;">// a=1,b=2,c=3</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> [a,  ,c] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">] </span><span style="color:#88846F;">// a=1,c=3</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> [a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,b] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [] </span><span style="color:#88846F;">// a=1,b=undefined</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> [a, </span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">b] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">] </span><span style="color:#88846F;">// 剩余运算符 a=1,b=[2,3]</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> [a,b,c,d] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;qwer&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// a=&#39;q&#39;,b=&#39;w&#39;,c=&#39;e&#39;,r=&#39;d&#39;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> [a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">undefined</span><span style="color:#F8F8F2;">] </span><span style="color:#88846F;">// 解构默认值 a=2</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> [a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, b </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> a] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [] </span><span style="color:#88846F;">// a=3,b=3</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> [a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, b </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> a] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#88846F;">// a=1,b=1</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> [a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, b </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> a] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">]</span><span style="color:#88846F;">// a=1,b=2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 对象模型的解构</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> {a,b} </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {a:</span><span style="color:#E6DB74;">&#39;aaa&#39;</span><span style="color:#F8F8F2;">, b:</span><span style="color:#E6DB74;">&#39;bbb&#39;</span><span style="color:#F8F8F2;">} </span><span style="color:#88846F;">// a=&#39;aaa&#39;,b=&#39;bbb&#39;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> {a:b} </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {a:</span><span style="color:#E6DB74;">&#39;bbb&#39;</span><span style="color:#F8F8F2;">} </span><span style="color:#88846F;">// b=&#39;bbb&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {p: [</span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">, {y:</span><span style="color:#E6DB74;">&#39;world&#39;</span><span style="color:#F8F8F2;">}] }     </span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> {p: [x, { y }] } </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> obj </span><span style="color:#88846F;">// x=&quot;hello&quot;,y=&quot;world&quot;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> {p: [x] } </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> obj </span><span style="color:#88846F;">// x=&quot;hello&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> {a,b,</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">rest} </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {a:</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">,b:</span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">,c:</span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">,d:</span><span style="color:#AE81FF;">40</span><span style="color:#F8F8F2;">} </span><span style="color:#88846F;">// a=10,b=20,rest={c:30,d:40}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> {a</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">,b</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">} </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {a:</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">} </span><span style="color:#88846F;">// a=3,b=5</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> {a:aa</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">,b:bb</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">} </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {a:</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">} </span><span style="color:#88846F;">// aa=3,bb=5</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><ul><li><strong>Symbol</strong></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">// 原始数据类型Symbol，表示独一无二的值，最大的用法是用来定义对象的唯一属性名</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> sy </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Symbol</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> sy </span><span style="color:#88846F;">// symbol</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> sy1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Symbol</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">42</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">sy1 </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">42</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> sy2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Symbol</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;foo&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#A6E22E;">Symbol</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;foo&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> sy2 </span><span style="color:#88846F;">// false</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#88846F;">// 1. 使用场景，作为属性名</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> sy </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Symbol</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;key1&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> syObject </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  [sy]: </span><span style="color:#E6DB74;">&quot;kk&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(syObject);    </span><span style="color:#88846F;">// {Symbol(key1): &quot;kk&quot;}</span></span>
<span class="line"><span style="color:#88846F;">// 取值可以用Object.getOwnPropertySymbols() 和 Reflect.ownKeys()</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#88846F;">// 2. 使用场景，定义常量</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> COLOR_RED </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Symbol</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;red&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> COLOR_YELLOW </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Symbol</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;yellow&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> COLOR_BLUE </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Symbol</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;blue&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">getConstantName</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">color</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">switch</span><span style="color:#F8F8F2;"> (color) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">case</span><span style="color:#F8F8F2;"> COLOR_RED :</span></span>
<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;COLOR_RED&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">case</span><span style="color:#F8F8F2;"> COLOR_YELLOW :</span></span>
<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;COLOR_YELLOW&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">case</span><span style="color:#F8F8F2;"> COLOR_BLUE:</span></span>
<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;COLOR_BLUE&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">default</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#F92672;">throw</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">ColorException</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Can&#39;t find this color&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#A6E22E;">getConstantName</span><span style="color:#F8F8F2;">(COLOR_YELLOW)</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#88846F;">// 3. 全局Symbol注册表</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> yellow1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Symbol.</span><span style="color:#A6E22E;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Yellow&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#88846F;">// 获取全局 symbol 注册表中某个symbol关联的键</span></span>
<span class="line"><span style="color:#F8F8F2;">Symbol.</span><span style="color:#A6E22E;">keyFor</span><span style="color:#F8F8F2;">(yellow1);    </span><span style="color:#88846F;">// &quot;Yellow&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><ul><li><strong>Map与Set</strong></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">/* </span></span>
<span class="line"><span style="color:#88846F;">    Maps 和 Objects 的区别</span></span>
<span class="line"><span style="color:#88846F;">    1. 一个 Object 的键只能是字符串或者 Symbols，但一个 Map 的键可以是任意值。</span></span>
<span class="line"><span style="color:#88846F;">    2. Map 中的键值是有序的（FIFO 原则），而添加到对象中的键则不是。</span></span>
<span class="line"><span style="color:#88846F;">    3. Map 的键值对个数可以从 size 属性获取，而 Object 的键值对个数只能手动计算。</span></span>
<span class="line"><span style="color:#88846F;">    4. Object 都有自己的原型，原型链上的键名有可能和你自己在对象上的设置的键名产生冲突。</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> map </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Map</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">map.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;key&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;value&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">map.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;key&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">// Map迭代</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> [key, value] </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> Map)</span></span>
<span class="line"><span style="color:#F8F8F2;">Map.</span><span style="color:#A6E22E;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">,</span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">)</span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;">{})</span></span>
<span class="line"><span style="color:#88846F;">// Map与Array互转</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> kvArray </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [[</span><span style="color:#E6DB74;">&quot;key1&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;value1&quot;</span><span style="color:#F8F8F2;">], [</span><span style="color:#E6DB74;">&quot;key2&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;value2&quot;</span><span style="color:#F8F8F2;">]];</span></span>
<span class="line"><span style="color:#88846F;">// Map 构造函数可以将一个 二维 键值对数组转换成一个 Map 对象</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> myMap </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Map</span><span style="color:#F8F8F2;">(kvArray);</span></span>
<span class="line"><span style="color:#88846F;">// 使用 Array.from 函数可以将一个 Map 对象转换成一个二维键值对数组</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> outArray </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Array.</span><span style="color:#A6E22E;">from</span><span style="color:#F8F8F2;">(myMap);</span></span>
<span class="line"><span style="color:#88846F;">// Map合并</span></span>
<span class="line"><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Map</span><span style="color:#F8F8F2;">([</span><span style="color:#F92672;">...new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Map</span><span style="color:#F8F8F2;">(), </span><span style="color:#F92672;">...new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Map</span><span style="color:#F8F8F2;">()])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">    Set 对象存储的值总是唯一的，所以需要判断两个值是否恒等。有几个特殊值需要特殊对待：</span></span>
<span class="line"><span style="color:#88846F;">    1. +0 与 -0 在存储判断唯一性的时候是恒等的，所以不重复；</span></span>
<span class="line"><span style="color:#88846F;">    2. undefined 与 undefined 是恒等的，所以不重复；</span></span>
<span class="line"><span style="color:#88846F;">    3. NaN 与 NaN 是不恒等的，但是在 Set 中只能存一个，不重复。</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> set </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Set</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">set.</span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;value&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">set.</span><span style="color:#A6E22E;">has</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;value&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">set.</span><span style="color:#A6E22E;">keys</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">set.</span><span style="color:#A6E22E;">values</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">set.</span><span style="color:#A6E22E;">forEach</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">set.</span><span style="color:#A6E22E;">entries</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">set.</span><span style="color:#A6E22E;">delete</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">set.</span><span style="color:#A6E22E;">clear</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// Array 转 Set</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> arr </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E6DB74;">&quot;value1&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;value2&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;value3&quot;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> mySet </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Set</span><span style="color:#F8F8F2;">(arr);</span></span>
<span class="line"><span style="color:#88846F;">// Set 转 Array</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">mySet]</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><ul><li><strong>Proxy与Reflect</strong></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">/* </span></span>
<span class="line"><span style="color:#88846F;">    Proxy 可以对目标对象的读取、函数调用等操作进行拦截，然后进行操作处理。</span></span>
<span class="line"><span style="color:#88846F;">    它不直接操作对象，而是像代理模式。</span></span>
<span class="line"><span style="color:#88846F;">    通过对象的代理对象进行操作，在进行这些操作时，可以添加一些需要的额外操作。</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> target </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    name: </span><span style="color:#E6DB74;">&#39;Tom&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    age: </span><span style="color:#AE81FF;">24</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> handler </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 用于拦截对象的读取属性操作</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">) { </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> target[key] },</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 设置属性值操作的捕获器</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">) { target[key] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> value },</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 用于拦截函数的调用</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">apply</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">thisArg</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">argumentsList</span><span style="color:#F8F8F2;">) { </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">target</span><span style="color:#F8F8F2;">(argumentsList) },</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 用于拦截 new 操作符</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">construct</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) { </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">target</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">args) }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> proxy </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Proxy</span><span style="color:#F8F8F2;">(target, handler)</span></span>
<span class="line"><span style="color:#F8F8F2;">proxy.name     </span><span style="color:#88846F;">// 实际执行 handler.get</span></span>
<span class="line"><span style="color:#F8F8F2;">proxy.age </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">25</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// 实际执行 handler.set</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">    Reflect 提供操作JavaScript的方法</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> { x: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, y: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#F8F8F2;">Reflect.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(obj, </span><span style="color:#E6DB74;">&quot;x&quot;</span><span style="color:#F8F8F2;">); </span><span style="color:#88846F;">// 1</span></span>
<span class="line"><span style="color:#F8F8F2;">Reflect.</span><span style="color:#A6E22E;">has</span><span style="color:#F8F8F2;">(obj, </span><span style="color:#E6DB74;">&quot;x&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">Reflect.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">(obj, </span><span style="color:#E6DB74;">&quot;prop&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;value&quot;</span><span style="color:#F8F8F2;">); </span><span style="color:#88846F;">// true</span></span>
<span class="line"><span style="color:#88846F;">// 一个由目标对象自身的属性键组成的数组</span></span>
<span class="line"><span style="color:#F8F8F2;">Reflect.</span><span style="color:#A6E22E;">ownKeys</span><span style="color:#F8F8F2;">(obj)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><ul><li><strong>字符串</strong></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> str </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;string&#39;</span></span>
<span class="line"><span style="color:#88846F;">// 判断是否找到参数字符串</span></span>
<span class="line"><span style="color:#F8F8F2;">str.</span><span style="color:#A6E22E;">includes</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;str&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// true</span></span>
<span class="line"><span style="color:#88846F;">// 判断参数字符串是否在字符串头部</span></span>
<span class="line"><span style="color:#F8F8F2;">str.</span><span style="color:#A6E22E;">startsWith</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;str&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// true</span></span>
<span class="line"><span style="color:#88846F;">// 判断参数字符串是否在字符串尾部</span></span>
<span class="line"><span style="color:#F8F8F2;">str.</span><span style="color:#A6E22E;">endsWith</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;ing&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// true</span></span>
<span class="line"><span style="color:#88846F;">// 将指定字符串重复指定参数次数</span></span>
<span class="line"><span style="color:#F8F8F2;">str.</span><span style="color:#A6E22E;">repeat</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// stringstring</span></span>
<span class="line"><span style="color:#88846F;">// 返回新的字符串，表示用参数字符串从头部（左侧）补全原字符串</span></span>
<span class="line"><span style="color:#F8F8F2;">str.</span><span style="color:#A6E22E;">padStart</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;o&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// oooostring</span></span>
<span class="line"><span style="color:#88846F;">// 返回新的字符串，表示用参数字符串从尾部（右侧）补全原字符串</span></span>
<span class="line"><span style="color:#F8F8F2;">str.</span><span style="color:#A6E22E;">padEnd</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;o&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// stringoooo</span></span>
<span class="line"><span style="color:#88846F;">// 模板字符串</span></span>
<span class="line"><span style="color:#E6DB74;">\`hello, </span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">str</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;">\`</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// hello, string</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><ul><li><strong>对象</strong></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 对象字面量</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> [age,name] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">12</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;join&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> person </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {age, name} </span><span style="color:#88846F;">// {age: 12, name: &#39;join&#39;}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> person </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">myGenerator</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">yield</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;hello world&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">sayHi</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Hi&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  [</span><span style="color:#E6DB74;">&quot;he&quot;</span><span style="color:#F92672;">+</span><span style="color:#E6DB74;">&quot;llo&quot;</span><span style="color:#F8F8F2;">](){</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;Hi&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">// 拓展运算符</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> age </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {age: </span><span style="color:#AE81FF;">15</span><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {name: </span><span style="color:#E6DB74;">&quot;Amy&quot;</span><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> person </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">age, </span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">name}; </span><span style="color:#88846F;">// {age: 15, name: &#39;Amy&#39;}</span></span>
<span class="line"><span style="color:#88846F;">// 对象新方法</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> target </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {a: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> object2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {b: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">assign</span><span style="color:#F8F8F2;">(target,object2); </span><span style="color:#88846F;">// {a: 1, b: 2}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">is</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;q&quot;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&quot;q&quot;</span><span style="color:#F8F8F2;">);      </span><span style="color:#88846F;">// true</span></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">is</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">);          </span><span style="color:#88846F;">// true</span></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">is</span><span style="color:#F8F8F2;">([</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">],[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]);      </span><span style="color:#88846F;">// false</span></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">is</span><span style="color:#F8F8F2;">({q:</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">},{q:</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">});  </span><span style="color:#88846F;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">entries</span><span style="color:#F8F8F2;">({name: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">}) </span><span style="color:#88846F;">// [[&#39;name&#39;,2]]</span></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">fromEntries</span><span style="color:#F8F8F2;">([[</span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">]]) </span><span style="color:#88846F;">// {name: 2}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><ul><li><strong>数组</strong></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 将参数中所有值作为元素形成数组</span></span>
<span class="line"><span style="color:#F8F8F2;">Array.</span><span style="color:#A6E22E;">of</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">); </span><span style="color:#88846F;">// [1, 2, 3, 4]</span></span>
<span class="line"><span style="color:#88846F;">// 将类数组对象或可迭代对象转化为数组</span></span>
<span class="line"><span style="color:#F8F8F2;">Array.</span><span style="color:#A6E22E;">from</span><span style="color:#F8F8F2;">([</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">], (</span><span style="color:#FD971F;font-style:italic;">n</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> n </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">); </span><span style="color:#88846F;">// [2, 4]</span></span>
<span class="line"><span style="color:#88846F;">// 转换 Map</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> map </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Map</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">map.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;key0&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;value0&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">map.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;key1&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;value1&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Array.</span><span style="color:#A6E22E;">from</span><span style="color:#F8F8F2;">(map)); </span><span style="color:#88846F;">// [[&#39;key0&#39;, &#39;value0&#39;],[&#39;key1&#39;, &#39;value1&#39;]]</span></span>
<span class="line"><span style="color:#88846F;">// 转换 set</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> set </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Set</span><span style="color:#F8F8F2;">(arr);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Array.</span><span style="color:#A6E22E;">from</span><span style="color:#F8F8F2;">(set)); </span><span style="color:#88846F;">// [1, 2, 3]</span></span>
<span class="line"><span style="color:#88846F;">// 转换字符串</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> str </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;abc&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Array.</span><span style="color:#A6E22E;">from</span><span style="color:#F8F8F2;">(str)); </span><span style="color:#88846F;">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span>
<span class="line"><span style="color:#88846F;">// 扩展方法</span></span>
<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#A6E22E;">find</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">item</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> item </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#A6E22E;">findIndex</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">item</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> item </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#A6E22E;">fill</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#A6E22E;">copyWithin</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#A6E22E;">entries</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#A6E22E;">keys</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#A6E22E;">values</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#A6E22E;">includes</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;arr&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">// 嵌套数组转一维数组</span></span>
<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#A6E22E;">flat</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">// 先处理再转换</span></span>
<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#A6E22E;">flatMap</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">n</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> [n </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 创建数组缓冲区</span></span>
<span class="line"><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">ArrayBuffer</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">// 操作视图，视图是用来操作内存的接口</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> buffer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">ArrayBuffer</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">dataView </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">DataView</span><span style="color:#F8F8F2;">(buffer); </span></span>
<span class="line"><span style="color:#F8F8F2;">dataView.</span><span style="color:#A6E22E;">setInt8</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">dataView.</span><span style="color:#A6E22E;">getInt8</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">); </span><span style="color:#88846F;">// 1</span></span>
<span class="line"><span style="color:#88846F;">// 定型数组，制使用特定的数据类型</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> buffer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">ArrayBuffer</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">new Int8Array(buffer);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><ul><li><strong>函数</strong></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 默认参数</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">fn</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F8F8F2;">,</span><span style="color:#FD971F;font-style:italic;">age</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">17</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#F8F8F2;"> console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(name</span><span style="color:#F92672;">+</span><span style="color:#E6DB74;">&quot;,&quot;</span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;">age);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#A6E22E;">fn</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Amy&quot;</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">18</span><span style="color:#F8F8F2;">);  </span><span style="color:#88846F;">// Amy,18</span></span>
<span class="line"><span style="color:#88846F;">// 剩余参数接收</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">f</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">...</span><span style="color:#FD971F;font-style:italic;">values</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(values.length);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#A6E22E;">f</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">);      </span><span style="color:#88846F;">//2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 箭头函数</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">f</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">x</span><span style="color:#F8F8F2;">) { </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> x };</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">f</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;font-style:italic;">x</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> x</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ul><li><strong>Class类</strong></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">    class 的本质是 function。</span></span>
<span class="line"><span style="color:#88846F;">    它可以看作一个语法糖，让对象原型的写法更加清晰、更像面向对象编程的语法。</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"><span style="color:#88846F;">// 匿名类</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> example </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> {}</span></span>
<span class="line"><span style="color:#88846F;">// 命名类</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> example </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Example</span><span style="color:#F8F8F2;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// target指向class本身</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">testable</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    target.isTestable </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">// 装饰器，还在提案中</span></span>
<span class="line"><span style="color:#F8F8F2;">@testable</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Example</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">extends</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;font-style:italic;text-decoration:underline;">Person</span><span style="color:#F8F8F2;"> { </span><span style="color:#88846F;">// 类声明，继承父类</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 静态属性</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">static</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 静态方法</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">static</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">getName</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">        console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 实例属性，定义在实例对象（ this ）上的属性</span></span>
<span class="line"><span style="color:#F8F8F2;">    a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">3</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// constructor 方法是类的默认方法，创建类的实例化对象时被调用</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">    子类必须在constructor方法中调用super方法，否则新建实例时会报错。</span></span>
<span class="line"><span style="color:#88846F;">    这是因为子类自己的this对象，必须先通过父类的构造函数完成塑造，</span></span>
<span class="line"><span style="color:#88846F;">    得到与父类同样的实例属性和方法，然后再对其进行加工，加上子类自己的实例属性和方法。</span></span>
<span class="line"><span style="color:#88846F;">    如果不调用super方法，子类就得不到this对象</span></span>
<span class="line"><span style="color:#88846F;">    */</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">super</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">        console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.a);</span></span>
<span class="line"><span style="color:#F8F8F2;">        console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// getter / setter</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">get</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">a</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#F8F8F2;">        console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;getter&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.a;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">set</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">a</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">a</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#F8F8F2;">        console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;setter&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> a;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">Example.a</span></span>
<span class="line"><span style="color:#F8F8F2;">Example.</span><span style="color:#A6E22E;">getName</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#88846F;">// 类只能通过new实例化</span></span>
<span class="line"><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Example</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#88846F;">/*</span></span>
<span class="line highlighted"><span style="color:#88846F;">  new.target 检测该函数或构造方法是否被new 运算符调用过  </span></span>
<span class="line highlighted"><span style="color:#88846F;">  如果调用过，返回类或函数本身构造函数，否则为undefined  </span></span>
<span class="line highlighted"><span style="color:#88846F;">  如下图: 检测该类是否被实例化，可以防止类被实例化  </span></span>
<span class="line highlighted"><span style="color:#88846F;">*/</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">C</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;">.target </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> C) {</span></span>
<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#F92672;">throw</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;该类已被实例化&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">C</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br></div></div><ul><li><strong>模块</strong></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">    每一个模块只加载一次（是单例的）， 若再去加载同目录下同文件，直接从内存中读取</span></span>
<span class="line"><span style="color:#88846F;">    每个模块都有自己的上下文，每一个模块内声明的变量都是局部变量，不会污染全局作用域</span></span>
<span class="line"><span style="color:#88846F;">    自动开启严格模式</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;join&#39;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> pwd </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;123456&#39;</span></span>
<span class="line"><span style="color:#88846F;">// 导出 export.js</span></span>
<span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> { name, pwd }</span></span>
<span class="line"><span style="color:#88846F;">// 导入 export.js</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { name, pwd } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;export.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// export default 只能暴露出单个属性</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;My name is Tom!&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">default</span><span style="color:#F8F8F2;"> a;</span></span>
<span class="line"><span style="color:#88846F;">// 不需要加{}， 使用任意变量接收</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> b </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;./xxx.js&quot;</span><span style="color:#F8F8F2;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 使用 as 重新定义导出变量名</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { name </span><span style="color:#F92672;">as</span><span style="color:#F8F8F2;"> Name, pwd </span><span style="color:#F92672;">as</span><span style="color:#F8F8F2;"> Pwd } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;export.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 单例模式，多次重复执行同一句 import 语句，那么只会执行一次</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { a } </span><span style="color:#E6DB74;">&quot;./xxx.js&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">import { a } </span><span style="color:#E6DB74;">&quot;./xxx.js&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#88846F;">// 相当于 import { a } &quot;./xxx.js&quot;;</span></span>
<span class="line"><span style="color:#F8F8F2;">import { a } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;./xxx.js&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { b } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;./xxx.js&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#88846F;">// 相当于 import { a, b } from &quot;./xxx.js&quot;;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><ul><li><strong>Promise对象</strong></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">Promise的状态：</span></span>
<span class="line"><span style="color:#88846F;">    pending(进行中) - fulfilled(已成功)</span></span>
<span class="line"><span style="color:#88846F;">    pending(进行中) - rejected(已失败)</span></span>
<span class="line"><span style="color:#88846F;">    除了异步操作的结果，任何其他操作都无法改变这个状态</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> p1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Promise</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">resolve</span><span style="color:#F8F8F2;">,</span><span style="color:#FD971F;font-style:italic;">reject</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;success1&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;success2&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">reject</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;reject&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#F8F8F2;">p1.</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 接收 resolve 的结果</span></span>
<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(res) },</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 接收 reject 的结果</span></span>
<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#FD971F;font-style:italic;">rej</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(rej) }</span></span>
<span class="line"><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> p2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Promise</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">resolve</span><span style="color:#F8F8F2;">,</span><span style="color:#FD971F;font-style:italic;">reject</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;success1&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;success2&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">reject</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;reject&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#F8F8F2;">p2.</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(res) )</span></span>
<span class="line"><span style="color:#F8F8F2;">  .</span><span style="color:#A6E22E;">catch</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">error</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(error) )</span></span>
<span class="line"><span style="color:#F8F8F2;">  .</span><span style="color:#A6E22E;">finally</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Experiment completed&#39;</span><span style="color:#F8F8F2;">) })</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">状态的缺点：</span></span>
<span class="line"><span style="color:#88846F;">    无法取消 Promise ，一旦新建它就会立即执行，无法中途取消。</span></span>
<span class="line"><span style="color:#88846F;">    如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。</span></span>
<span class="line"><span style="color:#88846F;">    当处于 pending 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Promise</span><span style="color:#F8F8F2;">.all</span></span>
<span class="line"><span style="color:#88846F;">// Promise集合中必须所有promise都是resolve成功状态，一旦有reject失败状态，则立马返回该reject</span></span>
<span class="line"><span style="color:#88846F;">// 返回list，都为成功状态</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> promise1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> promise2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">42</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> promise3 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Promise</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">resolve</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">reject</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">setTimeout</span><span style="color:#F8F8F2;">(resolve, </span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;foo&#39;</span><span style="color:#F8F8F2;">));</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">all</span><span style="color:#F8F8F2;">([promise1, promise2, promise3]).</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">values</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(values);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#88846F;">// expected output: Array [3, 42, &quot;foo&quot;]</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Promise</span><span style="color:#F8F8F2;">.race</span></span>
<span class="line"><span style="color:#88846F;">// 返回一个 promise，一旦迭代器中的某个 promise 解决或拒绝，返回的 promise 就会解决或拒绝</span></span>
<span class="line"><span style="color:#88846F;">// 返回value，最快响应的resolve or reject的值</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> promise1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Promise</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">resolve</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">reject</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">setTimeout</span><span style="color:#F8F8F2;">(resolve, </span><span style="color:#AE81FF;">500</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;one&#39;</span><span style="color:#F8F8F2;">));</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> promise2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Promise</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">resolve</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">reject</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">setTimeout</span><span style="color:#F8F8F2;">(resolve, </span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;two&#39;</span><span style="color:#F8F8F2;">));</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">race</span><span style="color:#F8F8F2;">([promise1, promise2]).</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(value);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#88846F;">// expected output: &quot;two&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br></div></div><ul><li><strong>Generator 函数</strong></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">其中 * 用来表示函数为 Generator 函数</span></span>
<span class="line"><span style="color:#88846F;">yield 用来定义函数内部的状态</span></span>
<span class="line"><span style="color:#88846F;">通过 yield 关键字，把函数的执行流挂起，为改变执行流程提供了可能，从而为异步编程提供解决方案</span></span>
<span class="line"><span style="color:#88846F;">通过next()调用函数执行至下一个yield</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">callee</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;callee: &#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">yield</span><span style="color:#F8F8F2;">));</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">func</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;one&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">yield</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;1&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;two&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">yield</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;2&#39;</span><span style="color:#F8F8F2;">; </span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;three&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">yield</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;3&#39;</span><span style="color:#F8F8F2;">; </span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;four&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> x);</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">/* </span></span>
<span class="line"><span style="color:#88846F;">        yield* 表达式表示 yield 返回一个Generator对象，</span></span>
<span class="line"><span style="color:#88846F;">        用于在 Generator 函数内部，调用另一个 Generator 函数</span></span>
<span class="line"><span style="color:#88846F;">    */</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">yield*</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">callee</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;4&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> f </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">func</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">f.</span><span style="color:#A6E22E;">next</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">f.</span><span style="color:#A6E22E;">next</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">f.</span><span style="color:#A6E22E;">next</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#88846F;">// 可以传参数并获取</span></span>
<span class="line"><span style="color:#F8F8F2;">f.</span><span style="color:#A6E22E;">next</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">33</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">f.</span><span style="color:#A6E22E;">next</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;value&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h2 id="es2016" tabindex="-1">ES2016 <a class="header-anchor" href="#es2016" aria-hidden="true">#</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#A6E22E;">includes</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> cubed </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">**</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#88846F;">// same as: 2 * 2 * 2</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="es2017" tabindex="-1">ES2017 <a class="header-anchor" href="#es2017" aria-hidden="true">#</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">// 操作对象</span></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> Object.values </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> Object.entries</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> { name: </span><span style="color:#E6DB74;">&#39;join&#39;</span><span style="color:#F8F8F2;">, pwd: </span><span style="color:#E6DB74;">&#39;123&#39;</span><span style="color:#F8F8F2;"> }</span></span>
<span class="line"><span style="color:#88846F;">/* 获取对象的value组成的数组 */</span></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">values</span><span style="color:#F8F8F2;">(arr) </span><span style="color:#88846F;">// [&#39;join&#39;, &#39;123&#39;]</span></span>
<span class="line"><span style="color:#88846F;">/* 获取对象的key与value组成的数组 */</span></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">entries</span><span style="color:#F8F8F2;">(arr) </span><span style="color:#88846F;">// [[&#39;name&#39;, &#39;join&#39;], [&#39;pwd&#39;, &#39;123&#39;]]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 获取对象的所有自身属性的描述符</span></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> Object.getOwnPropertyDescriptors</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    a: </span><span style="color:#AE81FF;">123</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#A6E22E;">Symbol</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;foo&#39;</span><span style="color:#F8F8F2;">)]: </span><span style="color:#AE81FF;">123</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">get</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">bar</span><span style="color:#F8F8F2;">() { </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;abc&#39;</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">    返回对象属性的描述</span></span>
<span class="line"><span style="color:#88846F;">    configurable: true</span></span>
<span class="line"><span style="color:#88846F;">    enumerable: true</span></span>
<span class="line"><span style="color:#88846F;">    value: 123</span></span>
<span class="line"><span style="color:#88846F;">    writable: true</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">getOwnPropertyDescriptors</span><span style="color:#F8F8F2;">(obj)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 操作String，字符串头部和尾部填充字符串</span></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">.prototype.padStart </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">.prototype.padEnd</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> str </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;hello&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">str.</span><span style="color:#A6E22E;">padStart</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;o&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// ooooohello</span></span>
<span class="line"><span style="color:#F8F8F2;">str.</span><span style="color:#A6E22E;">padEnd</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;o&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// helloooooo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 操作函数，逗号可以添加到函数的参数列表后面</span></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> param1, param2,</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">foo</span><span style="color:#F8F8F2;">( </span><span style="color:#FD971F;font-style:italic;">param1</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">param2</span><span style="color:#F8F8F2;">, ) { console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(param1, param2) }</span></span>
<span class="line"><span style="color:#A6E22E;">foo</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;abc&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;def&#39;</span><span style="color:#F8F8F2;">, )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 共享内存(SharedArrayBuffer)和原子(Atomics)</span></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> SharedArrayBuffer </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> Atomics</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> worker </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Worker</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;worker.js&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#88846F;">// To be shared</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> sab </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">SharedArrayBuffer</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1024</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">worker.</span><span style="color:#A6E22E;">postMessage</span><span style="color:#F8F8F2;">(sab);</span></span>
<span class="line"><span style="color:#88846F;">// get shared</span></span>
<span class="line"><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Int32Array</span><span style="color:#F8F8F2;">(sab);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// Atomics对 SharedArrayBuffer 和 ArrayBuffer 对象进行原子操作</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> buffer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">ArrayBuffer</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">16</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> int32 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Int32Array</span><span style="color:#F8F8F2;">(buffer);</span></span>
<span class="line"><span style="color:#F8F8F2;">int32[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#88846F;">// 将指定位置上的数组元素与给定的值相加，并返回相加前该元素的值</span></span>
<span class="line"><span style="color:#F8F8F2;">Atomics.</span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;">(int32, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;">// int32[0] = 7</span></span>
<span class="line"><span style="color:#88846F;">// 返回数组中指定元素的值</span></span>
<span class="line"><span style="color:#F8F8F2;">Atomics.</span><span style="color:#A6E22E;">load</span><span style="color:#F8F8F2;">(int32, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">// 将给定的值存储在数组中的指定位置</span></span>
<span class="line"><span style="color:#F8F8F2;">Atomics.</span><span style="color:#A6E22E;">store</span><span style="color:#F8F8F2;">(int32, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br></div></div><ul><li><strong>async/await</strong></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">    async 函数返回的是一个 Promise 对象，可以使用 then 方法添加回调函数</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"><span style="color:#F92672;">async</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">helloAsync</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;helloAsync&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">helloAsync</span><span style="color:#F8F8F2;">())  </span><span style="color:#88846F;">// Promise {&lt;resolved&gt;: &quot;helloAsync&quot;}</span></span>
<span class="line"><span style="color:#A6E22E;">helloAsync</span><span style="color:#F8F8F2;">().</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">v</span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">   console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(v);         </span><span style="color:#88846F;">// helloAsync</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">testAwait</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">   </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Promise</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">resolve</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">reject</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">       </span><span style="color:#A6E22E;">setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;testAwait&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#A6E22E;">reject</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;reject&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">       }, </span><span style="color:#AE81FF;">1000</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">   });</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F92672;">async</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">helloAsync</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">    必须等待await的函数返回Promise，处理完成后才会继续执行async function</span></span>
<span class="line"><span style="color:#88846F;">    await会解析Promise对象返回处理后的对象</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> res </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">testAwait</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">        console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;testAwait &#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> res);</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#F92672;">catch</span><span style="color:#F8F8F2;">(e) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(e)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#A6E22E;">helloAsync</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#88846F;">// testAwait testAwait</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h2 id="es2018" tabindex="-1">ES2018 <a class="header-anchor" href="#es2018" aria-hidden="true">#</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">// 标记模板文字和转义序列</span></span>
<span class="line"><span style="color:#88846F;">// Uncaught SyntaxError: Invalid Unicode escape sequence</span></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> Template</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> temp </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">\`</span><span style="color:#AE81FF;">\\u</span><span style="color:#E6DB74;">nicode\`</span></span>
<span class="line"><span style="color:#F8F8F2;">temp</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 标记的模板文字应该允许嵌入语言，非法转义序列可以通过latex函数进行定义</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">latex</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">str</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> str.raw[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#A6E22E;">latex</span><span style="color:#E6DB74;">\`</span><span style="color:#AE81FF;">\\u</span><span style="color:#E6DB74;">nicode\`</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> RegExp.dotAll </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> RegExp.flags</span></span>
<span class="line"><span style="color:#88846F;">// 引入/s 修饰符，使得。可以匹配任意单个字符</span></span>
<span class="line"><span style="color:#E6DB74;">/foo</span><span style="color:#AE81FF;">.</span><span style="color:#E6DB74;">bar/</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">test</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;foo</span><span style="color:#AE81FF;">\\n</span><span style="color:#E6DB74;">bar&#39;</span><span style="color:#F8F8F2;">); </span><span style="color:#88846F;">// false</span></span>
<span class="line"><span style="color:#E6DB74;">/foo</span><span style="color:#AE81FF;">.</span><span style="color:#E6DB74;">bar/</span><span style="color:#F92672;">s</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">test</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;foo</span><span style="color:#AE81FF;">\\n</span><span style="color:#E6DB74;">bar&#39;</span><span style="color:#F8F8F2;">); </span><span style="color:#88846F;">// true</span></span>
<span class="line"><span style="color:#88846F;">// 返回一个字符串，由当前正则表达式对象的标志组成</span></span>
<span class="line"><span style="color:#E6DB74;">/foo</span><span style="color:#AE81FF;">.</span><span style="color:#E6DB74;">bar/</span><span style="color:#F92672;">s</span><span style="color:#F8F8F2;">.flags; </span><span style="color:#88846F;">// s</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> RegExp</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">Named</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">Groups</span></span>
<span class="line"><span style="color:#88846F;">// 正则表达式命名捕获组，(?&lt;year&gt;\\d{4})已?&lt;year&gt;进行匹配</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> re </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> /(?&lt;</span><span style="color:#F8F8F2;">year</span><span style="color:#E6DB74;">&gt;</span><span style="color:#AE81FF;">\\d</span><span style="color:#F92672;">{4}</span><span style="color:#E6DB74;">)-(?&lt;</span><span style="color:#F8F8F2;">month</span><span style="color:#E6DB74;">&gt;</span><span style="color:#AE81FF;">\\d</span><span style="color:#F92672;">{2}</span><span style="color:#E6DB74;">)-(?&lt;</span><span style="color:#F8F8F2;">day</span><span style="color:#E6DB74;">&gt;</span><span style="color:#AE81FF;">\\d</span><span style="color:#F92672;">{2}</span><span style="color:#E6DB74;">)/</span><span style="color:#F92672;">u</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> re.</span><span style="color:#A6E22E;">exec</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;2015-01-02&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#88846F;">// result.groups.year === &#39;2015&#39;;</span></span>
<span class="line"><span style="color:#88846F;">// result.groups.month === &#39;01&#39;;</span></span>
<span class="line"><span style="color:#88846F;">// result.groups.day === &#39;02&#39;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> re </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> /(?&lt;</span><span style="color:#F8F8F2;">year</span><span style="color:#E6DB74;">&gt;</span><span style="color:#AE81FF;">\\d</span><span style="color:#F92672;">{4}</span><span style="color:#E6DB74;">)-(?&lt;</span><span style="color:#F8F8F2;">month</span><span style="color:#E6DB74;">&gt;</span><span style="color:#AE81FF;">\\d</span><span style="color:#F92672;">{2}</span><span style="color:#E6DB74;">)-(?&lt;</span><span style="color:#F8F8F2;">day</span><span style="color:#E6DB74;">&gt;</span><span style="color:#AE81FF;">\\d</span><span style="color:#F92672;">{2}</span><span style="color:#E6DB74;">)/</span><span style="color:#F92672;">u</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;2015-01-02&#39;</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">replace</span><span style="color:#F8F8F2;">(re, </span><span style="color:#E6DB74;">&#39;$&lt;day&gt;/$&lt;month&gt;/$&lt;year&gt;&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#88846F;">// result === &#39;02/01/2015&#39;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> Object Rest </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> Spread</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> { x, y, </span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">z } </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> { x: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, y: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, a: </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, b: </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#F8F8F2;">x; </span><span style="color:#88846F;">// 1</span></span>
<span class="line"><span style="color:#F8F8F2;">y; </span><span style="color:#88846F;">// 2</span></span>
<span class="line"><span style="color:#F8F8F2;">z; </span><span style="color:#88846F;">// { a: 3, b: 4 }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> n </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> { x, y, </span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">z };</span></span>
<span class="line"><span style="color:#F8F8F2;">n; </span><span style="color:#88846F;">// { x: 1, y: 2, a: 3, b: 4 }</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Promise</span><span style="color:#F8F8F2;">.finally</span></span>
<span class="line"><span style="color:#88846F;">// 最后无论如何都会执行</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;resolve&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    .</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(res))</span></span>
<span class="line"><span style="color:#F8F8F2;">    .</span><span style="color:#A6E22E;">finally</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;finally&#39;</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> for</span><span style="color:#F92672;">...of</span></span>
<span class="line"><span style="color:#88846F;">// 在async异步方法里，for await循环等待Promise完成承诺后才会在循环体中做出操作</span></span>
<span class="line"><span style="color:#F92672;">async</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">process</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">list</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> list) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(i);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> p1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Promise</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">resolve</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { </span><span style="color:#A6E22E;">setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;p1&#39;</span><span style="color:#F8F8F2;">)}, </span><span style="color:#AE81FF;">1000</span><span style="color:#F8F8F2;">) })</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> p2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Promise</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">resolve</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { </span><span style="color:#A6E22E;">setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;p2&#39;</span><span style="color:#F8F8F2;">)}, </span><span style="color:#AE81FF;">2000</span><span style="color:#F8F8F2;">) })</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> p3 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Promise</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">resolve</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { </span><span style="color:#A6E22E;">setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;p3&#39;</span><span style="color:#F8F8F2;">)}, </span><span style="color:#AE81FF;">3000</span><span style="color:#F8F8F2;">) })</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> list </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [p1, p2, p3]</span></span>
<span class="line"><span style="color:#A6E22E;">process</span><span style="color:#F8F8F2;">(list)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br></div></div><h2 id="es2019" tabindex="-1">ES2019 <a class="header-anchor" href="#es2019" aria-hidden="true">#</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">try</span><span style="color:#F8F8F2;"> {} </span><span style="color:#F92672;">catch</span><span style="color:#F8F8F2;"> {}</span></span>
<span class="line"><span style="color:#88846F;">// 更简易的try catch</span></span>
<span class="line"><span style="color:#F92672;">try</span><span style="color:#F8F8F2;"> {} </span><span style="color:#F92672;">catch</span><span style="color:#F8F8F2;">(e) {}</span></span>
<span class="line"><span style="color:#F92672;">try</span><span style="color:#F8F8F2;"> {} </span><span style="color:#F92672;">catch</span><span style="color:#F8F8F2;"> {}</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Symbol</span><span style="color:#F8F8F2;">.prototype.description</span></span>
<span class="line"><span style="color:#88846F;">// 将定义字符串 作为 描述符</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> sym </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Symbol</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;The description&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">sym.description </span><span style="color:#88846F;">// The description</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Function</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#A6E22E;">toString</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#88846F;">// 函数toString现在返回精确字符，包括空格和注释</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">func</span><span style="color:#F8F8F2;">() { </span><span style="color:#88846F;">/* 111*/</span><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">func.</span><span style="color:#A6E22E;">toString</span><span style="color:#F8F8F2;">() </span><span style="color:#88846F;">// before - function func() {}</span></span>
<span class="line"><span style="color:#F8F8F2;">func.</span><span style="color:#A6E22E;">toString</span><span style="color:#F8F8F2;">() </span><span style="color:#88846F;">// now - function func() { /* 111*/  }</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> Object.fromEntries</span></span>
<span class="line"><span style="color:#88846F;">// 与Object.entries()的反转</span></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">fromEntries</span><span style="color:#F8F8F2;">([[</span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">], [</span><span style="color:#E6DB74;">&#39;b&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]]); </span><span style="color:#88846F;">// { a: 0, b: 1 }</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">.prototype.trimStart </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">.prototype.trimEnd</span></span>
<span class="line"><span style="color:#88846F;">// 去除字符串首尾空白字符</span></span>
<span class="line"><span style="color:#E6DB74;">&#39;  1  &#39;</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">trimStart</span><span style="color:#F8F8F2;">(); </span><span style="color:#88846F;">// &#39;1  &#39;</span></span>
<span class="line"><span style="color:#E6DB74;">&#39;  1  &#39;</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">trimEnd</span><span style="color:#F8F8F2;">();   </span><span style="color:#88846F;">// &#39;  1&#39;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Array</span><span style="color:#F8F8F2;">.prototype.flat </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Array</span><span style="color:#F8F8F2;">.prototype.flatMap</span></span>
<span class="line"><span style="color:#88846F;">// 数组扁平化</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, [</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">]];</span></span>
<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#A6E22E;">flat</span><span style="color:#F8F8F2;">();               </span><span style="color:#88846F;">// [1, 2, 3, 4]</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> arr1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">arr1.</span><span style="color:#A6E22E;">flatMap</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">x</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> [x </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">]); </span><span style="color:#88846F;">// [2, 4, 6, 8]</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h2 id="es2020" tabindex="-1">ES2020 <a class="header-anchor" href="#es2020" aria-hidden="true">#</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">.prototype.matchAll</span></span>
<span class="line"><span style="color:#88846F;">// 返回一个包含所有匹配正则表达式的结果及分组捕获组的迭代器</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> str </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;test1test2&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">str.</span><span style="color:#A6E22E;">matchAll</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">/test/</span><span style="color:#F92672;">g</span><span style="color:#F8F8F2;">)]</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">import</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#88846F;">// 动态import</span></span>
<span class="line"><span style="color:#88846F;">// index.js</span></span>
<span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">func</span><span style="color:#F8F8F2;">() { </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;index&#39;</span><span style="color:#F8F8F2;"> }</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;./index.js&quot;</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    res.</span><span style="color:#A6E22E;">func</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> BigInt</span></span>
<span class="line"><span style="color:#88846F;">// 表示任意大的整数</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Number.MAX_SAFE_INTEGER; </span><span style="color:#88846F;">// ↪ 9007199254740991, this is 1 less than 2^53</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> y </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">; </span><span style="color:#88846F;">// ↪ 9007199254740992, ok, checks out</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> z </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">; </span><span style="color:#88846F;">// ↪ 9007199254740992, wait, that’s the same as above!</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> previousMaxSafe </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">BigInt</span><span style="color:#F8F8F2;">(Number.MAX_SAFE_INTEGER); </span><span style="color:#88846F;">// ↪ 9007199254740991</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> maxPlusOne </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> previousMaxSafe </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#66D9EF;font-style:italic;">n</span><span style="color:#F8F8F2;">; </span><span style="color:#88846F;">// ↪ 9007199254740992n</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> theFuture </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> previousMaxSafe </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">2</span><span style="color:#66D9EF;font-style:italic;">n</span><span style="color:#F8F8F2;">; </span><span style="color:#88846F;">// ↪ 9007199254740993n, this works now!</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Promise</span><span style="color:#F8F8F2;">.allSettled</span></span>
<span class="line"><span style="color:#88846F;">// 返回一个在所有给定的 promise 都已经fulfilled或rejected后的 promise，并带有一个对象数组，每个对象表示对应的 promise 结果</span></span>
<span class="line"><span style="color:#88846F;">// 返回list，所有承诺状态都存在</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> promise1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> promise2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Promise</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">resolve</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">reject</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">setTimeout</span><span style="color:#F8F8F2;">(reject, </span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;foo&#39;</span><span style="color:#F8F8F2;">));</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> promises </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [promise1, promise2];</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">allSettled</span><span style="color:#F8F8F2;">(promises).</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">results</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(results));</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 【{status: &#39;fulfilled&#39;, value: 3},{status: &#39;rejected&#39;, reason: &#39;foo&#39;}]</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> globalThis</span></span>
<span class="line"><span style="color:#88846F;">// 包含全局的 this 值，类似于全局对象（global object）</span></span>
<span class="line"><span style="color:#F8F8F2;">globalThis </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> window</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> ?. 可选链运算符</span></span>
<span class="line"><span style="color:#88846F;">// 当尝试访问可能不存在的对象属性时，会报错TypeError</span></span>
<span class="line"><span style="color:#88846F;">// 使用 ?. 访问不确定存在的属性时，若不存在则返回undefined，不会报错</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> adventurer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  name: </span><span style="color:#E6DB74;">&#39;Alice&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  cat: { name: </span><span style="color:#E6DB74;">&#39;Dinah&#39;</span><span style="color:#F8F8F2;"> }</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> dogName </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> adventurer.dog?.name;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(dogName);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(adventurer.</span><span style="color:#A6E22E;">someNonExistentMethod</span><span style="color:#F8F8F2;">?.());</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">??</span><span style="color:#F8F8F2;"> 空值合并运算符</span></span>
<span class="line"><span style="color:#88846F;">// 当左侧的操作数为 null 或者 undefined 时，返回其右侧操作数，否则返回左侧操作数</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> foo </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">??</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;default string&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(foo); </span><span style="color:#88846F;">// expected output: &quot;default string&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> baz </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">??</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">42</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(baz); </span><span style="color:#88846F;">// expected output: 0</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">import</span><span style="color:#F8F8F2;">.meta</span></span>
<span class="line"><span style="color:#88846F;">// 暴露特定上下文的元数据属性的对象</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">script</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">type</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;module&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    import </span><span style="color:#F92672;">{</span><span style="color:#F8F8F2;"> func1 </span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;"> from &quot;./index.js&quot;;</span></span>
<span class="line"><span style="color:#F8F8F2;">    func1();</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.log(i<wbr>mport.meta);</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#F92672;">script</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br></div></div><h2 id="es2021" tabindex="-1">ES2021 <a class="header-anchor" href="#es2021" aria-hidden="true">#</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">.prototype.replaceAll</span></span>
<span class="line"><span style="color:#88846F;">// 字符串匹配替换</span></span>
<span class="line"><span style="color:#E6DB74;">&#39;defd&#39;</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">replaceAll</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">/d/</span><span style="color:#F92672;">g</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;f&#39;</span><span style="color:#F8F8F2;">); </span><span style="color:#88846F;">// &#39;feff&#39;</span></span>
<span class="line"><span style="color:#E6DB74;">&#39;defd&#39;</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">replaceAll</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">/d/</span><span style="color:#F92672;">g</span><span style="color:#F8F8F2;">, (</span><span style="color:#FD971F;font-style:italic;">e</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;f&#39;</span><span style="color:#F8F8F2;">); </span><span style="color:#88846F;">// &#39;feff&#39;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Promise</span><span style="color:#F8F8F2;">.any</span></span>
<span class="line"><span style="color:#88846F;">// 该方法用于获取首个resolve的 promise 的值，如果都是reject则会报错 All promises were rejected</span></span>
<span class="line"><span style="color:#88846F;">// 返回list，所有承诺状态都存在</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> promise1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> promise2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Promise</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">resolve</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">reject</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">setTimeout</span><span style="color:#F8F8F2;">(reject, </span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;foo&#39;</span><span style="color:#F8F8F2;">));</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> promises </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [promise1, promise2];</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">any</span><span style="color:#F8F8F2;">(promises).</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">results</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(results));</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">||=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">y</span><span style="color:#F8F8F2;">(逻辑或赋值)</span></span>
<span class="line"><span style="color:#88846F;">// 当左侧值为false时，将右侧的值赋值给左侧</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> { duration: </span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;">, title: </span><span style="color:#E6DB74;">&#39;&#39;</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#F8F8F2;">a.duration </span><span style="color:#F92672;">||=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(a.duration); </span><span style="color:#88846F;">// 10</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">&amp;&amp;=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">y</span><span style="color:#F8F8F2;">(逻辑与赋值)</span></span>
<span class="line"><span style="color:#88846F;">// 当左侧值为true时，将右侧的值赋值给左侧</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> { duration: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">, title: </span><span style="color:#E6DB74;">&#39;&#39;</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#F8F8F2;">a.duration </span><span style="color:#F92672;">&amp;&amp;=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(a.duration); </span><span style="color:#88846F;">// 10</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">??=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">y</span><span style="color:#F8F8F2;">(逻辑空赋值)</span></span>
<span class="line"><span style="color:#88846F;">// 当左侧值为null or undefined时，将右侧的值赋值给左侧</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> { duration: </span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">, title: </span><span style="color:#E6DB74;">&#39;&#39;</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#F8F8F2;">a.duration </span><span style="color:#F92672;">??=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(a.duration); </span><span style="color:#88846F;">// 10</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">_</span><span style="color:#F8F8F2;">(数字分隔符)</span></span>
<span class="line"><span style="color:#88846F;">// 方便数字代码阅读</span></span>
<span class="line"><span style="color:#AE81FF;">1_000_000_000</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1000000000</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h2 id="es2022" tabindex="-1">ES2022 <a class="header-anchor" href="#es2022" aria-hidden="true">#</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> Private instance methods and accessors</span></span>
<span class="line"><span style="color:#88846F;">/* 类中的私有方法只能在类中调用 */</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">ClassWithPrivateAccessor</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  #message;</span></span>
<span class="line"><span style="color:#F8F8F2;">  str </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;str&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">get</span><span style="color:#F8F8F2;"> #</span><span style="color:#A6E22E;">decoratedMessage</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">\`</span><span style="color:#F92672;">\${</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.#message</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;">\`</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">set</span><span style="color:#F8F8F2;"> #</span><span style="color:#A6E22E;">decoratedMessage</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">msg</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.#message </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> msg;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  #</span><span style="color:#A6E22E;">getMessage</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.#message</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.#decoratedMessage </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;hello world&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.#decoratedMessage); </span><span style="color:#88846F;">// hello world</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> privateAccessor </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">ClassWithPrivateAccessor</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">privateAccessor.str; </span><span style="color:#88846F;">// str</span></span>
<span class="line"><span style="color:#F8F8F2;">privateAccessor.#message; </span><span style="color:#88846F;">// Error</span></span>
<span class="line"><span style="color:#F8F8F2;">privateAccessor.</span><span style="color:#A6E22E;">#getMessage</span><span style="color:#F8F8F2;">() </span><span style="color:#88846F;">// Error</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> Class Public Instance Fields </span><span style="color:#F92672;">&amp;</span><span style="color:#F8F8F2;"> Private Instance Fields</span></span>
<span class="line"><span style="color:#88846F;">/* 类中的私有字段只能在类中调用 */</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">ClassWithPrivateFields</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  #message </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;hello world&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  str </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;str&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">getMessage</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.#message</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.#message); </span><span style="color:#88846F;">// hello world</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> privateFields </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">ClassWithPrivateFields</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">privateFields.str; </span><span style="color:#88846F;">// str</span></span>
<span class="line"><span style="color:#F8F8F2;">privateFields.#message; </span><span style="color:#88846F;">// Error</span></span>
<span class="line"><span style="color:#F8F8F2;">privateFields.</span><span style="color:#A6E22E;">getMessage</span><span style="color:#F8F8F2;">(); </span><span style="color:#88846F;">// hello world</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> Static </span><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">fields</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">and</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">private</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">static</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">methods</span></span>
<span class="line"><span style="color:#88846F;">/* 类中静态字段和静态方法可以直接通过类访问 */</span></span>
<span class="line"><span style="color:#A6E22E;text-decoration:underline;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">ClassWithStaticMethod</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">static</span><span style="color:#F8F8F2;"> staticProperty </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;someValue&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">static</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">staticMethod</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;static method has been called.&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">ClassWithStaticMethod.staticProperty; </span><span style="color:#88846F;">// someValue</span></span>
<span class="line"><span style="color:#F8F8F2;">ClassWithStaticMethod.</span><span style="color:#A6E22E;">staticMethod</span><span style="color:#F8F8F2;">(); </span><span style="color:#88846F;">// static method has been called.</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> RegExp Match Indices</span></span>
<span class="line"><span style="color:#88846F;">// RegExp 增加/d标志，生成记录每个组捕获的开始和结束的下标</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> re1 </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> /a</span><span style="color:#F92672;">+</span><span style="color:#E6DB74;">(?&lt;</span><span style="color:#F8F8F2;">Z</span><span style="color:#E6DB74;">&gt;z)</span><span style="color:#F92672;">?</span><span style="color:#E6DB74;">/</span><span style="color:#F92672;">d</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> s1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;xaaaz&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">re1.</span><span style="color:#A6E22E;">exec</span><span style="color:#F8F8F2;">(s1);</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">indices: [[1, 5],[4, 5]]</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> Top</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">level </span><span style="color:#F92672;">await</span></span>
<span class="line"><span style="color:#88846F;">// 顶级 await 模块。在使用import引入模块时可以直接使用await</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> aaa </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">import</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;./index.js&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">aaa.</span><span style="color:#A6E22E;">func</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> Ergonomic brand checks for Private Fields</span></span>
<span class="line"><span style="color:#88846F;">// 检测类中私有字段是否存在</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">C</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  #brand;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  #</span><span style="color:#A6E22E;">method</span><span style="color:#F8F8F2;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">get</span><span style="color:#F8F8F2;"> #</span><span style="color:#A6E22E;">getter</span><span style="color:#F8F8F2;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">static</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">isC</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">obj</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> #brand </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">&amp;&amp;</span><span style="color:#F8F8F2;"> #method </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">&amp;&amp;</span><span style="color:#F8F8F2;"> #getter </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> obj;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">C.</span><span style="color:#A6E22E;">isC</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">C</span><span style="color:#F8F8F2;">())</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Array</span><span style="color:#F8F8F2;">.prototype.at</span></span>
<span class="line"><span style="color:#88846F;">// 接收一个整数值并返回该索引对应的元素，允许正数和负数</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> arr </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(arr[arr.length </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]);  </span><span style="color:#88846F;">// 3</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(arr.</span><span style="color:#A6E22E;">at</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">));           </span><span style="color:#88846F;">// 3</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> Object.hasOwn</span></span>
<span class="line"><span style="color:#88846F;">// 如果指定的对象自身有指定的属性，则静态方法 Object.hasOwn() 返回 true</span></span>
<span class="line"><span style="color:#88846F;">// Object.hasOwn() 旨在取代 Object.hasOwnProperty()</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> object </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> { a: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, b: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;"> }</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> hasOwnProperty </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Object</span><span style="color:#F8F8F2;">.prototype.hasOwnProperty</span></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (hasOwnProperty.</span><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">(object, </span><span style="color:#E6DB74;">&#39;b&#39;</span><span style="color:#F8F8F2;">)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;has property b&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (Object.</span><span style="color:#A6E22E;">hasOwn</span><span style="color:#F8F8F2;">(object, </span><span style="color:#E6DB74;">&quot;b&quot;</span><span style="color:#F8F8F2;">)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;has property b&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> Class Static Block</span></span>
<span class="line"><span style="color:#88846F;">// 类静态代码块</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Translator</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">static</span><span style="color:#F8F8F2;"> translations </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        yes: </span><span style="color:#E6DB74;">&#39;yes value&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        no: </span><span style="color:#E6DB74;">&#39;no value&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        maybe: </span><span style="color:#E6DB74;">&#39;maybe value&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    };</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">static</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">getStaticObject</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// 可以获取类对象静态成员</span></span>
<span class="line"><span style="color:#F8F8F2;">        console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.translations)</span></span>
<span class="line"><span style="color:#F8F8F2;">    };</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">static</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// 可以获取类对象</span></span>
<span class="line"><span style="color:#F8F8F2;">        console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    };</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// 获取类实例化对象，这里找不到静态成员</span></span>
<span class="line"><span style="color:#F8F8F2;">        console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Translator</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">Translator.</span><span style="color:#A6E22E;">getStaticObject</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> Error Cause</span></span>
<span class="line"><span style="color:#88846F;">// Error Constructor 新增了一个可选的参数 options: cause，接受任意 JavaScript 值</span></span>
<span class="line"><span style="color:#F92672;">try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">throw</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Error</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Download raw resource failed&#39;</span><span style="color:#F8F8F2;">, { cause: </span><span style="color:#E6DB74;">&#39;this is cause&#39;</span><span style="color:#F8F8F2;"> });</span></span>
<span class="line"><span style="color:#F8F8F2;">} </span><span style="color:#F92672;">catch</span><span style="color:#F8F8F2;"> (e) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(e);</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Caused by&#39;</span><span style="color:#F8F8F2;">, e.cause);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br></div></div><h2 id="es2023" tabindex="-1">ES2023 <a class="header-anchor" href="#es2023" aria-hidden="true">#</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> Array find from last</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> array </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [{ value: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;"> }, { value: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;"> }, { value: </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;"> }, { value: </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;"> }];</span></span>
<span class="line"><span style="color:#88846F;">// 返回满足条件的第一个元素或元素下标</span></span>
<span class="line"><span style="color:#F8F8F2;">array.</span><span style="color:#A6E22E;">find</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">n</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> n.value </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;"> ); </span><span style="color:#88846F;">// { value: 3 } || undefined</span></span>
<span class="line"><span style="color:#F8F8F2;">array.</span><span style="color:#A6E22E;">findIndex</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">n</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> n.value </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;"> ); </span><span style="color:#88846F;">// 2 || -1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 返回满足条件的最后一个元素或元素下标</span></span>
<span class="line"><span style="color:#F8F8F2;">array.</span><span style="color:#A6E22E;">findLast</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">n</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> n.value </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;"> ); </span><span style="color:#88846F;">// { value: 4 } || undefined</span></span>
<span class="line"><span style="color:#F8F8F2;">array.</span><span style="color:#A6E22E;">findLastIndex</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">n</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> n.value </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;"> ); </span><span style="color:#88846F;">// 3 || -1</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> Hashbang Grammar</span></span>
<span class="line"><span style="color:#88846F;">// 引入了#!命令，写在脚本文件的第一行</span></span>
<span class="line"><span style="color:#F8F8F2;">#</span><span style="color:#F92672;">!/</span><span style="color:#F8F8F2;">usr</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">bin</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">env node</span></span>
<span class="line"><span style="color:#E6DB74;">&#39;use strict&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">    # 以前执行脚本 node hello.js</span></span>
<span class="line"><span style="color:#88846F;">    # 有了 hashbang 之后执行脚本 ./hello.js</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>参考链接：<a href="https://github.com/tc39/proposals/blob/HEAD/finished-proposals.md" target="_blank" rel="noreferrer">https://github.com/tc39/proposals/blob/HEAD/finished-proposals.md</a></p>`,47),e=[o];function F(r,c,t,y,i,b){return a(),n("div",null,e)}const m=s(p,[["render",F]]);export{E as __pageData,m as default};
