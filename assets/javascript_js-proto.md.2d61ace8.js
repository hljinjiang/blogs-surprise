import{_ as s,c as n,o as a,a as l}from"./app.1a67c3a4.js";const p="/assets/proto.ed3075ad.png",d=JSON.parse('{"title":"JavaScript Proto","description":"","frontmatter":{},"headers":[{"level":2,"title":"原型","slug":"原型","link":"#原型","children":[]},{"level":2,"title":"原型链查找","slug":"原型链查找","link":"#原型链查找","children":[]},{"level":2,"title":"prototype属性","slug":"prototype属性","link":"#prototype属性","children":[]},{"level":2,"title":"创建对象的原型","slug":"创建对象的原型","link":"#创建对象的原型","children":[]},{"level":2,"title":"constructor 属性","slug":"constructor-属性","link":"#constructor-属性","children":[]},{"level":2,"title":"this 指向","slug":"this-指向","link":"#this-指向","children":[]}],"relativePath":"javascript/js-proto.md","lastUpdated":1677548376000}'),o={name:"javascript/js-proto.md"},e=l('<h1 id="javascript-proto" tabindex="-1">JavaScript Proto <a class="header-anchor" href="#javascript-proto" aria-hidden="true">#</a></h1><div><p><code>JavaScript 原型的意义在于实现继承功能，为了搞懂内部实现可参考下图的相互引用</code></p></div><p><img src="'+p+`" alt="proto.png"></p><h2 id="原型" tabindex="-1">原型 <a class="header-anchor" href="#原型" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">简介</p><p>JavaScript 被描述为一种<strong>基于原型的语言</strong>，每个对象拥有一个<strong>原型对象</strong>，对象从原型继承方法和属性。</p><p>原型对象也可能拥有原型，并从中继承方法和属性，一层一层、以此类推，这种关系常被称为<strong>原型链</strong>。</p><p>在 JavaScript 的<strong>对象实例</strong>和<strong>它的构造器</strong>之间建立一个链接，它就是__proto__属性，是从<strong>构造函数</strong>的<strong>prototype</strong>属性派生的。</p><p>获取原型，可以通过 <strong>Object.getPrototypeOf(obj)</strong> 或者已被弃用的__proto__属性获得。</p></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">doSomething</span><span style="color:#F8F8F2;">(){}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">doSomething</span><span style="color:#F8F8F2;">.prototype.foo </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;bar&quot;</span><span style="color:#F8F8F2;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> doSomeInstancing </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">doSomething</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">doSomeInstancing.prop </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;some value&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">doSomeInstancing.</span><span style="color:#A6E22E;">valueOf</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// result</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">    prop: </span><span style="color:#E6DB74;">&quot;some value&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    __proto__: {</span></span>
<span class="line"><span style="color:#F8F8F2;">        foo: </span><span style="color:#E6DB74;">&quot;bar&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        constructor: ƒ </span><span style="color:#A6E22E;">doSomething</span><span style="color:#F8F8F2;">(),</span></span>
<span class="line"><span style="color:#F8F8F2;">        __proto__: {</span></span>
<span class="line"><span style="color:#F8F8F2;">            constructor: ƒ </span><span style="color:#A6E22E;">Object</span><span style="color:#F8F8F2;">(),</span></span>
<span class="line"><span style="color:#F8F8F2;">            hasOwnProperty: ƒ </span><span style="color:#A6E22E;">hasOwnProperty</span><span style="color:#F8F8F2;">(),</span></span>
<span class="line"><span style="color:#F8F8F2;">            isPrototypeOf: ƒ </span><span style="color:#A6E22E;">isPrototypeOf</span><span style="color:#F8F8F2;">(),</span></span>
<span class="line"><span style="color:#F8F8F2;">            propertyIsEnumerable: ƒ </span><span style="color:#A6E22E;">propertyIsEnumerable</span><span style="color:#F8F8F2;">(),</span></span>
<span class="line"><span style="color:#F8F8F2;">            toLocaleString: ƒ </span><span style="color:#A6E22E;">toLocaleString</span><span style="color:#F8F8F2;">(),</span></span>
<span class="line"><span style="color:#F8F8F2;">            toString: ƒ </span><span style="color:#A6E22E;">toString</span><span style="color:#F8F8F2;">(),</span></span>
<span class="line"><span style="color:#F8F8F2;">            valueOf: ƒ </span><span style="color:#A6E22E;">valueOf</span><span style="color:#F8F8F2;">(),</span></span>
<span class="line"><span style="color:#F8F8F2;">            __proto__: </span><span style="color:#AE81FF;">null</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="原型链查找" tabindex="-1">原型链查找 <a class="header-anchor" href="#原型链查找" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">简介</p><p>首先，会检查 <strong>doSomeInstancing</strong> 对象是否具有可用的 <strong>valueOf()</strong> 方法，<br> 如果没有，则浏览器检查 <strong>doSomeInstancing</strong> 对象的原型对象（即 <strong>doSomething</strong> 构造函数的 prototype 属性所指向的对象）是否具有可用的 <strong>valueof()</strong> 方法。<br> 如果也没有，则浏览器检查 <strong>doSomething()</strong> 构造函数的 prototype 属性所指向的对象的原型对象（即 <strong>Object</strong> 构造函数的 prototype 属性所指向的对象）是否具有可用的 <strong>valueOf()</strong> 方法。这里有这个方法，于是该方法被调用。</p></div><h2 id="prototype属性" tabindex="-1">prototype属性 <a class="header-anchor" href="#prototype属性" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">简介</p><p><strong>prototype</strong> 对象定义继承成员的地方，通过修改原型属性<br> 比如 <strong>Object.values()</strong>、<strong>Object.keys()</strong>，以及其他不在 <strong>prototype</strong> 对象内的成员，不会被“<strong>对象实例</strong>”或“<strong>继承自 Object() 的对象类型</strong>”所继承。这些方法/属性仅能被<strong>Object() 构造器</strong>自身使用。<br><strong>prototype</strong> 定义继承成员，__proto__访问继承对象</p></div><h2 id="创建对象的原型" tabindex="-1">创建对象的原型 <a class="header-anchor" href="#创建对象的原型" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">简介</p><p>创建一个新对象，使用现有的对象来作为新创建对象的原型（<strong>prototype</strong>）</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> { name: </span><span style="color:#E6DB74;">&#39;join&#39;</span><span style="color:#F8F8F2;"> }</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> b </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">create</span><span style="color:#F8F8F2;">(a)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// result { name: &#39;join&#39; }</span></span>
<span class="line"><span style="color:#F8F8F2;">b.__proto__</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></div><h2 id="constructor-属性" tabindex="-1">constructor 属性 <a class="header-anchor" href="#constructor-属性" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">简介</p><p>每个实例对象都从原型中继承了一个 constructor 属性，该属性指向了用于构造此实例对象的构造函数。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Person</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> val</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">fun1</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">        console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> person </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Person</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">person.</span><span style="color:#A6E22E;">fun1</span><span style="color:#F8F8F2;">() </span><span style="color:#88846F;">// hello</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> person1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> person.</span><span style="color:#A6E22E;">constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;name1&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(person) </span><span style="color:#88846F;">// {name: &#39;name&#39;, fun1: ƒ}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(person1) </span><span style="color:#88846F;">// {name: &#39;name1&#39;, fun1: ƒ}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">/* result Person 构造器</span></span>
<span class="line"><span style="color:#88846F;">function Person(val) {</span></span>
<span class="line"><span style="color:#88846F;">    this.name = val</span></span>
<span class="line"><span style="color:#88846F;">    this.fun1 = function () {</span></span>
<span class="line"><span style="color:#88846F;">        console.log(&#39;hello&#39;)</span></span>
<span class="line"><span style="color:#88846F;">    }</span></span>
<span class="line"><span style="color:#88846F;">}</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>可以通过实例的构造函数，在无法获取原始构造器时使用创建新的实例对象</p></div><h2 id="this-指向" tabindex="-1">this 指向 <a class="header-anchor" href="#this-指向" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">this指向</p><ol><li>普通函数 <ol><li><code>this指向</code> 调用函数的直接对象</li><li>没有直接调用者，<code>this指向</code> window</li><li>&quot;use strict&quot;，指定了严格模式，<code>this指向</code> undefined</li><li>可以被call,apply,bind改变 <code>this指向</code></li></ol></li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    name: </span><span style="color:#E6DB74;">&quot;obj&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">func</span><span style="color:#F8F8F2;">() { console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">) },</span></span>
<span class="line"><span style="color:#F8F8F2;">    item: {</span></span>
<span class="line"><span style="color:#F8F8F2;">        name: </span><span style="color:#E6DB74;">&quot;item&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#A6E22E;">func</span><span style="color:#F8F8F2;">() { console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">) },</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#F8F8F2;">obj.</span><span style="color:#A6E22E;">func</span><span style="color:#F8F8F2;">();         </span><span style="color:#88846F;">// { name: &#39;obj&#39;, func: function, item: {...} }</span></span>
<span class="line"><span style="color:#F8F8F2;">obj.item.</span><span style="color:#A6E22E;">func</span><span style="color:#F8F8F2;">();    </span><span style="color:#88846F;">// { name: &#39;item&#39;, func: function }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ol start="2"><li>箭头函数 <ol><li><code>this指向</code> 箭头函数所在作用域中的this，箭头函数所处上下文的this</li><li>上下文就是每段代码的执行环境</li></ol></li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    name: </span><span style="color:#E6DB74;">&quot;obj&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">func</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// { name: &#39;obj&#39;, func: function, item: {...} }</span></span>
<span class="line"><span style="color:#F8F8F2;">        console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#A6E22E;">setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#88846F;">// { name: &#39;obj&#39;, func: function, item: {...} }</span></span>
<span class="line"><span style="color:#F8F8F2;">            console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        });</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#F8F8F2;">obj.</span><span style="color:#A6E22E;">func</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></div><div class="info custom-block"><p class="custom-block-title">改变this指向的方法</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">child</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;child&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">arguments</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">person</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;person&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">arguments</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">)   </span><span style="color:#88846F;">// window</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">// call() 在 函数 运行时指定使用的 this 值，这里指向 person 构造函数的</span></span>
<span class="line"><span style="color:#88846F;">// this =&gt; person，立即运行</span></span>
<span class="line"><span style="color:#F8F8F2;">child.</span><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">(person,</span><span style="color:#E6DB74;">&#39;arg1&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;arg2&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// apply() 在 函数 运行时指定使用的 this 值，这里指向 person 构造函数的</span></span>
<span class="line"><span style="color:#88846F;">// this =&gt; person，立即运行</span></span>
<span class="line"><span style="color:#F8F8F2;">child.</span><span style="color:#A6E22E;">apply</span><span style="color:#F8F8F2;">(person,[</span><span style="color:#E6DB74;">&#39;arg1&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;arg2&#39;</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// bind() 在 bind() 被调用时，这个新函数的 this 指向第一个参数，这里指向 person 构造函数的</span></span>
<span class="line"><span style="color:#88846F;">// this =&gt; person，返回新函数，手动调用新函数</span></span>
<span class="line"><span style="color:#F8F8F2;">child.</span><span style="color:#A6E22E;">bind</span><span style="color:#F8F8F2;">(person,[</span><span style="color:#E6DB74;">&#39;arg1&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;arg2&#39;</span><span style="color:#F8F8F2;">])()</span></span>
<span class="line"><span style="color:#F8F8F2;">child.</span><span style="color:#A6E22E;">bind</span><span style="color:#F8F8F2;">(person,</span><span style="color:#E6DB74;">&#39;arg1&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;arg2&#39;</span><span style="color:#F8F8F2;">)()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 区别1: 参数</span></span>
<span class="line"><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">() 一个参数列表             arg1, arg2 </span><span style="color:#F92672;">...</span></span>
<span class="line"><span style="color:#A6E22E;">apply</span><span style="color:#F8F8F2;">() 一个包含多个参数的数组   [arg1, arg2 </span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#A6E22E;">bind</span><span style="color:#F8F8F2;">() 一个参数列表             arg1, arg2, </span><span style="color:#F92672;">...</span></span>
<span class="line"><span style="color:#88846F;">// 区别2: 运行时机</span></span>
<span class="line"><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">()</span><span style="color:#A6E22E;">和apply</span><span style="color:#F8F8F2;">() 是立即执行</span></span>
<span class="line"><span style="color:#A6E22E;">bind</span><span style="color:#F8F8F2;">() 是先指定this指向，返回新函数手动调用</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div></div>`,17),r=[e];function c(t,F,i,y,b,u){return a(),n("div",null,r)}const E=s(o,[["render",c]]);export{d as __pageData,E as default};
