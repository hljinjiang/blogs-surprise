import{_ as s,o as n,c as a,U as l}from"./chunks/framework.76b79cb5.js";const m=JSON.parse('{"title":"JavaScript Window","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/js-window.md","filePath":"javascript/js-window.md","lastUpdated":1699412854000}'),p={name:"javascript/js-window.md"},e=l(`<h1 id="javascript-window" tabindex="-1">JavaScript Window <a class="header-anchor" href="#javascript-window" aria-label="Permalink to &quot;JavaScript Window&quot;">​</a></h1><div><p><code>表示一个包含 DOM 文档的窗口，其 document 属性指向窗口中载入的 DOM 文档。</code></p></div><h2 id="window" tabindex="-1">Window <a class="header-anchor" href="#window" aria-label="Permalink to &quot;Window&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> 窗口属性</span></span>
<span class="line"><span style="color:#F8F8F2;">document.defaultView       </span><span style="color:#88846F;">// 该属性可以获取指定文档所在窗口</span></span>
<span class="line"><span style="color:#F8F8F2;">window.document            </span><span style="color:#88846F;">// 返回对 Document 对象的只读引用</span></span>
<span class="line"><span style="color:#F8F8F2;">window.frames              </span><span style="color:#88846F;">// 返回窗口中所有命名的框架 (返回window对象集合数组，如iframe) </span></span>
<span class="line"><span style="color:#F8F8F2;">window.self                </span><span style="color:#88846F;">// 返回指向当前window对象的引用，可以保证在多个窗口中的位置</span></span>
<span class="line"><span style="color:#F8F8F2;">window.parent              </span><span style="color:#88846F;">// 返回当前窗口的父窗口信息</span></span>
<span class="line"><span style="color:#F8F8F2;">window.top                 </span><span style="color:#88846F;">// 返回当前窗口的最顶层浏览器窗口 (子窗口中返回顶级父窗口)</span></span>
<span class="line"><span style="color:#F8F8F2;">window.length              </span><span style="color:#88846F;">// 返回或设置窗口中的框架数量</span></span>
<span class="line"><span style="color:#F8F8F2;">window.name                </span><span style="color:#88846F;">// 设置或返回窗口的名称</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">window.innerWidth          </span><span style="color:#88846F;">// 返回窗口的文档显示区的高度 (文档height) </span></span>
<span class="line"><span style="color:#F8F8F2;">window.innerHeight         </span><span style="color:#88846F;">// 返回窗口的文档显示区的宽度 (文档width) </span></span>
<span class="line"><span style="color:#F8F8F2;">window.pageXOffset         </span><span style="color:#88846F;">// 返回文档在窗口左上角水平滚动像素 (滚动条距离水平像素) </span></span>
<span class="line"><span style="color:#F8F8F2;">window.pageYOffset         </span><span style="color:#88846F;">// 返回文档在窗口左上角垂直滚动像素 (滚动条距离垂直像素) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">window.outerHeight         </span><span style="color:#88846F;">// 设置或返回窗口的浏览器高度 (文档height+外部工具栏/滚动条) </span></span>
<span class="line"><span style="color:#F8F8F2;">window.outerWidth          </span><span style="color:#88846F;">// 设置或返回窗口的浏览器宽度 (文档width+外部工具栏/滚动条) </span></span>
<span class="line"><span style="color:#F8F8F2;">window.screenLeft          </span><span style="color:#88846F;">// 返回浏览器相对于屏幕的X坐标 (浏览器距离左边的距离的像素数) </span></span>
<span class="line"><span style="color:#F8F8F2;">window.screenTop           </span><span style="color:#88846F;">// 返回浏览器相对于屏幕的Y坐标 (浏览器距离上边的距离的像素数) </span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> 窗口方法</span></span>
<span class="line"><span style="color:#F8F8F2;">window.</span><span style="color:#A6E22E;">alert</span><span style="color:#F8F8F2;">()                      </span><span style="color:#88846F;">// 带有一段消息，确认按钮的警告框</span></span>
<span class="line"><span style="color:#F8F8F2;">window.</span><span style="color:#A6E22E;">confirm</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;message&#39;</span><span style="color:#F8F8F2;">)           </span><span style="color:#88846F;">// 带有一段消息，确认按钮和取消按钮的对话框 (返回true，false) </span></span>
<span class="line"><span style="color:#F8F8F2;">window.</span><span style="color:#A6E22E;">prompt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;title&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;defaultValue&#39;</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;">// 显示一个对话框，对话框中包含一条文字信息，用来提示用户输入文字 (确认返回string，取消返回null)</span></span>
<span class="line"><span style="color:#F8F8F2;">window.</span><span style="color:#A6E22E;">open</span><span style="color:#F8F8F2;">(url, strWindowName, strWindowFeatures)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">url</span><span style="color:#F8F8F2;">(窗口的URL): </span><span style="color:#E6DB74;">&#39;http://www.cnn.com/&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">strWindowName</span><span style="color:#F8F8F2;">(窗口的Name): </span><span style="color:#E6DB74;">&#39;CNN_WindowName&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">strWindowFeatures</span><span style="color:#F8F8F2;">(窗口的一些特性): </span><span style="color:#E6DB74;">&#39;width=400,height=400&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">window.</span><span style="color:#A6E22E;">stop</span><span style="color:#F8F8F2;">()               </span><span style="color:#88846F;">// 相当于点击了浏览器的停止按钮，能够阻止图片、新窗口、和一些会延迟加载的对象的加载</span></span>
<span class="line"><span style="color:#F8F8F2;">window.</span><span style="color:#A6E22E;">close</span><span style="color:#F8F8F2;">()              </span><span style="color:#88846F;">// 关闭浏览器窗口 (只能由 Window.open() 方法打开的窗口的 window)</span></span>
<span class="line"><span style="color:#F8F8F2;">window.</span><span style="color:#A6E22E;">moveBy</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">)      </span><span style="color:#88846F;">// 把当前浏览器相对于窗口移动 (移动多少像素，只能由 Window.open() 方法打开的窗口的 window)</span></span>
<span class="line"><span style="color:#F8F8F2;">window.</span><span style="color:#A6E22E;">moveTo</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">)      </span><span style="color:#88846F;">// 把窗口的左上角移动到一个指定坐标 (移动到指定像素位置，只能由 Window.open() 方法打开的窗口的 window)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">window.</span><span style="color:#A6E22E;">scrollBy</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">)     </span><span style="color:#88846F;">// 按照指定像素值来滚动内容 (移动多少像素)</span></span>
<span class="line"><span style="color:#F8F8F2;">window.</span><span style="color:#A6E22E;">scrollTo</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">)     </span><span style="color:#88846F;">// 把内容滚动到指定坐标 (移动到像素)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> encodedData </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> window.</span><span style="color:#A6E22E;">btoa</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Hello, world&#39;</span><span style="color:#F8F8F2;">); </span><span style="color:#88846F;">// 编码字符串，创建一个base-64编码的字符串</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> decodedData </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> window.</span><span style="color:#A6E22E;">atob</span><span style="color:#F8F8F2;">(encodedData); </span><span style="color:#88846F;">// 解码字符串，解码一个base-64编码的字符串</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">window.</span><span style="color:#A6E22E;">print</span><span style="color:#F8F8F2;">()              </span><span style="color:#88846F;">// 打印当前窗口页面</span></span>
<span class="line"><span style="color:#F8F8F2;">window.</span><span style="color:#A6E22E;">matchMedia</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;(max-width: 600px)&#39;</span><span style="color:#F8F8F2;">)     </span><span style="color:#88846F;">// 返回一个新的MediaQueryList，matches返回true或false，表示是否与媒体查询匹配</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> ele </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#A6E22E;">getElementsByTagName</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;div&#39;</span><span style="color:#F8F8F2;">)[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">window.</span><span style="color:#A6E22E;">getComputedStyle</span><span style="color:#F8F8F2;">(ele, </span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">)          </span><span style="color:#88846F;">// 在应用活动样式表并解析这些值可能包含的任何基本计算后报告元素的所有 CSS 属性的值，该元素的style样式表</span></span>
<span class="line"><span style="color:#F8F8F2;">JSON.</span><span style="color:#A6E22E;">parse</span><span style="color:#F8F8F2;">()                </span><span style="color:#88846F;">// 解析json数据为JavaScript对象</span></span>
<span class="line"><span style="color:#88846F;">// param1: JSON 字符串的值</span></span>
<span class="line"><span style="color:#88846F;">// param2: 函数 被序列化的值会经过该函数的转换和处理并返回</span></span>
<span class="line"><span style="color:#88846F;">// param2: 数组[&#39;a&#39;] 包含在这个数组中的属性名才会被序列化到最终的 JSON 字符串中</span></span>
<span class="line"><span style="color:#88846F;">// param3: 数字指定缩进用的空白字符串</span></span>
<span class="line"><span style="color:#F8F8F2;">JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">({a: </span><span style="color:#AE81FF;">123</span><span style="color:#F8F8F2;">, b: </span><span style="color:#AE81FF;">321</span><span style="color:#F8F8F2;">}, (</span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { </span></span>
<span class="line"><span style="color:#F8F8F2;">    value.a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">333</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> value </span></span>
<span class="line"><span style="color:#F8F8F2;">}, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br></div></div><h2 id="window-storage" tabindex="-1">Window Storage <a class="header-anchor" href="#window-storage" aria-label="Permalink to &quot;Window Storage&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">JavaScript 存储对象</p><ul><li><strong>Cookie: 本地存储 (长久存储，可设置数据过期时间，4k)</strong></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">document.cookie       </span><span style="color:#88846F;">// result &#39;someCookieName1=true; someCookieName2=true&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">document.cookie </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;username=John Doe; domain= ;expires=Thu, 18 Dec 2043 12:00:00 GMT; max-age=300; path=/; secure=true;&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> name</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">value: 名称</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">值</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> domain: </span><span style="color:#A6E22E;">域名</span><span style="color:#F8F8F2;"> (默认当前文档的域名)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> path: </span><span style="color:#A6E22E;">网页路径</span><span style="color:#F8F8F2;"> (基于domain)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> expires: </span><span style="color:#A6E22E;">有效期时间</span><span style="color:#F8F8F2;"> (chrome 最大为400天，删除cookie就设置当前时间之前的时间)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> max</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">age: </span><span style="color:#A6E22E;">存活最大seconds时间</span><span style="color:#F8F8F2;"> (max</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">age优先级比expires高，删除cookie就设置0)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> secure: cookie 只通过 https 协议传输</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li><strong>localStorage: 本地存储 (长久存储，需要手动删除数据，5M)</strong></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">localStorage.</span><span style="color:#A6E22E;">setItem</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;myCat&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;Tom&#39;</span><span style="color:#F8F8F2;">);   </span><span style="color:#88846F;">// 设置本地存储key/value</span></span>
<span class="line"><span style="color:#F8F8F2;">localStorage.</span><span style="color:#A6E22E;">getItem</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;myCat&#39;</span><span style="color:#F8F8F2;">);          </span><span style="color:#88846F;">// 获取本地存储key的value</span></span>
<span class="line"><span style="color:#F8F8F2;">localStorage.</span><span style="color:#A6E22E;">removeItem</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;myCat&#39;</span><span style="color:#F8F8F2;">);       </span><span style="color:#88846F;">// 删除本地存储对应key数据</span></span>
<span class="line"><span style="color:#F8F8F2;">localStorage.</span><span style="color:#A6E22E;">clear</span><span style="color:#F8F8F2;">();                   </span><span style="color:#88846F;">// 清空本地存储所有数据</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><strong>sessionStorage: 会话存储 (临时存储，关闭窗口自动删除数据，5M)</strong></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">打开多个相同的 URL 的 Tabs 页面，会创建各自的 sessionStorage</span></span>
<span class="line"><span style="color:#F8F8F2;">关闭对应浏览器标签或窗口，会清除对应的 sessionStorage</span></span>
<span class="line"><span style="color:#F8F8F2;">sessionStorage.</span><span style="color:#A6E22E;">setItem</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;key&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;value&#39;</span><span style="color:#F8F8F2;">); </span><span style="color:#88846F;">// 保存数据到 sessionStorage</span></span>
<span class="line"><span style="color:#F8F8F2;">sessionStorage.</span><span style="color:#A6E22E;">getItem</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;key&#39;</span><span style="color:#F8F8F2;">);          </span><span style="color:#88846F;">// 从 sessionStorage 获取数据</span></span>
<span class="line"><span style="color:#F8F8F2;">sessionStorage.</span><span style="color:#A6E22E;">removeItem</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;key&#39;</span><span style="color:#F8F8F2;">);       </span><span style="color:#88846F;">// 从 sessionStorage 删除保存的数据</span></span>
<span class="line"><span style="color:#F8F8F2;">sessionStorage.</span><span style="color:#A6E22E;">clear</span><span style="color:#F8F8F2;">();                 </span><span style="color:#88846F;">// 从 sessionStorage 删除所有保存的数据</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li><strong>IndexedDB: 在客户端存储大量的结构化数据 (存储大量数据，250M+)</strong></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 创建或打开对应数据库，创建连接</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> DBOpenRequest </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> window.indexedDB.</span><span style="color:#A6E22E;">open</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;toDoList&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#88846F;">// 数据库初始化连接成功</span></span>
<span class="line"><span style="color:#F8F8F2;">DBOpenRequest.</span><span style="color:#A6E22E;">onsuccess</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">event</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    db </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> DBOpenRequest.result;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 创建一个要添加到对象存储中的新项</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> newItem </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">        { taskTitle: </span><span style="color:#E6DB74;">&quot;Walk dog&quot;</span><span style="color:#F8F8F2;">, hours: </span><span style="color:#AE81FF;">19</span><span style="color:#F8F8F2;">, minutes: </span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">, day: </span><span style="color:#AE81FF;">24</span><span style="color:#F8F8F2;">, month: </span><span style="color:#E6DB74;">&#39;December&#39;</span><span style="color:#F8F8F2;">, year: </span><span style="color:#AE81FF;">2013</span><span style="color:#F8F8F2;"> }</span></span>
<span class="line"><span style="color:#F8F8F2;">    ];</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 打开一个读/写db事务，指定表格名称，操作模式，以添加数据</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> transaction </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> db.</span><span style="color:#A6E22E;">transaction</span><span style="color:#F8F8F2;">([</span><span style="color:#E6DB74;">&quot;toDoList&quot;</span><span style="color:#F8F8F2;">], </span><span style="color:#E6DB74;">&quot;readwrite&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 当一切都完成时，报告事务完成的成功情况</span></span>
<span class="line"><span style="color:#F8F8F2;">    transaction.</span><span style="color:#A6E22E;">oncomplete</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">event</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;oncomplete&#39;</span><span style="color:#F8F8F2;">) };</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 由于错误，事务出现问题</span></span>
<span class="line"><span style="color:#F8F8F2;">    transaction.</span><span style="color:#A6E22E;">onerror</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">event</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;onerror&#39;</span><span style="color:#F8F8F2;">) };</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 在事务上创建对象存储，请求的对象存储区的名称。</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> objectStore </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> transaction.</span><span style="color:#A6E22E;">objectStore</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;toDoList&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 将数据添加到对象存储区</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> objectStoreRequest </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> objectStore.</span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;">(newItem[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">]);</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 对象存储请求操作成功情况</span></span>
<span class="line"><span style="color:#F8F8F2;">    objectStoreRequest.</span><span style="color:#A6E22E;">onsuccess</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">event</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;onsuccess&#39;</span><span style="color:#F8F8F2;">) };</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#88846F;">// upgradeneeded 若是指定的版本号，大于数据库的实际版本号，就会发生数据库升级事件upgradeneeded</span></span>
<span class="line"><span style="color:#88846F;">// 首次新建数据库也会触发这个事件</span></span>
<span class="line"><span style="color:#F8F8F2;">DBOpenRequest.</span><span style="color:#A6E22E;">onupgradeneeded</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">event</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> db </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> event.target.result;</span></span>
<span class="line"><span style="color:#F8F8F2;">  db.</span><span style="color:#A6E22E;">onerror</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">event</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;onerror&#39;</span><span style="color:#F8F8F2;">) };</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 为该数据库创建一个objectStore</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> objectStore </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> db.</span><span style="color:#A6E22E;">createObjectStore</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;toDoList&quot;</span><span style="color:#F8F8F2;">, { keyPath: </span><span style="color:#E6DB74;">&quot;taskTitle&quot;</span><span style="color:#F8F8F2;"> });</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 定义objectStore将包含哪些数据项</span></span>
<span class="line"><span style="color:#F8F8F2;">  objectStore.</span><span style="color:#A6E22E;">createIndex</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;hours&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;hours&quot;</span><span style="color:#F8F8F2;">, { unique: </span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;"> });</span></span>
<span class="line"><span style="color:#F8F8F2;">  objectStore.</span><span style="color:#A6E22E;">createIndex</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;minutes&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;minutes&quot;</span><span style="color:#F8F8F2;">, { unique: </span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;"> });</span></span>
<span class="line"><span style="color:#F8F8F2;">  objectStore.</span><span style="color:#A6E22E;">createIndex</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;day&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;day&quot;</span><span style="color:#F8F8F2;">, { unique: </span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;"> });</span></span>
<span class="line"><span style="color:#F8F8F2;">  objectStore.</span><span style="color:#A6E22E;">createIndex</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;month&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;month&quot;</span><span style="color:#F8F8F2;">, { unique: </span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;"> });</span></span>
<span class="line"><span style="color:#F8F8F2;">  objectStore.</span><span style="color:#A6E22E;">createIndex</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;year&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;year&quot;</span><span style="color:#F8F8F2;">, { unique: </span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;"> });</span></span>
<span class="line"><span style="color:#F8F8F2;">  objectStore.</span><span style="color:#A6E22E;">createIndex</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;notified&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;notified&quot;</span><span style="color:#F8F8F2;">, { unique: </span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;"> });</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div></div><h2 id="window-page" tabindex="-1">Window Page <a class="header-anchor" href="#window-page" aria-label="Permalink to &quot;Window Page&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">JavaScript 页面记录</p><ul><li><strong>History: 查看操作浏览器的曾经在标签页或者框架里访问的会话历史记录</strong></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">history.</span><span style="color:#A6E22E;">forward</span><span style="color:#F8F8F2;">()                   </span><span style="color:#88846F;">// 向前移动一页</span></span>
<span class="line"><span style="color:#F8F8F2;">history.</span><span style="color:#A6E22E;">back</span><span style="color:#F8F8F2;">()                      </span><span style="color:#88846F;">// 向后移动一页</span></span>
<span class="line"><span style="color:#F8F8F2;">history.</span><span style="color:#A6E22E;">go</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)                      </span><span style="color:#88846F;">// 2向前移动2页，-2向后移动2页面，0则与location.reload()具有相同的效果</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 状态对象数据，2MiB </span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> state </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> { </span><span style="color:#E6DB74;">&#39;page_id&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;user_id&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;"> }</span></span>
<span class="line"><span style="color:#88846F;">// 移动的状态传递简短的标题</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> title </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;pushName&#39;</span></span>
<span class="line"><span style="color:#88846F;">// url (?query: 添加query参数；/path: 替换域名后面的路径；path: 替换当前所在路径)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> url </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;?page=1&#39;</span></span>
<span class="line"><span style="color:#88846F;">// 在历史中添加一条记录，可对这条记录绑定state，以及添加url，不会刷新页面</span></span>
<span class="line"><span style="color:#F8F8F2;">history.</span><span style="color:#A6E22E;">pushState</span><span style="color:#F8F8F2;">(state, title, url)</span></span>
<span class="line"><span style="color:#88846F;">// 覆盖当前历史记录，可对这条记录绑定state，以及添加url，不会刷新页面</span></span>
<span class="line"><span style="color:#F8F8F2;">history.</span><span style="color:#A6E22E;">replaceState</span><span style="color:#F8F8F2;">(state, title, url)</span></span>
<span class="line"><span style="color:#88846F;">// 每当激活同一文档中不同的历史记录条目时，popstate 事件就会触发，PopStateEvent</span></span>
<span class="line"><span style="color:#88846F;">// 第一次加载页面不会触发，back、forward()、go()才会触发</span></span>
<span class="line"><span style="color:#F8F8F2;">window.</span><span style="color:#A6E22E;">onpopstate</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">event</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(event) };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">history.length                      </span><span style="color:#88846F;">// 页面回话记录数目</span></span>
<span class="line"><span style="color:#F8F8F2;">history.scrollRestoration           </span><span style="color:#88846F;">// 在历史导航上显式地设置默认滚动恢复行为</span></span>
<span class="line"><span style="color:#F8F8F2;">history.state                       </span><span style="color:#88846F;">// 返回在 history 栈顶的 任意 值的拷贝，查看 state 值，不必等待 popstate事件发生后再查看</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><ul><li><strong>Location: 查看操作当前对象的位置（URL)</strong></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">location.href                  </span><span style="color:#88846F;">// 返回整个 URL              http://localhost:5173/docs/javascript/js-window.html?page=1#hash</span></span>
<span class="line"><span style="color:#F8F8F2;">location.protocol              </span><span style="color:#88846F;">// 返回    协议              https:</span></span>
<span class="line"><span style="color:#F8F8F2;">location.host                  </span><span style="color:#88846F;">// 返回    域名 + 端口号      localhost:5173</span></span>
<span class="line"><span style="color:#F8F8F2;">location.hostname              </span><span style="color:#88846F;">// 返回    域名              localhost</span></span>
<span class="line"><span style="color:#F8F8F2;">location.port                  </span><span style="color:#88846F;">// 返回    端口号             5173</span></span>
<span class="line"><span style="color:#F8F8F2;">location.pathname              </span><span style="color:#88846F;">// 返回    域名后的path       /docs/javascript/js-window.html</span></span>
<span class="line"><span style="color:#F8F8F2;">location.search                </span><span style="color:#88846F;">// 返回    域名后的?          ?page=1</span></span>
<span class="line"><span style="color:#F8F8F2;">location.hash                  </span><span style="color:#88846F;">// 返回    域名后的#          #hash</span></span>
<span class="line"><span style="color:#F8F8F2;">location.origin                </span><span style="color:#88846F;">// 返回    源的域名的标准形式   https://developer.mozilla.org</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">location.</span><span style="color:#A6E22E;">assign</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;https://www.baidu.com&#39;</span><span style="color:#F8F8F2;">)    </span><span style="color:#88846F;">// 触发窗口加载并跳转到指定 URL，当前页面会保存在会话记录中</span></span>
<span class="line"><span style="color:#F8F8F2;">location.</span><span style="color:#A6E22E;">replace</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;https://www.baidu.com&#39;</span><span style="color:#F8F8F2;">)   </span><span style="color:#88846F;">// 加载指定 URL 并替换掉当前的资源，当前页面将从会话记录中消失</span></span>
<span class="line"><span style="color:#F8F8F2;">location.</span><span style="color:#A6E22E;">reload</span><span style="color:#F8F8F2;">(boolean)                    </span><span style="color:#88846F;">// 刷新当前页面，设置为true，会绕过缓存，从服务器重新下载该文档</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></div><h2 id="window-navigator" tabindex="-1">Window Navigator <a class="header-anchor" href="#window-navigator" aria-label="Permalink to &quot;Window Navigator&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">JavaScript 浏览器信息</p><ul><li><strong>Navigator: 用户代理的状态和标识，包含浏览器暴露的一些信息</strong></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">navigator.cookieEnabled         </span><span style="color:#88846F;">// 返回 当前页面是否启用了 cookie</span></span>
<span class="line"><span style="color:#F8F8F2;">navigator.clipboard             </span><span style="color:#88846F;">// 返回 读写剪切板内容的 Clipboard 对象 (需用户允许开启权限)</span></span>
<span class="line"><span style="color:#F8F8F2;">navigator.geolocation           </span><span style="color:#88846F;">// 返回 访问设备的位置信息 (需用户允许开启权限)</span></span>
<span class="line"><span style="color:#F8F8F2;">navigator.language              </span><span style="color:#88846F;">// 返回 用户偏好语言</span></span>
<span class="line"><span style="color:#F8F8F2;">navigator.languages             </span><span style="color:#88846F;">// 返回 来自Accept-Language HTTP header，偏好语言优先级排成的数组</span></span>
<span class="line"><span style="color:#F8F8F2;">navigator.maxTouchPoints        </span><span style="color:#88846F;">// 返回 当前设备能够支持的最大同时触摸的点数</span></span>
<span class="line"><span style="color:#F8F8F2;">navigator.mediaDevices          </span><span style="color:#88846F;">// 返回或操作媒体设备</span></span>
<span class="line"><span style="color:#88846F;">// 可用的媒体输入和输出设备的列表，例如麦克风，摄像机，耳机设备等</span></span>
<span class="line"><span style="color:#F8F8F2;">navigator.mediaDevices.</span><span style="color:#A6E22E;">enumerateDevices</span><span style="color:#F8F8F2;">().</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(res))</span></span>
<span class="line"><span style="color:#88846F;">// 选择和授权捕获展示的内容或部分内容（如一个窗口）在一个MediaStream 里</span></span>
<span class="line"><span style="color:#F8F8F2;">navigator.mediaDevices.</span><span style="color:#A6E22E;">getDisplayMedia</span><span style="color:#F8F8F2;">({ video: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;"> }).</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">stream</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    video.srcObject </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> stream;</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#88846F;">// 给予使用媒体输入的许可，获取用户设备音频和视频等，媒体输入会产生一个 MediaStream 里</span></span>
<span class="line"><span style="color:#F8F8F2;">navigator.mediaDevices.</span><span style="color:#A6E22E;">getUserMedia</span><span style="color:#F8F8F2;">({ audio: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">, video: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;"> }).</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">stream</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    video.srcObject </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> stream;</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#F8F8F2;">navigator.onLine </span><span style="color:#F92672;">?</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;online&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;offline&#39;</span><span style="color:#F8F8F2;">     </span><span style="color:#88846F;">// 设备是否在线，有网络/无网络</span></span>
<span class="line"><span style="color:#F8F8F2;">    window.</span><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;online&#39;</span><span style="color:#F8F8F2;">, navigator.onLine)	    </span><span style="color:#88846F;">// 设备联网时</span></span>
<span class="line"><span style="color:#F8F8F2;">    window.</span><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;offline&#39;</span><span style="color:#F8F8F2;">, navigator.onLine)	</span><span style="color:#88846F;">// 设备断网时</span></span>
<span class="line"><span style="color:#F8F8F2;">navigator.pdfViewerEnabled      </span><span style="color:#88846F;">// 浏览器是否支持PDF文件的内联查看</span></span>
<span class="line"><span style="color:#F8F8F2;">navigator.userAgent             </span><span style="color:#88846F;">// 返回 浏览器用户代理 操作系统版本、CPU 类型、浏览器版本等信息</span></span>
<span class="line"><span style="color:#F8F8F2;">navigator.</span><span style="color:#A6E22E;">getBattery</span><span style="color:#F8F8F2;">()          </span><span style="color:#88846F;">// 返回 系统的电量信息 是否正在充电、距离充电完毕还需多少秒、距离电池耗电至空需多少秒</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 返回 设备的网络连接信息</span></span>
<span class="line"><span style="color:#88846F;">// ownlink (网络下行速度) effectiveType (网络类型) onchange (有值代表网络状态变更) rtt (估算的往返时间) saveData (打开/请求数据保护模式) </span></span>
<span class="line"><span style="color:#F8F8F2;">navigator.connection</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 主要用于将统计数据发送到 Web 服务器，同时避免了用传统技术 (如：XMLHttpRequest) 发送分析数据的一些问题</span></span>
<span class="line"><span style="color:#88846F;">// 采用POST PING发送数据</span></span>
<span class="line"><span style="color:#F8F8F2;">navigator.</span><span style="color:#A6E22E;">sendBeacon</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;/api/getData&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;data&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">navigator.</span><span style="color:#A6E22E;">share</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  title: document.title,</span></span>
<span class="line"><span style="color:#F8F8F2;">  text: </span><span style="color:#E6DB74;">&#39;Hello World&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  url: </span><span style="color:#E6DB74;">&#39;https://www.baidu.com&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">// 调用本机的共享机制作为 Web Share</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div></div><h2 id="window-console" tabindex="-1">Window Console <a class="header-anchor" href="#window-console" aria-label="Permalink to &quot;Window Console&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">JavaScript Console</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#AE81FF;">1.</span><span style="color:#F8F8F2;"> assert: 如果断言为false，</span><span style="color:#A6E22E;">则在控制台输出错误信息</span><span style="color:#F8F8F2;"> (表达式: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;"> or </span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;">, message)</span></span>
<span class="line"><span style="color:#AE81FF;">2.</span><span style="color:#F8F8F2;"> clear: 清除控制台上的信息</span></span>
<span class="line"><span style="color:#AE81FF;">3.</span><span style="color:#F8F8F2;"> count: 记录count调用次数</span></span>
<span class="line"><span style="color:#AE81FF;">4.</span><span style="color:#F8F8F2;"> warn: 输出警告信息到控制台</span></span>
<span class="line"><span style="color:#AE81FF;">5.</span><span style="color:#F8F8F2;"> error: 输出错误信息到控制台</span></span>
<span class="line"><span style="color:#AE81FF;">6.</span><span style="color:#F8F8F2;"> group: </span><span style="color:#A6E22E;">在控制台创建一个信息分组</span><span style="color:#F8F8F2;"> (对console输出进行分组)</span></span>
<span class="line"><span style="color:#F8F8F2;">   </span><span style="color:#AE81FF;">1.</span><span style="color:#F8F8F2;"> groupCollapsed: 创建一个折叠的信息分组</span></span>
<span class="line"><span style="color:#F8F8F2;">   </span><span style="color:#AE81FF;">2.</span><span style="color:#F8F8F2;"> groupEnd: 结束当前分组</span></span>
<span class="line"><span style="color:#AE81FF;">7.</span><span style="color:#F8F8F2;"> info: 控制台输出一条信息</span></span>
<span class="line"><span style="color:#AE81FF;">8.</span><span style="color:#F8F8F2;">  log: 控制台输出一条信息</span></span>
<span class="line"><span style="color:#AE81FF;">9.</span><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">table</span><span style="color:#F8F8F2;">([</span><span style="color:#E6DB74;">&#39;xxx&#39;</span><span style="color:#F8F8F2;">]): 以表格形式显示数据</span></span>
<span class="line"><span style="color:#AE81FF;">10.</span><span style="color:#F8F8F2;"> time</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">timeEnd: 测试程序执行的时长</span></span>
<span class="line"><span style="color:#AE81FF;">11.</span><span style="color:#F8F8F2;"> trace: 显示当前执行代码的堆栈调用路径</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></div><h2 id="node" tabindex="-1">Node <a class="header-anchor" href="#node" aria-label="Permalink to &quot;Node&quot;">​</a></h2><div><p><code>表示一个接口，各种类型的 DOM API 对象会从这个接口继承</code><br><code>作为 DOM 的最小组成单位，一个文档的树形结构就是由各种不同类型的节点组成</code><br><code>Text、Comment、Element、Document都是节点</code></p></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 比如</span></span>
<span class="line"><span style="color:#F8F8F2;">HTMLParagraphElement </span><span style="color:#F92672;">-&gt;</span><span style="color:#F8F8F2;"> HTMLElement </span><span style="color:#F92672;">-&gt;</span><span style="color:#F8F8F2;"> Element </span><span style="color:#F92672;">-&gt;</span><span style="color:#F8F8F2;"> Node </span><span style="color:#F92672;">-&gt;</span><span style="color:#F8F8F2;"> EventTarget </span><span style="color:#F92672;">-&gt;</span><span style="color:#F8F8F2;"> Object</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="document" tabindex="-1">Document <a class="header-anchor" href="#document" aria-label="Permalink to &quot;Document&quot;">​</a></h2><div><p><code>表示一个网页，并作为网页内容的入口，也就是 DOM 树，可以通过 Document 对象访问设置 HTML 元素。</code></p></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> 匹配元素</span></span>
<span class="line"><span style="color:#F8F8F2;">document.</span><span style="color:#A6E22E;">getElementById</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;id&#39;</span><span style="color:#F8F8F2;">)                </span><span style="color:#88846F;">// 匹配ID元素，返回匹配到的第一个元素</span></span>
<span class="line"><span style="color:#F8F8F2;">document.</span><span style="color:#A6E22E;">getElementsByClassName</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;container&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// 匹配Class元素，返回HTMLCollection</span></span>
<span class="line"><span style="color:#F8F8F2;">document.</span><span style="color:#A6E22E;">getElementsByTagName</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;p&#39;</span><span style="color:#F8F8F2;">)           </span><span style="color:#88846F;">// 匹配标签名称，返回HTMLCollection</span></span>
<span class="line"><span style="color:#F8F8F2;">document.</span><span style="color:#A6E22E;">getElementsByTagNameNS</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;http://www.w3.org/1999/xhtml&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;p&quot;</span><span style="color:#F8F8F2;">)   </span><span style="color:#88846F;">// 匹配指定命名空间和指定标签名称，返回HTMLCollection</span></span>
<span class="line"><span style="color:#F8F8F2;">document.</span><span style="color:#A6E22E;">getElementsByName</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;up&quot;</span><span style="color:#F8F8F2;">)             </span><span style="color:#88846F;">// 匹配元素的name属性值，返回NodeList</span></span>
<span class="line"><span style="color:#F8F8F2;">document.</span><span style="color:#A6E22E;">querySelector</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;#nav-access&#39;</span><span style="color:#F8F8F2;">)        </span><span style="color:#88846F;">// 匹配CSS选择器，返回匹配到的第一个元素</span></span>
<span class="line"><span style="color:#F8F8F2;">document.</span><span style="color:#A6E22E;">querySelectorAll</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;.nav-access&#39;</span><span style="color:#F8F8F2;">)     </span><span style="color:#88846F;">// 匹配CSS选择器，返回NodeList</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> 操作元素</span></span>
<span class="line"><span style="color:#F8F8F2;">document.</span><span style="color:#A6E22E;">createElement</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;div&#39;</span><span style="color:#F8F8F2;">)         </span><span style="color:#88846F;">// 创建一个由标签名称 tagName 指定的 HTML 元素 &lt;div&gt;&lt;/div&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">document.</span><span style="color:#A6E22E;">createAttribute</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">)      </span><span style="color:#88846F;">// 创建并返回一个新的属性节点</span></span>
<span class="line"><span style="color:#F8F8F2;">document.</span><span style="color:#A6E22E;">createTextNode</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;div&#39;</span><span style="color:#F8F8F2;">)        </span><span style="color:#88846F;">// 创建一个新的文本节点</span></span>
<span class="line"><span style="color:#F8F8F2;">document.</span><span style="color:#A6E22E;">createComment</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;div&#39;</span><span style="color:#F8F8F2;">)         </span><span style="color:#88846F;">// 创建并返回一个注释节点</span></span>
<span class="line"><span style="color:#F8F8F2;">element.</span><span style="color:#A6E22E;">setAttributeNode</span><span style="color:#F8F8F2;">(attribute)   </span><span style="color:#88846F;">// 设置指定的 Element 添加属性节点，attribute由createAttribute创建，并设置value为属性值</span></span>
<span class="line"><span style="color:#F8F8F2;">element.</span><span style="color:#A6E22E;">setAttribute</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;value&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// 设置指定元素上的某个属性值</span></span>
<span class="line"><span style="color:#F8F8F2;">element.</span><span style="color:#A6E22E;">getAttribute</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">)          </span><span style="color:#88846F;">// 匹配元素上指定的属性值</span></span>
<span class="line"><span style="color:#F8F8F2;">element.</span><span style="color:#A6E22E;">removeAttribute</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">)       </span><span style="color:#88846F;">// 删除元素上指定的属性</span></span>
<span class="line"><span style="color:#F8F8F2;">element.</span><span style="color:#A6E22E;">remove</span><span style="color:#F8F8F2;">()                      </span><span style="color:#88846F;">// 删除元素，从 DOM 树中删除</span></span>
<span class="line"><span style="color:#F8F8F2;">element.</span><span style="color:#A6E22E;">before</span><span style="color:#F8F8F2;">(element)               </span><span style="color:#88846F;">// 在 Element的节点前插入一组 Node 对象或 DOMString 对象</span></span>
<span class="line"><span style="color:#F8F8F2;">element.</span><span style="color:#A6E22E;">append</span><span style="color:#F8F8F2;">(element)               </span><span style="color:#88846F;">// 在 Element的最后一个子节点之后插入一组 Node 对象或 DOMString 对象</span></span>
<span class="line"><span style="color:#F8F8F2;">element.</span><span style="color:#A6E22E;">after</span><span style="color:#F8F8F2;">(element)                </span><span style="color:#88846F;">// 在 Element的节点后插入一组 Node 对象或 DOMString 对象</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> 读取操作</span></span>
<span class="line"><span style="color:#F8F8F2;">document.activeElement                </span><span style="color:#88846F;">// 返回当前在 DOM 或者 shadow DOM 树中处于聚焦状态的Element</span></span>
<span class="line"><span style="color:#F8F8F2;">document.baseURI                      </span><span style="color:#88846F;">// 返回 HTML 文档的基础URI</span></span>
<span class="line"><span style="color:#F8F8F2;">document.cookie                       </span><span style="color:#88846F;">// 返回、设置与当前文档相关联的 cookie</span></span>
<span class="line"><span style="color:#F8F8F2;">document.doctype                      </span><span style="color:#88846F;">// 返回文档声明内容 html</span></span>
<span class="line"><span style="color:#F8F8F2;">document.documentElement              </span><span style="color:#88846F;">// 返回文档对象 document 的根元素</span></span>
<span class="line"><span style="color:#F8F8F2;">document.forms                        </span><span style="color:#88846F;">// 返回当前文档中的 &lt;form&gt;元素的一个集合，返回HTMLCollection</span></span>
<span class="line"><span style="color:#F8F8F2;">document.images                       </span><span style="color:#88846F;">// 返回当前文档中的 &lt;image&gt;元素的一个集合，返回HTMLCollection</span></span>
<span class="line"><span style="color:#F8F8F2;">document.links                        </span><span style="color:#88846F;">// 返回一个文档中所有具有 href 属性值的 &lt;area&gt; 元素与 &lt;a&gt; 元素的集合</span></span>
<span class="line"><span style="color:#F8F8F2;">document.scripts                      </span><span style="color:#88846F;">// 返回文档中所有的&lt;script&gt;元素的集合，返回HTMLCollection</span></span>
<span class="line"><span style="color:#F8F8F2;">document.title                        </span><span style="color:#88846F;">// 返回、设置当前文档的标题 title</span></span>
<span class="line"><span style="color:#F8F8F2;">document.head                         </span><span style="color:#88846F;">// 返回当前文档中的 &lt;head&gt; 元素</span></span>
<span class="line"><span style="color:#F8F8F2;">document.readyState                   </span><span style="color:#88846F;">// 描述了document 的加载状态</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#AE81FF;">1.</span><span style="color:#F8F8F2;"> loading          </span><span style="color:#88846F;">// 加载中，document还在加载</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#AE81FF;">2.</span><span style="color:#F8F8F2;"> interactive      </span><span style="color:#88846F;">// 已加载，document已被解析，子资源如图像，样式表，框架等还在加载</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#AE81FF;">3.</span><span style="color:#F8F8F2;"> complete         </span><span style="color:#88846F;">// 完成，document和子资源已完成加载，load状态事件即将被触发</span></span>
<span class="line"><span style="color:#88846F;">/* 若在一个已关闭 (例如，已完成加载)的文档上调用 document.write，就会自动调用 document.open，这将清空该文档的内容 */</span></span>
<span class="line"><span style="color:#F8F8F2;">document.write                        </span><span style="color:#88846F;">// 将一个文本字符串写入一个由 document.open() 打开的文档流 ( document.close() )</span></span>
<span class="line"><span style="color:#F8F8F2;">document.writeln                      </span><span style="color:#88846F;">// 同上，每次写入会紧跟着一个换行符</span></span>
<span class="line"><span style="color:#F8F8F2;">document.characterSet                 </span><span style="color:#88846F;">// 返回当前文档的字符编码 UTF-8/UTF-16</span></span>
<span class="line"><span style="color:#F8F8F2;">document.designMode                   </span><span style="color:#88846F;">// 控制整个文档是否可编辑，on可编辑 || off不可编辑</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> 方法</span></span>
<span class="line"><span style="color:#F8F8F2;">window.addEventListener </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> document.addEventListener </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> element.addEventListener</span></span>
<span class="line"><span style="color:#88846F;">// 将指定的监听器注册到 EventTarget 上，当该对象触发指定的事件时，指定的回调函数就会被执行</span></span>
<span class="line"><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;click&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FD971F;font-style:italic;">event</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(event) }, </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// useCapture默认为false，true为事件捕获时触发listener</span></span>
<span class="line"><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;click&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FD971F;font-style:italic;">event</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(event) }, {</span></span>
<span class="line"><span style="color:#F8F8F2;">    capture: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">,                  </span><span style="color:#88846F;">// true表示事件捕获时触发listener</span></span>
<span class="line"><span style="color:#F8F8F2;">    once: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">,                     </span><span style="color:#88846F;">// true表示只调用一次listener</span></span>
<span class="line"><span style="color:#F8F8F2;">    passive: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">,                  </span><span style="color:#88846F;">// true表示listener永远不会调用preventDefault()，浏览器会执行默认操作</span></span>
<span class="line"><span style="color:#F8F8F2;">    signal: </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">AbortController</span><span style="color:#F8F8F2;">(),  </span><span style="color:#88846F;">// AbortController.abort()方法被调用时，监听器会被移除</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#A6E22E;">removeEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;click&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FD971F;font-style:italic;">event</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(event) }, </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// 删除使用的addEventListener方法添加的事件</span></span>
<span class="line"><span style="color:#F8F8F2;">document.</span><span style="color:#A6E22E;">open</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;text/html&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;replace&#39;</span><span style="color:#F8F8F2;">)</span><span style="color:#88846F;">// 打开一个流，接收document.write()，输出流展示内容</span></span>
<span class="line"><span style="color:#F8F8F2;">document.</span><span style="color:#A6E22E;">close</span><span style="color:#F8F8F2;">()                    </span><span style="color:#88846F;">// 关闭一个打开的流，并显示数据</span></span>
<span class="line"><span style="color:#F8F8F2;">document.</span><span style="color:#A6E22E;">elementFromPoint</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)      </span><span style="color:#88846F;">// 方法返回给定坐标点下最上层的 element 元素</span></span>
<span class="line highlighted"><wbr></span>
<span class="line"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> HTML </span><span style="color:#A6E22E;">Collection</span><span style="color:#F8F8F2;">(HTML元素的集合，类似于数组列表)</span></span>
<span class="line"><span style="color:#F8F8F2;">document.</span><span style="color:#A6E22E;">getElementsByTagName</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;p&quot;</span><span style="color:#F8F8F2;">).length               </span><span style="color:#88846F;">// 返回子元素的数目</span></span>
<span class="line"><span style="color:#F8F8F2;">document.</span><span style="color:#A6E22E;">getElementsByTagName</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;p&quot;</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">item</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">12</span><span style="color:#F8F8F2;">)             </span><span style="color:#88846F;">// 返回元素集合指定索引的元素</span></span>
<span class="line"><span style="color:#F8F8F2;">document.</span><span style="color:#A6E22E;">getElementsByTagName</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;p&quot;</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">namedItem</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;license&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// 返回元素集合指定ID的元素</span></span>
<span class="line"><span style="color:#F8F8F2;">for</span><span style="color:#F92672;">...in</span><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 可以迭代获取元素，需要通过hasOwnProperty区分是否是自身的属性</span></span>
<span class="line"><span style="color:#F8F8F2;">for</span><span style="color:#F92672;">...of</span><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 可以迭代获取元素</span></span>
<span class="line highlighted"><wbr></span>
<span class="line"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">NodeList</span><span style="color:#F8F8F2;">(节点集合，类似于元素的节点集合)</span></span>
<span class="line"><span style="color:#88846F;">/* Node.childNodes、document.querySelectorAll 返回的节点集合 */</span></span>
<span class="line"><span style="color:#F8F8F2;">document.</span><span style="color:#A6E22E;">getElementsByName</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;up&quot;</span><span style="color:#F8F8F2;">).length                 </span><span style="color:#88846F;">// 返回节点数量</span></span>
<span class="line"><span style="color:#F8F8F2;">document.</span><span style="color:#A6E22E;">getElementsByName</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;up&quot;</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">item</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">12</span><span style="color:#F8F8F2;">)               </span><span style="color:#88846F;">// 返回节点集合指定索引的元素</span></span>
<span class="line"><span style="color:#F8F8F2;">document.</span><span style="color:#A6E22E;">getElementsByName</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;up&quot;</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">entries</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">document.</span><span style="color:#A6E22E;">getElementsByName</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;up&quot;</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">forEach</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">document.</span><span style="color:#A6E22E;">getElementsByName</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;up&quot;</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">keys</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">document.</span><span style="color:#A6E22E;">getElementsByName</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;up&quot;</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">values</span><span style="color:#F8F8F2;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br></div></div><h2 id="document-mutationobserver" tabindex="-1">Document MutationObserver <a class="header-anchor" href="#document-mutationobserver" aria-label="Permalink to &quot;Document MutationObserver&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">DOM 变动观察器</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">监视对 DOM 树所做更改的能力；观察DOM元素，在其发生更改时触发回调</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 选择需要观察变动的节点</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> targetNode </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#A6E22E;">getElementById</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;some-id&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">    观察器的配置 (需要观察什么变动) </span></span>
<span class="line"><span style="color:#88846F;">    childList: Boolean (node的直接子节点的更改做出反应)</span></span>
<span class="line"><span style="color:#88846F;">    subtree: Boolean (node的所有后代的更改做出反应)</span></span>
<span class="line"><span style="color:#88846F;">    attributes: Boolean (node的特性的更改做出反应)</span></span>
<span class="line"><span style="color:#88846F;">    attributeFilter: Boolean (特性名称数组，只观察选定的特性)</span></span>
<span class="line"><span style="color:#88846F;">    characterData: Boolean (是否观察node.data (文本内容的更改))</span></span>
<span class="line"><span style="color:#88846F;">    characterDataOldValue: Boolean (将旧的数据传递给回调: oldValue)</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> config </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> { attributes: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">, childList: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">, subtree: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#88846F;">// 当观察到变动时执行的回调函数</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">callback</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">mutationsList</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">observer</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// Use traditional &#39;for loops&#39; for IE 11</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> mutation </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> mutationsList) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (mutation.type </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;childList&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">            console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;A child node has been added or removed.&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (mutation.type </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;attributes&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">            console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;The &#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> mutation.attributeName </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39; attribute was modified.&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#88846F;">// 创建一个观察器实例并传入回调函数</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> observer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">MutationObserver</span><span style="color:#F8F8F2;">(callback);</span></span>
<span class="line"><span style="color:#88846F;">// 以上述配置开始观察目标节点</span></span>
<span class="line"><span style="color:#F8F8F2;">observer.</span><span style="color:#A6E22E;">observe</span><span style="color:#F8F8F2;">(targetNode, config);</span></span>
<span class="line"><span style="color:#88846F;">// 之后，可停止观察</span></span>
<span class="line"><span style="color:#F8F8F2;">observer.</span><span style="color:#A6E22E;">disconnect</span><span style="color:#F8F8F2;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div></div><h2 id="element" tabindex="-1">Element <a class="header-anchor" href="#element" aria-label="Permalink to &quot;Element&quot;">​</a></h2><div><p><code>表示一个元素，所有 Document 对象下的对象都继承自它，可以通过 Element 对象操作 HTML 元素的相关属性。</code></p></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> 元素属性</span></span>
<span class="line"><span style="color:#F8F8F2;">element.id                          </span><span style="color:#88846F;">// 设置或返回元素的id</span></span>
<span class="line"><span style="color:#F8F8F2;">element.tagName                     </span><span style="color:#88846F;">// 返回元素的标签名 BUTTON</span></span>
<span class="line"><span style="color:#F8F8F2;">element.accesskey </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;g&quot;</span><span style="color:#F8F8F2;">             </span><span style="color:#88846F;">// alt+g 可以将焦点跳转到这个元素上</span></span>
<span class="line"><span style="color:#F8F8F2;">element.attributes                  </span><span style="color:#88846F;">// 返回返回元素属性的集合 NamedNodeMap</span></span>
<span class="line"><span style="color:#F8F8F2;">element.childNodes                  </span><span style="color:#88846F;">// 返回元素的子节点的集合 NodeList</span></span>
<span class="line"><span style="color:#F8F8F2;">element.children                    </span><span style="color:#88846F;">// 返回元素的子元素集合 HTMLCollection</span></span>
<span class="line"><span style="color:#F8F8F2;">element.className                   </span><span style="color:#88846F;">// 设置或返回元素的class属性名 &#39;class1 class2&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">element.classList                   </span><span style="color:#88846F;">// 返回一个元素 class 属性的动态 DOMTokenList 集合。这可以用于操作 class 集合。</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#AE81FF;">1.</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;class&#39;</span><span style="color:#F8F8F2;">)                 </span><span style="color:#88846F;">// 添加class属性类名</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#AE81FF;">2.</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">contains</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;class&#39;</span><span style="color:#F8F8F2;">)            </span><span style="color:#88846F;">// 判断指定类名是否存在</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#AE81FF;">3.</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">remove</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;class&#39;</span><span style="color:#F8F8F2;">)              </span><span style="color:#88846F;">// 移除class属性类名</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#AE81FF;">4.</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">toggle</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;class&#39;</span><span style="color:#F8F8F2;">)              </span><span style="color:#88846F;">// 在元素中切换添加类名 add和remove</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">element.firstChild                  </span><span style="color:#88846F;">// 返回元素的第一个子节点，无则返回 null</span></span>
<span class="line"><span style="color:#F8F8F2;">element.firstElementChild           </span><span style="color:#88846F;">// 返回元素的第一个子元素，无则返回 null</span></span>
<span class="line"><span style="color:#F8F8F2;">element.lastChild                   </span><span style="color:#88846F;">// 返回元素的最后一个子节点，无则返回 null</span></span>
<span class="line"><span style="color:#F8F8F2;">element.lastElementChild            </span><span style="color:#88846F;">// 返回元素的最后一个子元素，无则返回 null</span></span>
<span class="line"><span style="color:#F8F8F2;">element.nextSibling                 </span><span style="color:#88846F;">// 返回其父节点的 childNodes 列表中紧跟在其后面的节点 (包括元素、文本节点，注释节点)</span></span>
<span class="line"><span style="color:#F8F8F2;">element.nextElementSibling          </span><span style="color:#88846F;">// 返回当前元素在其父元素的子元素节点中的后一个元素节点 (包括元素)</span></span>
<span class="line"><span style="color:#F8F8F2;">element.previousSibling             </span><span style="color:#88846F;">// 返回其父节点的 childNodes 列表中前一个兄弟节点 (包括元素、文本节点，注释节点)</span></span>
<span class="line"><span style="color:#F8F8F2;">element.previousElementSibling      </span><span style="color:#88846F;">// 返回当前元素在其父元素的子元素节点中的前一个元素节点 (包括元素)</span></span>
<span class="line"><span style="color:#F8F8F2;">element.parentNode                  </span><span style="color:#88846F;">// 返回指定的节点在 DOM 树中的父节点</span></span>
<span class="line"><span style="color:#F8F8F2;">element.parentElement               </span><span style="color:#88846F;">// 返回指定的节点在 DOM 树中的父元素节点</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">element.contentEditable             </span><span style="color:#88846F;">// 设置或返回元素是否可被用户编辑</span></span>
<span class="line"><span style="color:#F8F8F2;">element.innerHTML                   </span><span style="color:#88846F;">// 设置或返回 HTML 语法表示的元素的后代 (可以解析标签)</span></span>
<span class="line"><span style="color:#F8F8F2;">element.innerText                   </span><span style="color:#88846F;">// 设置或返回元素的内部的文本</span></span>
<span class="line"><span style="color:#F8F8F2;">element.title                       </span><span style="color:#88846F;">// 设置或返回元素的title</span></span>
<span class="line"><span style="color:#F8F8F2;">element.style                       </span><span style="color:#88846F;">// 设置或返回元素的css样式声明</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">element.nodeName                    </span><span style="color:#88846F;">// 返回当前节点的节点名称 DIV</span></span>
<span class="line"><span style="color:#F8F8F2;">element.nodeType                    </span><span style="color:#88846F;">// 返回当前节点的节点类型 1 (1: 元素节点、2: 属性节点、3: 文本节点、8: 注释节点)</span></span>
<span class="line"><span style="color:#F8F8F2;">element.nodeValue                   </span><span style="color:#88846F;">// 返回或设置当前节点的值</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> 元素方法</span></span>
<span class="line"><span style="color:#F8F8F2;">element.</span><span style="color:#A6E22E;">appendChild</span><span style="color:#F8F8F2;">(node)           </span><span style="color:#88846F;">// 在 Node 节点的最后一个子节点插入 Node 对象</span></span>
<span class="line"><span style="color:#F8F8F2;">element.</span><span style="color:#A6E22E;">append</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">node)             </span><span style="color:#88846F;">// 在 Element 的最后一个子节点之后插入一组 Node 对象或 DOMString 对象</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#AE81FF;">1.</span><span style="color:#F8F8F2;"> Element.</span><span style="color:#A6E22E;">append</span><span style="color:#F8F8F2;">() 允许追加 DOMString 对象，而 Node.</span><span style="color:#A6E22E;">appendChild</span><span style="color:#F8F8F2;">() 只接受 Node 对象。</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#AE81FF;">2.</span><span style="color:#F8F8F2;"> Element.</span><span style="color:#A6E22E;">append</span><span style="color:#F8F8F2;">() 没有返回值，而 Node.</span><span style="color:#A6E22E;">appendChild</span><span style="color:#F8F8F2;">() 返回追加的 Node 对象。</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#AE81FF;">3.</span><span style="color:#F8F8F2;"> Element.</span><span style="color:#A6E22E;">append</span><span style="color:#F8F8F2;">() 可以追加多个节点和字符串，而 Node.</span><span style="color:#A6E22E;">appendChild</span><span style="color:#F8F8F2;">() 只能追加一个节点。</span></span>
<span class="line"><span style="color:#F8F8F2;">parentElement.</span><span style="color:#A6E22E;">insertBefore</span><span style="color:#F8F8F2;">(newNode, referenceChildNode)    </span><span style="color:#88846F;">// 在参考节点之前插入一个拥有指定父节点的子节点</span></span>
<span class="line"><span style="color:#F8F8F2;">element.</span><span style="color:#A6E22E;">removeChild</span><span style="color:#F8F8F2;">(node)           </span><span style="color:#88846F;">// 从 DOM 中删除一个子节点。返回删除的节点</span></span>
<span class="line"><span style="color:#F8F8F2;">parentElement.</span><span style="color:#A6E22E;">replaceChild</span><span style="color:#F8F8F2;">(newChild, oldChild)  </span><span style="color:#88846F;">// 将指定的节点替换当前节点的一个子节点</span></span>
<span class="line"><span style="color:#F8F8F2;">element.</span><span style="color:#A6E22E;">cloneNode</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">||</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">)    </span><span style="color:#88846F;">// 返回克隆节点的一个副本，可选择是否采用深度克隆</span></span>
<span class="line"><span style="color:#F8F8F2;">element.</span><span style="color:#A6E22E;">isEqualNode</span><span style="color:#F8F8F2;">(element)        </span><span style="color:#88846F;">// 判断两个节点是否相等</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">element.</span><span style="color:#A6E22E;">getAttribute</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;id&#39;</span><span style="color:#F8F8F2;">)          </span><span style="color:#88846F;">// 返回元素指定的属性值 &#39;title&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">element.</span><span style="color:#A6E22E;">getAttributeNode</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;id&#39;</span><span style="color:#F8F8F2;">)      </span><span style="color:#88846F;">// 返回元素指定的属性节点 id=title</span></span>
<span class="line"><span style="color:#F8F8F2;">element.</span><span style="color:#A6E22E;">setAttribute</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;id&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;value&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// 设置指定元素上的某个属性值</span></span>
<span class="line"><span style="color:#F8F8F2;">element.</span><span style="color:#A6E22E;">setAttributeNode</span><span style="color:#F8F8F2;">()          </span><span style="color:#88846F;">// 设置指定元素上的某个属性节点，需要显示克隆后使用</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#AE81FF;">1.</span><span style="color:#F8F8F2;"> element.</span><span style="color:#A6E22E;">setAttributeNode</span><span style="color:#F8F8F2;">(element.</span><span style="color:#A6E22E;">getAttributeNode</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;id&#39;</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">cloneNode</span><span style="color:#F8F8F2;">())</span></span>
<span class="line"><span style="color:#F8F8F2;">element.</span><span style="color:#A6E22E;">hasAttribute</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;id&#39;</span><span style="color:#F8F8F2;">)          </span><span style="color:#88846F;">// 返回元素是否包含有指定的属性 true</span></span>
<span class="line"><span style="color:#F8F8F2;">element.</span><span style="color:#A6E22E;">hasAttributes</span><span style="color:#F8F8F2;">()             </span><span style="color:#88846F;">// 返回当前元素节点是否有至少一个的属性 true</span></span>
<span class="line"><span style="color:#F8F8F2;">element.</span><span style="color:#A6E22E;">hasChildNodes</span><span style="color:#F8F8F2;">()             </span><span style="color:#88846F;">// 返回当前节点是否包含有子节点 true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">element.</span><span style="color:#A6E22E;">focus</span><span style="color:#F8F8F2;">()                     </span><span style="color:#88846F;">// 设置焦点</span></span>
<span class="line"><span style="color:#F8F8F2;">element.</span><span style="color:#A6E22E;">blur</span><span style="color:#F8F8F2;">()                      </span><span style="color:#88846F;">// 设置失去焦点</span></span>
<span class="line"><span style="color:#F8F8F2;">element.</span><span style="color:#A6E22E;">hasFocus</span><span style="color:#F8F8F2;">()                  </span><span style="color:#88846F;">// 设置失去焦点</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> 元素容器参数</span></span>
<span class="line"><span style="color:#F8F8F2;">element.clientHeight                </span><span style="color:#88846F;">// 返回元素内容的viewport可视height (包括padding，不包括border、margin及滚动条)</span></span>
<span class="line"><span style="color:#F8F8F2;">element.clientWidth                 </span><span style="color:#88846F;">// 返回元素内容的viewport可视width (包括padding，不包括border、margin及滚动条)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">element.scrollHeight                </span><span style="color:#88846F;">// 返回元素的height (包括滚动条以及隐蔽的地方)</span></span>
<span class="line"><span style="color:#F8F8F2;">element.scrollWidth                 </span><span style="color:#88846F;">// 返回元素的width (包括滚动条以及隐蔽的地方)</span></span>
<span class="line"><span style="color:#F8F8F2;">element.scrollTop                   </span><span style="color:#88846F;">// 设置或返回元素的滚动条到元素顶部的距离 (滚动距离元素顶部的像素值)</span></span>
<span class="line"><span style="color:#F8F8F2;">element.scrollLeft                  </span><span style="color:#88846F;">// 设置或返回元素的滚动条到元素左边的距离 (滚动距离元素左边的像素值)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">element.offsetHeight                </span><span style="color:#88846F;">// 返回元素的height (包括padding，border、不包括margin)</span></span>
<span class="line"><span style="color:#F8F8F2;">element.offsetWidth                 </span><span style="color:#88846F;">// 返回元素的width (包括padding，border、不包括margin)</span></span>
<span class="line"><span style="color:#F8F8F2;">element.offsetTop                   </span><span style="color:#88846F;">// 返回当前元素相对于其 offsetParent 元素的上边的距离（父级元素设置position，则返回与父级元素的距离）</span></span>
<span class="line"><span style="color:#F8F8F2;">element.offsetLeft                  </span><span style="color:#88846F;">// 返回当前元素相对于其 offsetParent 元素的左边的距离（父级元素设置position，则返回与父级元素的距离）</span></span>
<span class="line"><span style="color:#F8F8F2;">element.offsetParent                </span><span style="color:#88846F;">// 返回指向最近的包含该元素的定位元素 (position) 或者最近的 table, td, th, body 元素</span></span>
<span class="line"><span style="color:#F8F8F2;">element.</span><span style="color:#A6E22E;">getBoundingClientRect</span><span style="color:#F8F8F2;">()     </span><span style="color:#88846F;">// 返回元素的大小及其相对于视口(viewport)的位置</span></span>
<span class="line"><span style="color:#F8F8F2;">    width                           </span><span style="color:#88846F;">// 返回元素的height (包括padding，border、不包括margin)</span></span>
<span class="line"><span style="color:#F8F8F2;">    height                          </span><span style="color:#88846F;">// 返回元素的width (包括padding，border、不包括margin)</span></span>
<span class="line"><span style="color:#F8F8F2;">    top </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> y                         </span><span style="color:#88846F;">// 返回元素上边距viewport上边的距离</span></span>
<span class="line"><span style="color:#F8F8F2;">    left </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> x                        </span><span style="color:#88846F;">// 返回元素左边距viewport左边的距离</span></span>
<span class="line"><span style="color:#F8F8F2;">    right                           </span><span style="color:#88846F;">// 返回元素右边距viewport左边的距离</span></span>
<span class="line"><span style="color:#F8F8F2;">    bottom                          </span><span style="color:#88846F;">// 返回元素下边距viewport上边的距离</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br></div></div><h2 id="event" tabindex="-1">Event <a class="header-anchor" href="#event" aria-label="Permalink to &quot;Event&quot;">​</a></h2><div><p><code>Event 接口表示在 DOM 中出现的事件。</code><br><code>由系统自动触发或者用户操作触发</code></p></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> DOM事件允许JavaScript在HTML文档中注册不同事件处理程序，事件通常与函数结合使用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E;">事件捕获</span><span style="color:#F8F8F2;">(event capture): 先检查html元素是否注册相同事件，如果是则运行，然后向内继续检测下一层元素，直到到达实际点击元素</span></span>
<span class="line"><span style="color:#A6E22E;">事件冒泡</span><span style="color:#F8F8F2;">(event bubble): 先检测点击元素是否注册相同事件，如果是则运行，然后向外继续检测下一层元素，直到到达html元素</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> 鼠标事件</span></span>
<span class="line"><span style="color:#F8F8F2;">onclick: </span><span style="color:#A6E22E;">鼠标点击单击触发</span><span style="color:#F8F8F2;"> (单击)</span></span>
<span class="line"><span style="color:#F8F8F2;">oncontextmenu: </span><span style="color:#A6E22E;">鼠标右键打开菜单时触发</span><span style="color:#F8F8F2;"> (右击)</span></span>
<span class="line"><span style="color:#F8F8F2;">ondblclick: </span><span style="color:#A6E22E;">鼠标双击触发</span><span style="color:#F8F8F2;"> (双击)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">onmousemove: </span><span style="color:#A6E22E;">鼠标移动时触发</span><span style="color:#F8F8F2;"> (移动时触发)</span></span>
<span class="line"><span style="color:#F8F8F2;">onmousedown: </span><span style="color:#A6E22E;">鼠标被按下</span><span style="color:#F8F8F2;"> (点击按下)</span></span>
<span class="line"><span style="color:#F8F8F2;">onmouseup: </span><span style="color:#A6E22E;">鼠标被松开</span><span style="color:#F8F8F2;"> (点击松开)</span></span>
<span class="line"><span style="color:#F8F8F2;">onmouseenter: </span><span style="color:#A6E22E;">鼠标移动到元素上时触发</span><span style="color:#F8F8F2;"> (鼠标移入)</span></span>
<span class="line"><span style="color:#F8F8F2;">onmouseleave: </span><span style="color:#A6E22E;">鼠标移出元素时触发</span><span style="color:#F8F8F2;"> (鼠标移出)</span></span>
<span class="line"><span style="color:#F8F8F2;">onmouseover: </span><span style="color:#A6E22E;">鼠标移动到元素上时触发</span><span style="color:#F8F8F2;"> (鼠标移入，当有子元素覆盖时，当从父元素移入子元素，会冒泡触发它的父元素事件)</span></span>
<span class="line"><span style="color:#F8F8F2;">onmouseout: </span><span style="color:#A6E22E;">鼠标移出某元素</span><span style="color:#F8F8F2;"> (鼠标移出，子元素移入父元素时，会触发事件冒泡)</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> 键盘事件</span></span>
<span class="line"><span style="color:#F8F8F2;">onkeydown: 键盘按键被按下时</span></span>
<span class="line"><span style="color:#F8F8F2;">onkeypress: 键盘按键被按下并松开</span></span>
<span class="line"><span style="color:#F8F8F2;">onkeyup: 键盘按键被松开</span></span>
<span class="line"><span style="color:#F8F8F2;">altKey: 表示事件触发时 alt </span><span style="color:#A6E22E;">键</span><span style="color:#F8F8F2;"> (OS X 系统上的 Option 或 ⌥ 键) </span><span style="color:#A6E22E;">是</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">) </span><span style="color:#A6E22E;">否</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;">) 被按下</span></span>
<span class="line"><span style="color:#F8F8F2;">ctrlKey: 表示事件触发时 control </span><span style="color:#A6E22E;">键是</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">) </span><span style="color:#A6E22E;">否</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;">) 按下</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> 框架事件</span></span>
<span class="line"><span style="color:#F8F8F2;">onDOMContentLoaded: 页面已经完全加载了HTML，DOM树已经构建完毕，不需要等待 </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;">img</span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> 和样式表等外部资源的加载</span></span>
<span class="line"><span style="color:#F8F8F2;">onload: 页面加载完毕，外部资源已完成，样式已被应用，</span><span style="color:#A6E22E;">图片大小也已知</span><span style="color:#F8F8F2;"> (页面第一次加载时触发)</span></span>
<span class="line"><span style="color:#F8F8F2;">onbeforeunload: </span><span style="color:#A6E22E;">在即将离开页面</span><span style="color:#F8F8F2;"> (刷新或关闭)时触发</span></span>
<span class="line"><span style="color:#F8F8F2;">onunload: 用户退出页面时，当文档或一个子资源正在被卸载时</span></span>
<span class="line"><span style="color:#F8F8F2;">    这里提一下 </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;">script async</span><span style="color:#F92672;">&gt;&lt;/</span><span style="color:#F8F8F2;">script</span><span style="color:#F92672;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    async: 立即下载脚本，异步加载脚本，下载完就加载，渲染引擎就会中断渲染，执行这个脚本以后，再继续渲染</span></span>
<span class="line"><span style="color:#F8F8F2;">    defer: 立即下载脚本，异步加载脚本，下载完脚本延迟到文档完全解析后加载，DomContentLoaded 事件触发之前完成</span></span>
<span class="line"><span style="color:#F8F8F2;">    另外，如果有多个defer脚本，会按照它们在页面出现的顺序加载，而多个async脚本是不能保证加载顺序的</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">onpageshow: </span><span style="color:#A6E22E;">在用户进入网页时触发</span><span style="color:#F8F8F2;"> (页面每次加载都会触发)</span></span>
<span class="line"><span style="color:#F8F8F2;">onpagehide: </span><span style="color:#A6E22E;">在用户离开网页时触发</span><span style="color:#F8F8F2;"> (返回上一页或下一页)</span></span>
<span class="line"><span style="color:#F8F8F2;">onerror: 在加载文档或图像出错时触发</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">onhashchange: </span><span style="color:#A6E22E;">当URL锚发生修改时触发</span><span style="color:#F8F8F2;"> (location.hash或href修改锚触发)</span></span>
<span class="line"><span style="color:#F8F8F2;">onresize: </span><span style="color:#A6E22E;">当窗口或框架被重新调整大小时触发</span><span style="color:#F8F8F2;">(可以应用到移动端)</span></span>
<span class="line"><span style="color:#F8F8F2;">onscroll: 当页面滚动时触发</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> 表单事件</span></span>
<span class="line"><span style="color:#F8F8F2;">onblur: 当元素失去焦点</span></span>
<span class="line"><span style="color:#F8F8F2;">onfocus: 当元素获取焦点</span></span>
<span class="line"><span style="color:#F8F8F2;">onfocusin: 当元素即将获取焦点时</span></span>
<span class="line"><span style="color:#F8F8F2;">onfocusout: 当元素即将失去焦点时</span></span>
<span class="line"><span style="color:#F8F8F2;">onchange: 当表单元素发生改变时</span></span>
<span class="line"><span style="color:#F8F8F2;">oninput: 当用户输入时触发</span></span>
<span class="line"><span style="color:#F8F8F2;">onsearch: </span><span style="color:#A6E22E;">当用户对文本框进行搜索时</span><span style="color:#F8F8F2;"> (type</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;search&quot;</span><span style="color:#F8F8F2;">: enter</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">回车键)</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">onselect: </span><span style="color:#A6E22E;">当用户选取文本时</span><span style="color:#F8F8F2;"> (双击选中value时触发)</span></span>
<span class="line"><span style="color:#F8F8F2;">onreset: </span><span style="color:#A6E22E;">表单重置时触发</span><span style="color:#F8F8F2;"> (type</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">“reset”: 表单重置触发)</span></span>
<span class="line"><span style="color:#F8F8F2;">onsubmit: </span><span style="color:#A6E22E;">表单提交时触发</span><span style="color:#F8F8F2;"> (type</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">“submit”: 表单提交触发)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> 剪贴板事件</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">oncopy: 用户拷贝元素内容时</span></span>
<span class="line"><span style="color:#F8F8F2;">oncut: 用户前剪切元素内容时</span></span>
<span class="line"><span style="color:#F8F8F2;">onpaste: 用户粘贴元素内容时</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> 打印事件</span></span>
<span class="line"><span style="color:#F8F8F2;">onbeforeprint: 页面即将打印时触发</span></span>
<span class="line"><span style="color:#F8F8F2;">onafterprint: 页面已经开始打印，或者打印窗口已经关闭时触发</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> 拖拽事件</span></span>
<span class="line"><span style="color:#F8F8F2;">ondragstart: </span><span style="color:#A6E22E;">元素开始拖动时</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">ondrag: </span><span style="color:#A6E22E;">元素正在拖动时</span><span style="color:#F8F8F2;">      (</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">ondragend: </span><span style="color:#A6E22E;">元素完成拖动时</span><span style="color:#F8F8F2;">   (</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">ondragenter: </span><span style="color:#A6E22E;">拖动元素进入放置目标时</span><span style="color:#F8F8F2;"> (进入区域时) (</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">ondragover: </span><span style="color:#A6E22E;">拖动元素在放置目标时</span><span style="color:#F8F8F2;"> (在区域时)      (</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">ondragleave: </span><span style="color:#A6E22E;">拖动元素离开放置目标时</span><span style="color:#F8F8F2;"> (离开区域时) (</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">ondrop: </span><span style="color:#A6E22E;">拖动元素放置在目标时</span><span style="color:#F8F8F2;"> (放下元素时)        (</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">属性: draggable</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;false&quot;</span><span style="color:#F8F8F2;"> (元素不可拖动)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">多媒体</span><span style="color:#F8F8F2;">(Media)</span><span style="color:#A6E22E;">事件</span><span style="color:#F8F8F2;">(video</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">audio)</span></span>
<span class="line"><span style="color:#F8F8F2;">onemptied: </span><span style="color:#A6E22E;">播放列表为空时</span><span style="color:#F8F8F2;"> (warn)</span></span>
<span class="line"><span style="color:#F8F8F2;">onerror: </span><span style="color:#A6E22E;">加载期间发生错误时</span><span style="color:#F8F8F2;"> (error)</span></span>
<span class="line"><span style="color:#F8F8F2;">onabort: </span><span style="color:#A6E22E;">视频数据终止加载时</span><span style="color:#F8F8F2;"> (error)</span></span>
<span class="line"><span style="color:#F8F8F2;">onsuspend: </span><span style="color:#A6E22E;">浏览器读取媒体数据终止时</span><span style="color:#F8F8F2;"> (error)</span></span>
<span class="line"><span style="color:#F8F8F2;">onstalled: 浏览器获取媒体数据，</span><span style="color:#A6E22E;">但媒体数据不可用时</span><span style="color:#F8F8F2;"> (error)</span></span>
<span class="line"><span style="color:#F8F8F2;">onloadstart: </span><span style="color:#A6E22E;">浏览器开始寻找指定视频时</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">ondurationchange: </span><span style="color:#A6E22E;">视屏时长发生变化时</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">onloadedmetadata: </span><span style="color:#A6E22E;">视频的元数据加载后触发</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">onloadeddata: </span><span style="color:#A6E22E;">浏览器加载视频当前帧时触发</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">onprogress: </span><span style="color:#A6E22E;">在浏览器下载指定的视频时</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">oncanplay: </span><span style="color:#A6E22E;">视频可以开始播放时</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">oncanplaythrough: </span><span style="color:#A6E22E;">视频可以正常播放且无需停顿和缓冲时</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">onplay: </span><span style="color:#A6E22E;">视频开始播放时</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">onpause: </span><span style="color:#A6E22E;">视频暂停时触发</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">onplaying: </span><span style="color:#A6E22E;">视频暂停播放或缓冲后准备重新开始播放时触发</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">onratechange: </span><span style="color:#A6E22E;">视频播放速度发生改变时</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">onseeking: </span><span style="color:#A6E22E;">用户重新定位视频位置时触发</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">onseeked: </span><span style="color:#A6E22E;">用户重新定位视频位置后触发</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">ontimeupdate: </span><span style="color:#A6E22E;">当前播放位置发生改变时</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">onwaiting: </span><span style="color:#A6E22E;">视频播放下一帧需要缓冲时触发</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">onvolumechange: </span><span style="color:#A6E22E;">音量发生改变时</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">onended: </span><span style="color:#A6E22E;">播放结束时</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">动画事件</span><span style="color:#F8F8F2;"> (animation属性触发的事件)</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">animationstart: CSS动画开始播放时</span></span>
<span class="line"><span style="color:#F8F8F2;">animationend: CSS动画结束播放时</span></span>
<span class="line"><span style="color:#F8F8F2;">animationiteration: CSS动画重复播放时触发</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">过渡事件</span><span style="color:#F8F8F2;"> (transtion属性触发的事件)</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">transitionrun: transition在创建时触发</span></span>
<span class="line"><span style="color:#F8F8F2;">transitionstart: transition动画实际开始时触发</span></span>
<span class="line"><span style="color:#F8F8F2;">transitionend: transition动画完成时触发</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> 其他事件</span></span>
<span class="line"><span style="color:#F8F8F2;">onmessage: </span><span style="color:#A6E22E;">从</span><span style="color:#F8F8F2;"> (websocket、worker) 接收消息时触发</span></span>
<span class="line"><span style="color:#F8F8F2;">ononline: 浏览器开始在线工作时</span></span>
<span class="line"><span style="color:#F8F8F2;">onoffline: 浏览器开始离线工作时</span></span>
<span class="line"><span style="color:#F8F8F2;">onpopstate: </span><span style="color:#A6E22E;">窗口的浏览历史</span><span style="color:#F8F8F2;"> (history对象) 发生改变时</span></span>
<span class="line"><span style="color:#F8F8F2;">onhashchange: </span><span style="color:#A6E22E;">监听页面</span><span style="color:#F8F8F2;"> (锚部分发生的变化)</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">onstorage: 在web </span><span style="color:#A6E22E;">storage</span><span style="color:#F8F8F2;"> (HTML </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;"> Web存储) 更新时</span></span>
<span class="line"><span style="color:#F8F8F2;">ontoggle: 用户打开或关闭</span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;">details</span><span style="color:#F92672;">&gt;</span><span style="color:#A6E22E;">元素时</span><span style="color:#F8F8F2;"> (&lt;</span><span style="color:#F92672;">summary</span><span style="color:#F8F8F2;">/&gt;元素为details标题)</span></span>
<span class="line"><span style="color:#F8F8F2;">onwheel: </span><span style="color:#A6E22E;">鼠标滚轮在元素上下滚动时</span><span style="color:#F8F8F2;"> (滚动滚轮时触发)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> 事件对象</span></span>
<span class="line"><span style="color:#F8F8F2;">event.bubbles: </span><span style="color:#A6E22E;">返回事件是否是起泡事件类型</span><span style="color:#F8F8F2;"> (Boolean)</span></span>
<span class="line"><span style="color:#F8F8F2;">event.cancelable: </span><span style="color:#A6E22E;">返回事件是否可以取消默认动作</span><span style="color:#F8F8F2;"> (Boolean)</span></span>
<span class="line"><span style="color:#F8F8F2;">event.currentTarget: </span><span style="color:#A6E22E;">返回事件监听器触发该事件的元素</span><span style="color:#F8F8F2;"> (element)</span></span>
<span class="line"><span style="color:#F8F8F2;">event.target: </span><span style="color:#A6E22E;">返回触发此事件的元素</span><span style="color:#F8F8F2;"> (事件目标节点)</span></span>
<span class="line"><span style="color:#F8F8F2;">event.timeStamp: </span><span style="color:#A6E22E;">返回事件生成的日期和时间</span><span style="color:#F8F8F2;"> (时间戳)</span></span>
<span class="line"><span style="color:#F8F8F2;">event.type: </span><span style="color:#A6E22E;">返回当前Event对象表示的事件名称</span><span style="color:#F8F8F2;"> (事件)</span></span>
<span class="line highlighted"><wbr></span>
<span class="line"><span style="color:#F8F8F2;">event.</span><span style="color:#A6E22E;">preventDefault</span><span style="color:#F8F8F2;">(): 通知浏览器不要执行与事件关联的默认动作</span></span>
<span class="line"><span style="color:#F8F8F2;">event.</span><span style="color:#A6E22E;">stopPropagation</span><span style="color:#F8F8F2;">(): 阻止捕获和冒泡阶段中当前事件的进一步传播</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> 复合事件</span></span>
<span class="line"><span style="color:#88846F;">// DOM3级事件，用于处理input等输出序列处理，针对input的event事件</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 当用户正在进行编辑文本，开始输入汉字时触发</span></span>
<span class="line"><span style="color:#F8F8F2;">input.</span><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;compositionstart&#39;</span><span style="color:#F8F8F2;">, ()</span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;">{})</span></span>
<span class="line"><span style="color:#88846F;">// 当用户正在插入新的字符时，正在插入字符时触发</span></span>
<span class="line"><span style="color:#F8F8F2;">input.</span><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;compositionupdate&#39;</span><span style="color:#F8F8F2;">, ()</span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;">{})</span></span>
<span class="line"><span style="color:#88846F;">// 当用户插入所有字符结束时调用，插入字符完成结束</span></span>
<span class="line"><span style="color:#F8F8F2;">input.</span><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;compositionend&#39;</span><span style="color:#F8F8F2;">, ()</span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;">{})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br></div></div><h2 id="event-custom" tabindex="-1">Event Custom <a class="header-anchor" href="#event-custom" aria-label="Permalink to &quot;Event Custom&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">addEventListener: </span><span style="color:#A6E22E;">目标事件注册监听事件</span><span style="color:#F8F8F2;"> (IE8 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> attachEvent)</span></span>
<span class="line"><span style="color:#F8F8F2;">removeEventListener: </span><span style="color:#A6E22E;">目标事件移除监听事件</span><span style="color:#F8F8F2;"> (IE8 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> detachEvent)</span></span>
<span class="line"><span style="color:#F8F8F2;">dispatchEvent: </span><span style="color:#A6E22E;">允许发送事件到监听器上</span><span style="color:#F8F8F2;"> (IE8 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> fireEvent)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 监听自定义事件</span></span>
<span class="line"><span style="color:#F8F8F2;">window.</span><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;customEvent&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">event</span><span style="color:#F8F8F2;">) {  </span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(event.name</span><span style="color:#F92672;">+</span><span style="color:#E6DB74;">&#39;，&#39;</span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;">event.message);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#88846F;">// 创建自定义Event事件</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> event </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#A6E22E;">createEvent</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;customEvent&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#88846F;">// 初始化事件</span></span>
<span class="line"><span style="color:#F8F8F2;">event.</span><span style="color:#A6E22E;">initEvent</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;customEvent&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#88846F;">/*  推荐以下写法</span></span>
<span class="line"><span style="color:#88846F;">var event = new CustomEvent(&quot;customEvent&quot;, {</span></span>
<span class="line"><span style="color:#88846F;">    detail: {</span></span>
<span class="line"><span style="color:#88846F;">        detailEvent: true</span></span>
<span class="line"><span style="color:#88846F;">    },</span></span>
<span class="line"><span style="color:#88846F;">    bubbles: true</span></span>
<span class="line"><span style="color:#88846F;">});</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"><span style="color:#88846F;">// 派发触发事件</span></span>
<span class="line"><span style="color:#F8F8F2;">event.name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;join&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">event.message </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;hello&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">window.</span><span style="color:#A6E22E;">dispatchEvent</span><span style="color:#F8F8F2;">(event);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// addEventListener指定对象，每当事件发生时，都会调用此方法handleEvent</span></span>
<span class="line"><span style="color:#88846F;">/*  1. this指向obj</span></span>
<span class="line"><span style="color:#88846F;">    1. 可动态改变handleEvent，不需要先remove再add</span></span>
<span class="line"><span style="color:#88846F;">    2. 不同事件可绑定同一对象，实现复用 </span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    name: </span><span style="color:#E6DB74;">&#39;foo&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">handleEvent</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">       </span><span style="color:#A6E22E;">alert</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;click name=&#39;</span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#F8F8F2;">document.body.</span><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;click&#39;</span><span style="color:#F8F8F2;">, obj, </span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><h2 id="event-mobile" tabindex="-1">Event Mobile <a class="header-anchor" href="#event-mobile" aria-label="Permalink to &quot;Event Mobile&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">移动设备触摸事件</span></span>
<span class="line"><span style="color:#88846F;">/*  点击时触发，⼿指点击屏幕时触发，即使有⼀个⼿指放在了屏幕上  */</span></span>
<span class="line"><span style="color:#F8F8F2;">element.</span><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;touchstart&#39;</span><span style="color:#F8F8F2;">,()</span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;">{})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">/*  ⼿指在屏幕滑动时触发，⼿指持续滑动屏幕触发  */</span></span>
<span class="line"><span style="color:#F8F8F2;">element.</span><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;touchmove&#39;</span><span style="color:#F8F8F2;">,()</span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;">{})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">/*  ⼿指在屏幕上松开时触发，点击后松开时触发  */</span></span>
<span class="line"><span style="color:#F8F8F2;">element.</span><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;touchend&#39;</span><span style="color:#F8F8F2;">,()</span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;">{})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">/*  系统停⽌对 touch触摸的跟踪时触发，触发时间，暂⽆  */</span></span>
<span class="line"><span style="color:#F8F8F2;">element.</span><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;touchcancel&#39;</span><span style="color:#F8F8F2;">,()</span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;">{})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 以上包含跟踪触摸的属性</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">    touches: 当前跟踪的触摸操作touch对象数组</span></span>
<span class="line"><span style="color:#88846F;">    targetTouches: 特定与事件目标的touch对象数组</span></span>
<span class="line"><span style="color:#88846F;">    changedTouches: </span></span>
<span class="line"><span style="color:#88846F;">        如果设置了touchmove取消默认事件（阻止页面滚动），上面两个属性将没有数组，因为上面的属性跟踪不到touchmove的混动事件</span></span>
<span class="line"><span style="color:#88846F;">        至上次触摸以来发生改变后的touch对象数组</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"><span style="color:#88846F;">// 以上包含的属性为下⾯ touch包含的属性</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">    clientX,clientY:    触摸目标在视口中的x，y坐标</span></span>
<span class="line"><span style="color:#88846F;">    pageX,pageY:        触摸目标在页面中的x，y坐标</span></span>
<span class="line"><span style="color:#88846F;">    screenX,screenY:    触摸目标在屏幕中x，y坐标</span></span>
<span class="line"><span style="color:#88846F;">    target:             触摸的dom节点目标</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 阻⽌⻚⾯滚动</span></span>
<span class="line"><span style="color:#F8F8F2;">document.</span><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;touchmove&#39;</span><span style="color:#F8F8F2;">,(</span><span style="color:#FD971F;font-style:italic;">e</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    e.</span><span style="color:#A6E22E;">preventDefault</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">},{</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 不设置 passive: false，会报错，将不会阻⽌⻚⾯滚动</span></span>
<span class="line"><span style="color:#F8F8F2;">    passive: </span><span style="color:#AE81FF;">false</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">or</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">body {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 作⽤是对触摸屏用户如何操纵元素的区域(例如，浏览器内置的缩放功能,滚动功能)</span></span>
<span class="line"><span style="color:#F8F8F2;">    touch</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">action: none;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><h3 id="移动设备其它事件" tabindex="-1">移动设备其它事件 <a class="header-anchor" href="#移动设备其它事件" aria-label="Permalink to &quot;移动设备其它事件&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 移动设备⽅向改变触发事件</span></span>
<span class="line"><span style="color:#F8F8F2;">window.</span><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;orientationchange&quot;</span><span style="color:#F8F8F2;">,()</span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">--</span><span style="color:#F8F8F2;"> 垂直放置</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#AE81FF;">90</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">--</span><span style="color:#F8F8F2;"> 向左转 </span><span style="color:#AE81FF;">90</span><span style="color:#F8F8F2;">°</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">90</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">--</span><span style="color:#F8F8F2;"> 向右转 </span><span style="color:#AE81FF;">90</span><span style="color:#F8F8F2;">°</span></span>
<span class="line"><span style="color:#F8F8F2;">    screen.orientation.angle   </span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 移动设备旋转度数</span></span>
<span class="line"><span style="color:#F8F8F2;">window.</span><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;deviceorientation&quot;</span><span style="color:#F8F8F2;">,(</span><span style="color:#FD971F;font-style:italic;">event</span><span style="color:#F8F8F2;">)</span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    event.beta: 围绕 x轴转动（ </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">180</span><span style="color:#F92672;">~</span><span style="color:#AE81FF;">180</span><span style="color:#F8F8F2;">）</span></span>
<span class="line"><span style="color:#F8F8F2;">    event.gamma: 围绕 y轴转动（ </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">90</span><span style="color:#F92672;">~</span><span style="color:#AE81FF;">90</span><span style="color:#F8F8F2;">）</span></span>
<span class="line"><span style="color:#F8F8F2;">    event.alpha: 围绕 z轴转动（跟地⼼连成⼀条线，背对为正，指向地⼼的⽅向为负）</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 响应设备的加速度（移动和旋转加速度）</span></span>
<span class="line"><span style="color:#F8F8F2;">window.</span><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;devicemotion&quot;</span><span style="color:#F8F8F2;">,(</span><span style="color:#FD971F;font-style:italic;">event</span><span style="color:#F8F8F2;">)</span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">    event.acceleration:                 有 x,y,z三个值表示三个⽅向上的移动加速度（不包含重⼒）</span></span>
<span class="line"><span style="color:#F8F8F2;">    event.accelerationIncludingGravity: 有 x,y,z三个值表示三个⽅向上的移动加速度（包含重⼒）</span></span>
<span class="line"><span style="color:#F8F8F2;">    event.rotationRate:                 有 beta,gamma,alpha表示三个轴的旋转速率</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>参考链接 1⃣️: <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/API/Document</a><br> 参考链接 2⃣️: <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/API/Element</a><br> 参考链接 3⃣️: <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/API/Event</a><br> 参考链接 4⃣️: <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/API/Window</a><br> 参考链接 5⃣️: <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator</a></p>`,33),o=[e];function r(c,F,t,i,y,b){return n(),a("div",null,o)}const E=s(p,[["render",r]]);export{m as __pageData,E as default};
