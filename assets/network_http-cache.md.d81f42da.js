import{_ as s,c as n,o as a,a as l}from"./app.12c66922.js";const p="/assets/http-cache-all.de42fb0f.png",u=JSON.parse('{"title":"HTTP 缓存","description":"","frontmatter":{},"headers":[{"level":2,"title":"HTTP 强制缓存","slug":"http-强制缓存","link":"#http-强制缓存","children":[{"level":3,"title":"Expires","slug":"expires","link":"#expires","children":[]},{"level":3,"title":"Cache-control","slug":"cache-control","link":"#cache-control","children":[]}]},{"level":2,"title":"HTTP 协商缓存","slug":"http-协商缓存","link":"#http-协商缓存","children":[]},{"level":2,"title":"缓存大致流程","slug":"缓存大致流程","link":"#缓存大致流程","children":[]}],"relativePath":"network/http-cache.md","lastUpdated":1679651658000}'),e={name:"network/http-cache.md"},o=l(`<h1 id="http-缓存" tabindex="-1">HTTP 缓存 <a class="header-anchor" href="#http-缓存" aria-hidden="true">#</a></h1><div class="info custom-block"><p class="custom-block-title">简介</p><p>web 缓存主要指的是两部分：</p><ol><li>浏览器 缓存 <ol><li>LocalStorage</li><li>SessionStorage</li><li>Cookie</li><li>IndexedBD</li></ol></li><li>http 缓存 <ol><li>通过配置 http 请求头来达到缓存的效果</li></ol></li></ol><p>作用：</p><ol><li>存储必要的资源</li><li>更快速的网络请求</li><li>更快速的页面资源加载</li><li>减少服务器资源消耗</li></ol></div><h2 id="http-强制缓存" tabindex="-1">HTTP 强制缓存 <a class="header-anchor" href="#http-强制缓存" aria-hidden="true">#</a></h2><p>在浏览器中，强缓存分为：</p><ol><li>http1.0 规范：Expires</li><li>http1.1 规范：Cache-control</li></ol><h3 id="expires" tabindex="-1">Expires <a class="header-anchor" href="#expires" aria-hidden="true">#</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// expires是根据本地时间来判断的资源是否失效的，假设客户端和服务器时间不同，会导致缓存命中误差</span></span>
<span class="line"><span style="color:#88846F;">// Response Head</span></span>
<span class="line"><span style="color:#F8F8F2;">express: Fri, </span><span style="color:#AE81FF;">08</span><span style="color:#F8F8F2;"> Mar </span><span style="color:#AE81FF;">2029</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">08</span><span style="color:#F8F8F2;">:</span><span style="color:#AE81FF;">05</span><span style="color:#F8F8F2;">:</span><span style="color:#AE81FF;">59</span><span style="color:#F8F8F2;"> GMT  </span><span style="color:#88846F;">// 指定时间和本机时间对比，在指定时间之前都可使用缓存</span></span>
<span class="line"><span style="color:#F8F8F2;">express: </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 仍然会启用缓存，只不过缓存立刻过期</span></span>
<span class="line"><span style="color:#F8F8F2;">express: </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// 内容立即过期，在再次显示之前必须重新请求</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="cache-control" tabindex="-1">Cache-control <a class="header-anchor" href="#cache-control" aria-hidden="true">#</a></h3><p>Cache-Control 的优先级高于 Expires<br> 强缓存不会发生请求，直接读取缓存</p><ul><li>memory cache（内存缓存） <ul><li>读取速度快，存于内存</li><li>关闭页面，内存中的缓存将释放</li></ul></li><li>disk cache（磁盘缓存） <ul><li>缓存再硬盘中，容量大</li><li>读取速度慢</li></ul></li></ul><p>先读取 memory cache -&gt; 其次才是 disk cache<br> Cache-control 又分为<strong>私有缓存</strong>和<strong>共享缓存</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">/*  私有缓存：内容仅供单个用户使用，应该仅在浏览器中本地缓存 */</span></span>
<span class="line"><span style="color:#F8F8F2;">Cache</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">Control: private</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">/*  共享缓存：所有内容都将被缓存</span></span>
<span class="line"><span style="color:#88846F;">    1. 浏览器从 HTTP 缓存中寻找匹配的请求</span></span>
<span class="line"><span style="color:#88846F;">    2. 缓存匹配上，则返回缓存</span></span>
<span class="line"><span style="color:#88846F;">    3. 缓存匹配上但已经过期，先请求服务器端显示资源没有改动，它将从缓存中返回资源；如果服务器显示资源变动，那么重新从服务器下载资源更新缓存</span></span>
<span class="line"><span style="color:#88846F;">    4. 缓存没有匹配，则以普通方式请求</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"><span style="color:#F8F8F2;">Cache</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">Control: public</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">/*  浏览器直接从远程服务器获取资源，不查看缓存，不会缓存资源 */</span></span>
<span class="line"><span style="color:#F8F8F2;">Cache</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">Control: no</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">store</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">/*  浏览器直接从远程服务器获取资源，不查看缓存，会缓存资源 */</span></span>
<span class="line"><span style="color:#F8F8F2;">Cache</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">Control: reload</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">/*  缓存有匹配，浏览器会向远程服务器发出条件请求，如果指示资源没有更改，则将从缓存中返回该资源。否则，将从服务器下载资源并更新缓存</span></span>
<span class="line"><span style="color:#88846F;">    缓存没有匹配，浏览器将发出正常请求，并使用下载的资源更新缓存 </span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"><span style="color:#F8F8F2;">Cache</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">Control: no</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">cache</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">/*  缓存有匹配，不管是新匹配项还是旧匹配项，都将从缓存中返回</span></span>
<span class="line"><span style="color:#88846F;">    缓存没有匹配，浏览器将发出正常请求，并使用下载的资源更新缓存</span></span>
<span class="line"><span style="color:#88846F;">    相当于 max-age=0</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"><span style="color:#F8F8F2;">Cache</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">Control: force</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">cache</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">/*  缓存有匹配，不管是新匹配项还是旧匹配项，都将从缓存中返回</span></span>
<span class="line"><span style="color:#88846F;">    缓存没有匹配，浏览器将返回一个错误</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"><span style="color:#F8F8F2;">Cache</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">Control: only</span><span style="color:#F92672;">-if-</span><span style="color:#F8F8F2;">cached</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">/*  缓存过期指定为当前时间的增量(以秒为单位)，在访问该请求后的300秒之内不会请求服务器 */</span></span>
<span class="line"><span style="color:#F8F8F2;">Cache</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">Control: max</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">age</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">300</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">/*  缓存时间 1年，immutable 指令可用于明确指示不需要重新验证，因为内容永远不会改变</span></span>
<span class="line"><span style="color:#88846F;">    两次请求都是200 OK，但是第二次是200 OK (来自磁盘缓存)</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"><span style="color:#F8F8F2;">Cache</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">Control: max</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">age</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">31536000</span><span style="color:#F8F8F2;">, immutable</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><h2 id="http-协商缓存" tabindex="-1">HTTP 协商缓存 <a class="header-anchor" href="#http-协商缓存" aria-hidden="true">#</a></h2><p>通过两组请求头，服务器进行校验，如果命中协议缓存，返回304，否则返回新资源以及200</p><ul><li>发送请求前，会先去缓存里面查看是否命中强缓存，如果命中，则直接从缓存中读取资源，不会发送请求到服务器</li><li>当强缓存没有命中时，浏览器一定会向服务器发起请求。服务器会根据 Request Header 中的一些字段来判断是否命中协商缓存，如果经对比后服务器资源未被修改，则返回 304 <ol><li>ETag/If-None-Match（ETag/If-None-Match 优先级更高） <ol><li>ETag 响应头的值是服务器生成的任意值</li><li>If-None-Match 如果该缓存是陈旧的no-cache/max-age=0，则请求标头If-None-Match的值为ETag的值，以询问服务器资源是否已被修改</li><li>服务器ETag 标头的值 === 请求中 If-None-Match 的值，则服务器将返回 304 Not Modified</li></ol></li><li>Last-Modified/If-Modified-Since <ol><li>Last-Modified 响应头的值是服务器 认定的资源修改的日期及时间</li><li>If-Modified-Since 为 Last-Modified的值，如果请求的资源从那时起未经修改，那么返回一个不带有消息主体的 304 响应，而在 Last-Modified 首部中会带有上次修改时间</li><li>只可以用在 GET 或 HEAD 请求中</li></ol></li></ol></li><li>如果前两步都没有命中，则直接从服务器加载资源</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 在3600秒后会触发一以下两组协商缓存（max-age=0/no-cache 在之后的每一次都会触发）</span></span>
<span class="line"><span style="color:#F8F8F2;">Cache</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">Control: max</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">age</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">3600</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 服务器ETag === 请求头If-None-Match，则返回304</span></span>
<span class="line"><span style="color:#F8F8F2;">ETag: </span><span style="color:#E6DB74;">&quot;deadbeef&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">If</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">None</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">Match: </span><span style="color:#E6DB74;">&quot;deadbeef&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 服务器Last-Modified === 请求头If-Modified-Since，则返回304</span></span>
<span class="line"><span style="color:#F8F8F2;">Last</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">Modified: Tue, </span><span style="color:#AE81FF;">22</span><span style="color:#F8F8F2;"> Feb </span><span style="color:#AE81FF;">2022</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">22</span><span style="color:#F8F8F2;">:</span><span style="color:#AE81FF;">00</span><span style="color:#F8F8F2;">:</span><span style="color:#AE81FF;">00</span><span style="color:#F8F8F2;"> GMT</span></span>
<span class="line"><span style="color:#F8F8F2;">If</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">Modified</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">Since: Tue, </span><span style="color:#AE81FF;">22</span><span style="color:#F8F8F2;"> Feb </span><span style="color:#AE81FF;">2022</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">22</span><span style="color:#F8F8F2;">:</span><span style="color:#AE81FF;">00</span><span style="color:#F8F8F2;">:</span><span style="color:#AE81FF;">00</span><span style="color:#F8F8F2;"> GMT</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="缓存大致流程" tabindex="-1">缓存大致流程 <a class="header-anchor" href="#缓存大致流程" aria-hidden="true">#</a></h2><p><img src="`+p+'" alt=""></p><p>参考链接：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching</a></p>',19),c=[o];function r(i,t,F,y,b,d){return a(),n("div",null,c)}const m=s(e,[["render",r]]);export{u as __pageData,m as default};
