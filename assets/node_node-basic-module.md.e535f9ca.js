import{_ as s,o as n,c as a,U as l}from"./chunks/framework.76b79cb5.js";const m=JSON.parse('{"title":"Node 基础模块","description":"","frontmatter":{},"headers":[],"relativePath":"node/node-basic-module.md","filePath":"node/node-basic-module.md","lastUpdated":1698673977000}'),p={name:"node/node-basic-module.md"},o=l(`<h1 id="node-基础模块" tabindex="-1">Node 基础模块 <a class="header-anchor" href="#node-基础模块" aria-label="Permalink to &quot;Node 基础模块&quot;">​</a></h1><h2 id="http" tabindex="-1">http <a class="header-anchor" href="#http" aria-label="Permalink to &quot;http&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">http</p><ol><li>超文本传输协议</li><li>创建http服务</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> http </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">require</span><span style="color:#F8F8F2;">( </span><span style="color:#E6DB74;">&quot;http&quot;</span><span style="color:#F8F8F2;"> );</span></span>
<span class="line"><span style="color:#88846F;">// 调用http.createServer()方法返回创建的HTTP服务器</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> server </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> http.</span><span style="color:#A6E22E;">createServer</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">( </span><span style="color:#FD971F;font-style:italic;">req</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;"> ) {</span></span>
<span class="line"><span style="color:#F8F8F2;">                </span><span style="color:#88846F;">// res.setHeader(&#39;Content-Type&#39;, &#39;text/html; charset=utf-8&#39;)</span></span>
<span class="line"><span style="color:#F8F8F2;">                res.</span><span style="color:#A6E22E;">writeHead</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">200</span><span style="color:#F8F8F2;">, {</span><span style="color:#E6DB74;">&#39;Content-Type&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;text/html&#39;</span><span style="color:#F8F8F2;">} )</span></span>
<span class="line"><span style="color:#F8F8F2;">                res.</span><span style="color:#A6E22E;">write</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;&lt;head&gt;&lt;meta charset=&#39;utf8&#39;&gt;&lt;/head&gt;&quot;</span><span style="color:#F8F8F2;"> );</span></span>
<span class="line"><span style="color:#F8F8F2;">                res.</span><span style="color:#A6E22E;">end</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;hello world&quot;</span><span style="color:#F8F8F2;"> );</span></span>
<span class="line"><span style="color:#F8F8F2;">            })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">server.</span><span style="color:#A6E22E;">listen</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1335</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">( </span><span style="color:#E6DB74;">&quot;server is running at port 1335.&quot;</span><span style="color:#F8F8F2;"> );</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// server.close(); // 关闭HTTP服务器</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#88846F;">// 当关闭HTTP服务器时触发close事件，指定回调函数处理</span></span>
<span class="line"><span style="color:#F8F8F2;">server.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;close&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;HTTP服务器已关闭&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div></div><h2 id="url" tabindex="-1">url <a class="header-anchor" href="#url" aria-label="Permalink to &quot;url&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">url</p><ol><li>解析url query</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> http </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;http&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> url </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;url&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">http.</span><span style="color:#A6E22E;">createServer</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">req</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(req.url);</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> query </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> url.</span><span style="color:#A6E22E;">parse</span><span style="color:#F8F8F2;">(req.url, </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">).query</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;id:&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> query.id);</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;name:&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> query.name);</span></span>
<span class="line"><span style="color:#F8F8F2;">  res.</span><span style="color:#A6E22E;">writeHead</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">200</span><span style="color:#F8F8F2;">, { </span><span style="color:#E6DB74;">&#39;Content-type&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;text/html;charset=&quot;utf-8&quot;&#39;</span><span style="color:#F8F8F2;"> })</span></span>
<span class="line"><span style="color:#F8F8F2;">  res.</span><span style="color:#A6E22E;">write</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;你好&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> query.name </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;:&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> query.id)</span></span>
<span class="line"><span style="color:#F8F8F2;">  res.</span><span style="color:#A6E22E;">write</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;&lt;h2&gt;hello world&lt;/h2&gt;&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  res.</span><span style="color:#A6E22E;">end</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;.....&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">}).</span><span style="color:#A6E22E;">listen</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">3000</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;sever running at http://localhost:3000/?id=1&amp;name=join&#39;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></div><h2 id="commonjs" tabindex="-1">commonJs <a class="header-anchor" href="#commonjs" aria-label="Permalink to &quot;commonJs&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">commonJs</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 导出整个模块</span></span>
<span class="line"><span style="color:#88846F;">// 一个文件有一个导出方法时使用</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">exports</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">todo</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;这是一个值: &#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> val)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">// 导出该模块的todo方法</span></span>
<span class="line"><span style="color:#88846F;">// 一个文件有多个导出方法时使用</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">exports</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">todo</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;这是一个值: &#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> val)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 引入使用</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> hhh </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./hhh&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">hhh.</span><span style="color:#A6E22E;">todo</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;val&#39;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div></div><h2 id="fs" tabindex="-1">fs <a class="header-anchor" href="#fs" aria-label="Permalink to &quot;fs&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">fs</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#AE81FF;">1.</span><span style="color:#F8F8F2;"> stat: 检测是文件还是目录</span></span>
<span class="line"><span style="color:#AE81FF;">2.</span><span style="color:#F8F8F2;"> readdir: 读取目录</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#AE81FF;">1.</span><span style="color:#F8F8F2;"> 返回数组，文件名组成的数组</span></span>
<span class="line"><span style="color:#AE81FF;">3.</span><span style="color:#F8F8F2;"> mkdir: 创建目录</span></span>
<span class="line"><span style="color:#AE81FF;">4.</span><span style="color:#F8F8F2;"> rmdir: 删除目录</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#AE81FF;">1.</span><span style="color:#F8F8F2;"> 目录下必须不存在文件</span></span>
<span class="line"><span style="color:#AE81FF;">5.</span><span style="color:#F8F8F2;"> writeFile: 创建并写入文件</span></span>
<span class="line"><span style="color:#AE81FF;">6.</span><span style="color:#F8F8F2;"> appendFile: 追加写入文件</span></span>
<span class="line"><span style="color:#AE81FF;">7.</span><span style="color:#F8F8F2;"> readFile: 读取文件</span></span>
<span class="line"><span style="color:#AE81FF;">8.</span><span style="color:#F8F8F2;"> unlink: 删除文件</span></span>
<span class="line"><span style="color:#AE81FF;">9.</span><span style="color:#F8F8F2;"> rename: 重命名，移动文件</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">fs.</span><span style="color:#A6E22E;">stat</span><span style="color:#F8F8F2;">(path.</span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(__dirname </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;/app.js&#39;</span><span style="color:#F8F8F2;">), (</span><span style="color:#FD971F;font-style:italic;">err</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">data</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (err) </span><span style="color:#F92672;">return</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;是目录：&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> data.</span><span style="color:#A6E22E;">isDirectory</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;是文件：&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> data.</span><span style="color:#A6E22E;">isFile</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div></div><h2 id="path" tabindex="-1">path <a class="header-anchor" href="#path" aria-label="Permalink to &quot;path&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">path</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// __dirname: 当前文件所在目录的绝对路径</span></span>
<span class="line"><span style="color:#88846F;">// 拼接路径</span></span>
<span class="line"><span style="color:#F8F8F2;">path.</span><span style="color:#A6E22E;">join</span><span style="color:#F8F8F2;">(__dirname, </span><span style="color:#E6DB74;">&#39;/index.html&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">// 解析并拼接路径</span></span>
<span class="line"><span style="color:#F8F8F2;">path.</span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(__dirname, </span><span style="color:#E6DB74;">&#39;index.html&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">// 提取路径中文件扩展名</span></span>
<span class="line"><span style="color:#F8F8F2;">path.</span><span style="color:#A6E22E;">extname</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;/index.html&#39;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></div><h2 id="stream" tabindex="-1">stream <a class="header-anchor" href="#stream" aria-label="Permalink to &quot;stream&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">stream</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 创建可读流（根据文件大小，读取多次）</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> stearm </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> fs.</span><span style="color:#A6E22E;">createReadStream</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./img/xiong.png&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> str </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;&#39;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> count </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span></span>
<span class="line"><span style="color:#88846F;">// 监听读取数据和次数</span></span>
<span class="line"><span style="color:#F8F8F2;">stearm.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;data&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FD971F;font-style:italic;">data</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    str </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> data</span></span>
<span class="line"><span style="color:#F8F8F2;">    count</span><span style="color:#F92672;">++</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#88846F;">// 监听读取结束</span></span>
<span class="line"><span style="color:#F8F8F2;">stearm.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;end&#39;</span><span style="color:#F8F8F2;">, () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(str);</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(count);</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> stramWrite </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> fs.</span><span style="color:#A6E22E;">createWriteStream</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./b.png&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    stramWrite.</span><span style="color:#A6E22E;">write</span><span style="color:#F8F8F2;">(str)</span></span>
<span class="line"><span style="color:#F8F8F2;">    stramWrite.</span><span style="color:#A6E22E;">end</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 创建写入流</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> fsStream </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> fs.</span><span style="color:#A6E22E;">createWriteStream</span><span style="color:#F8F8F2;">(文件路径);</span></span>
<span class="line"><span style="color:#88846F;">// 读取文件buffer二进制</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> readFile </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> fs.</span><span style="color:#A6E22E;">readFileSync</span><span style="color:#F8F8F2;">(文件路径);</span></span>
<span class="line"><span style="color:#88846F;">// 写入创建的写入流对象（可以循环写入，相当于push）</span></span>
<span class="line"><span style="color:#F8F8F2;">fsStream.</span><span style="color:#A6E22E;">write</span><span style="color:#F8F8F2;">(readFile)</span></span>
<span class="line"><span style="color:#88846F;">// 写入完成关闭写入流</span></span>
<span class="line"><span style="color:#F8F8F2;">fsStream.</span><span style="color:#A6E22E;">end</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">fsStream.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;finish&#39;</span><span style="color:#F8F8F2;">, () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;写入完成&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 管道流</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> stearm </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> fs.</span><span style="color:#A6E22E;">createReadStream</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./img/xiong.png&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> stramWrite </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> fs.</span><span style="color:#A6E22E;">createWriteStream</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./img/b.png&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">// 读取文件流，通过pipe，倒入读取流（相当于复制文件操作）</span></span>
<span class="line"><span style="color:#F8F8F2;">stearm.</span><span style="color:#A6E22E;">pipe</span><span style="color:#F8F8F2;">(stramWrite)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div></div><h2 id="express-第三方模块" tabindex="-1">Express（第三方模块） <a class="header-anchor" href="#express-第三方模块" aria-label="Permalink to &quot;Express（第三方模块）&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">Express</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> express </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;express&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> app </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">express</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">/* app.use: 将指定的一个或多个中间件函数装载到指定的路径：当请求的路径的基与路径匹配时，执行中间件函数。</span></span>
<span class="line"><span style="color:#88846F;">            多个中间件共享req、res的数据</span></span>
<span class="line"><span style="color:#88846F;">            多个中间件  上一个中间件的输出作为下一个中间件的输入。</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">m1</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">req</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">next</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;触发中间件&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">next</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">// 全局中间件</span></span>
<span class="line"><span style="color:#88846F;">// app.use(m1)</span></span>
<span class="line"><span style="color:#88846F;">// 局部中间件</span></span>
<span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;/&#39;</span><span style="color:#F8F8F2;">, m1, m1, </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">req</span><span style="color:#F8F8F2;">,</span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;">) { res.</span><span style="color:#A6E22E;">send</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Hello world&#39;</span><span style="color:#F8F8F2;">) })</span></span>
<span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;/&#39;</span><span style="color:#F8F8F2;">, [m1, m1], </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">req</span><span style="color:#F8F8F2;">,</span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;">) { res.</span><span style="color:#A6E22E;">send</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Hello world&#39;</span><span style="color:#F8F8F2;">) })</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 导入处理querystring的Node.js内置模块</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> qs </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;querystring&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">// 自定义中间件</span></span>
<span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#A6E22E;">use</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">req</span><span style="color:#F8F8F2;">,</span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;">,</span><span style="color:#FD971F;font-style:italic;">next</span><span style="color:#F8F8F2;">)</span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> str </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 如果数据量比较大，无法一次性发送完毕，则客户端会把数据切割后，分批发送到服务器。所以 data 事件可能会触发多次，每一次触发 data 事件时，获取到数据只是完整数据的一部分，需要手动对接收到的数据进行拼接。</span></span>
<span class="line"><span style="color:#F8F8F2;">    req.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;data&#39;</span><span style="color:#F8F8F2;">,(</span><span style="color:#FD971F;font-style:italic;">chunk</span><span style="color:#F8F8F2;">)</span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">        str </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> chunk</span></span>
<span class="line"><span style="color:#F8F8F2;">    })</span></span>
<span class="line"><span style="color:#F8F8F2;">    req.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;end&#39;</span><span style="color:#F8F8F2;">,()</span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;">{ </span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// 在str中存放的是完整的请求体数据)</span></span>
<span class="line"><span style="color:#F8F8F2;">        console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(str); </span><span style="color:#88846F;">// name=Ulrich&amp;age=22&amp;gender=male</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> body </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> qs.</span><span style="color:#A6E22E;">parse</span><span style="color:#F8F8F2;">(str) </span><span style="color:#88846F;">// { name: &#39;Ulrich&#39;, age: &#39;22&#39;, gender: &#39;male&#39; }</span></span>
<span class="line"><span style="color:#F8F8F2;">        req.body </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> body;</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#A6E22E;">next</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    })</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 匹配get、post请求，返回响应</span></span>
<span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;/&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">req</span><span style="color:#F8F8F2;">,</span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;">) { res.</span><span style="color:#A6E22E;">send</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Hello world&#39;</span><span style="color:#F8F8F2;">) })</span></span>
<span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#A6E22E;">post</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;/&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">req</span><span style="color:#F8F8F2;">,</span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;">) { res.</span><span style="color:#A6E22E;">send</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Hello world&#39;</span><span style="color:#F8F8F2;">) })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 注册访问静态资源</span></span>
<span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#A6E22E;">use</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;/static&#39;</span><span style="color:#F8F8F2;">, express.</span><span style="color:#A6E22E;">static</span><span style="color:#F8F8F2;">(__dirname </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;/public&#39;</span><span style="color:#F8F8F2;">));</span></span>
<span class="line"><span style="color:#88846F;">// 注册访问路由，抽离为单独路由模块。通过express.Router()创建路由，/api/user/list、/api/user/add</span></span>
<span class="line"><span style="color:#88846F;">// app.use(&#39;/api&#39;, indexRouter);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 绑定并侦听指定主机和端口上的连接</span></span>
<span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#A6E22E;">listen</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">80</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">() { console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;listen in http://127.0.0.1&#39;</span><span style="color:#F8F8F2;">) })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div></div><h2 id="中间件分类" tabindex="-1">中间件分类 <a class="header-anchor" href="#中间件分类" aria-label="Permalink to &quot;中间件分类&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">中间件</p><ul><li><strong>应用级别中间件</strong><ul><li>绑定到Express中app实例上的中间件</li></ul></li><li><strong>路由级别中间件</strong><ul><li>绑定到Express.Router()上的中间件</li></ul></li><li><strong>错误级别中间件</strong><ul><li>对throw new Error 等抛出的错误，进行捕获的中间件 function (err, req, res, next) {}</li></ul></li><li><strong>Express内置中间件</strong><ul><li>Express.static 托管静态资源</li><li>Express.json 解析Json格式请求体</li><li>Express.urlencoded 解析url-encoded格式请求体</li></ul></li><li><strong>第三方中间件</strong></li></ul></div>`,17),e=[o];function r(t,c,F,i,y,b){return n(),a("div",null,e)}const E=s(p,[["render",r]]);export{m as __pageData,E as default};
