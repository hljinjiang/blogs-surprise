import{_ as y,c as u,b as s,d as n,e as a,a as p,o as b,r as l}from"./app.12c66922.js";const m="/assets/life.52bdb207.png",d="/assets/redux.d3e40b72.png",j=JSON.parse('{"title":"React Basics","description":"","frontmatter":{},"headers":[{"level":2,"title":"组件类别","slug":"组件类别","link":"#组件类别","children":[{"level":3,"title":"类组件","slug":"类组件","link":"#类组件","children":[]},{"level":3,"title":"函数组件","slug":"函数组件","link":"#函数组件","children":[]}]},{"level":2,"title":"类组件和函数组件的区别","slug":"类组件和函数组件的区别","link":"#类组件和函数组件的区别","children":[{"level":3,"title":"编写方式区别","slug":"编写方式区别","link":"#编写方式区别","children":[]},{"level":3,"title":"状态管理区别","slug":"状态管理区别","link":"#状态管理区别","children":[]},{"level":3,"title":"生命周期区别","slug":"生命周期区别","link":"#生命周期区别","children":[]},{"level":3,"title":"成员属性区别","slug":"成员属性区别","link":"#成员属性区别","children":[]}]},{"level":2,"title":"State","slug":"state","link":"#state","children":[]},{"level":2,"title":"Props","slug":"props","link":"#props","children":[]},{"level":2,"title":"refs","slug":"refs","link":"#refs","children":[]},{"level":2,"title":"⽣命周期","slug":"生命周期","link":"#生命周期","children":[{"level":3,"title":"挂载阶段","slug":"挂载阶段","link":"#挂载阶段","children":[]},{"level":3,"title":"更新阶段","slug":"更新阶段","link":"#更新阶段","children":[]},{"level":3,"title":"卸载阶段","slug":"卸载阶段","link":"#卸载阶段","children":[]}]},{"level":2,"title":"组件传值","slug":"组件传值","link":"#组件传值","children":[{"level":3,"title":"props","slug":"props-1","link":"#props-1","children":[]},{"level":3,"title":"context","slug":"context","link":"#context","children":[]},{"level":3,"title":"events","slug":"events","link":"#events","children":[]}]},{"level":2,"title":"页面路由","slug":"页面路由","link":"#页面路由","children":[{"level":3,"title":"react-router-dom","slug":"react-router-dom","link":"#react-router-dom","children":[]}]},{"level":2,"title":"Redux","slug":"redux","link":"#redux","children":[]}],"relativePath":"react/index.md","lastUpdated":1679922642000}'),E={name:"react/index.md"},h=p(`<h1 id="react-basics" tabindex="-1">React Basics <a class="header-anchor" href="#react-basics" aria-hidden="true">#</a></h1><h2 id="组件类别" tabindex="-1">组件类别 <a class="header-anchor" href="#组件类别" aria-hidden="true">#</a></h2><h3 id="类组件" tabindex="-1">类组件 <a class="header-anchor" href="#类组件" aria-hidden="true">#</a></h3><div class="info custom-block"><p class="custom-block-title">简介</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> React </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;react&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Hoc</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">extends</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">React</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;font-style:italic;text-decoration:underline;">Component</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;Josh Perez&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">props</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">super</span><span style="color:#F8F8F2;">(props);</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.state </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      count: </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    };</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.handleClick </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.handleClick.</span><span style="color:#A6E22E;">bind</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">handleClick</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">setState</span><span style="color:#F8F8F2;">({ count: </span><span style="color:#F92672;">++</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.state.count });</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">render</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">        &lt;</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;">&gt;</span><span style="color:#F92672;">{</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">&lt;/</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">        &lt;</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;">&gt;</span><span style="color:#F92672;">{</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.state.count</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">&lt;/</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">        &lt;</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">onClick</span><span style="color:#F92672;">={</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.handleClick</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">&gt;Click me&lt;/</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;/</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    );</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">default</span><span style="color:#F8F8F2;"> Hoc;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div></div><h3 id="函数组件" tabindex="-1">函数组件 <a class="header-anchor" href="#函数组件" aria-hidden="true">#</a></h3><div class="info custom-block"><p class="custom-block-title">简介</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> React, { useState, useEffect } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;react&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Example</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 声明一个新的叫做 “count” 的 state 变量</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> [count, setCount] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">useState</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">useEffect</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Bye&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    };</span></span>
<span class="line"><span style="color:#F8F8F2;">  }, []);</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">handleClick</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">setCount</span><span style="color:#F8F8F2;">(count </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#F92672;">p</span><span style="color:#F8F8F2;">&gt;You clicked </span><span style="color:#F92672;">{</span><span style="color:#F8F8F2;">count</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;"> times&lt;/</span><span style="color:#F92672;">p</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">onClick</span><span style="color:#F92672;">={</span><span style="color:#F8F8F2;">() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">setCount</span><span style="color:#F8F8F2;">(count </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">&gt;Click me&lt;/</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#F92672;">br</span><span style="color:#F8F8F2;"> /&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">onClick</span><span style="color:#F92672;">={</span><span style="color:#F8F8F2;">handleClick</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">&gt;Click me&lt;/</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;/</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  );</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">default</span><span style="color:#F8F8F2;"> Example;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div></div><h2 id="类组件和函数组件的区别" tabindex="-1">类组件和函数组件的区别 <a class="header-anchor" href="#类组件和函数组件的区别" aria-hidden="true">#</a></h2><h3 id="编写方式区别" tabindex="-1">编写方式区别 <a class="header-anchor" href="#编写方式区别" aria-hidden="true">#</a></h3><ol><li>类组件使用 <strong>class</strong> 编写组件</li><li>函数组件使用 <strong>function</strong> 编写组件</li></ol><h3 id="状态管理区别" tabindex="-1">状态管理区别 <a class="header-anchor" href="#状态管理区别" aria-hidden="true">#</a></h3><ol><li>类组件使用 <strong>this.state</strong> 定义状态，<strong>this.setState</strong> 操作状态</li><li>函数组件使用 <strong>useState</strong> 定义状态，返回数组[value, setValue]，<strong>setValue</strong> 操作状态</li></ol><h3 id="生命周期区别" tabindex="-1">生命周期区别 <a class="header-anchor" href="#生命周期区别" aria-hidden="true">#</a></h3><ol><li>类组件存在 <strong>componentDidMount</strong> 等生命周期</li><li>函数组件没有生命周期，使用 <strong>useEffect</strong> 替代 componentDidMount 和 componentDidUpdate <ol><li><strong>useEffect</strong> 回调函数中 return 一个函数，则 return 的函数会在组件卸载的时候执行，正如componentWillUnmount</li></ol></li></ol><h3 id="成员属性区别" tabindex="-1">成员属性区别 <a class="header-anchor" href="#成员属性区别" aria-hidden="true">#</a></h3><ol><li>类组件通过 <strong>this</strong>调用内部成员 <ol><li>构造器 constructor 中 this 指向该实例对象（构造器只调⽤⼀次，只在 new 的时候调⽤）</li><li>事件调用中 this 指向丢失的原因 <ol><li>事件 onClick 触发执⾏时的函数在 dom 上直接调⽤，⽽不是在类实例对象中调⽤</li><li>由于普通函数的 this 指向为调⽤时所处的对象决定的，因⽽指向 window，⼜因为开启了 use strict， window 变为了 undefined</li></ol></li></ol></li><li>函数组件直接使用内部成员，没有 <strong>this</strong></li></ol><h2 id="state" tabindex="-1">State <a class="header-anchor" href="#state" aria-hidden="true">#</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 定义 state</span></span>
<span class="line"><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.state </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">   count: </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">   arr: [{ a: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;"> }]</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">// 更新 state 方式一</span></span>
<span class="line"><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">setState</span><span style="color:#F8F8F2;">({ count: </span><span style="color:#F92672;">++</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.state.count }, () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">   </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">setState</span><span style="color:#F8F8F2;">({ count: </span><span style="color:#F92672;">++</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.state.count });</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#88846F;">// 更新 state 方式二</span></span>
<span class="line"><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">setState</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">   (</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> ({ count: </span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">state.count }),</span></span>
<span class="line"><span style="color:#F8F8F2;">   () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">setState</span><span style="color:#F8F8F2;">({ count: </span><span style="color:#F92672;">++</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.state.count });</span></span>
<span class="line"><span style="color:#F8F8F2;">   }</span></span>
<span class="line"><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 第二个参数回调函数在 render 调用后才被调用</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-hidden="true">#</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 1、读取传入的属性值</span></span>
<span class="line"><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.props.name</span></span>
<span class="line"><span style="color:#F8F8F2;">​</span></span>
<span class="line"><span style="color:#88846F;">// 2、对props中的属性值进行类型限制和必要性限制</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> PropTypes </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;prop-types&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">Person.propTypes </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  name: PropTypes.string.isRequired,</span></span>
<span class="line"><span style="color:#F8F8F2;">  age: PropTypes.number.</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">​</span></span>
<span class="line"><span style="color:#88846F;">// 3、将对象的所有属性通过props传递</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#66D9EF;font-style:italic;">Person</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">{...</span><span style="color:#F8F8F2;">person</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">/&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">​</span></span>
<span class="line"><span style="color:#88846F;">// 4、默认属性值</span></span>
<span class="line"><span style="color:#F8F8F2;">Person.defaultProps </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  name: </span><span style="color:#E6DB74;">&#39;single&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  age: </span><span style="color:#AE81FF;">18</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// props是不可变的，⼦组件不可修改 props，由⽗组件传⼊⼦组件</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="refs" tabindex="-1">refs <a class="header-anchor" href="#refs" aria-hidden="true">#</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 1、字符串形式的ref</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">input</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">ref</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;inputTarget&quot;</span><span style="color:#F8F8F2;"> /&gt;</span></span>
<span class="line"><span style="color:#88846F;">// 通过this.refs.inputTarget 获取DOM</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 2、回调形式的ref</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">input</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">ref</span><span style="color:#F92672;">={</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.inputTarget </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> target}</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;"> /&gt;</span></span>
<span class="line"><span style="color:#88846F;">// 通过this.inputTarget 获取DOM</span></span>
<span class="line"><span style="color:#F8F8F2;">​</span></span>
<span class="line"><span style="color:#88846F;">// 3、createRef创建ref容器</span></span>
<span class="line"><span style="color:#F8F8F2;">myRef </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> React.</span><span style="color:#A6E22E;">createRef</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">input</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">ref</span><span style="color:#F92672;">={</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.myRef</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;"> /&gt;</span></span>
<span class="line"><span style="color:#88846F;">// 通过this.myRef.current 获取DOM</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// refs访问绑定的 DOM 节点</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="生命周期" tabindex="-1">⽣命周期 <a class="header-anchor" href="#生命周期" aria-hidden="true">#</a></h2><p><img src="`+m+`" alt="⽣命周期"> 参考链接：<a href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/" target="_blank" rel="noreferrer">https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/</a></p><h3 id="挂载阶段" tabindex="-1">挂载阶段 <a class="header-anchor" href="#挂载阶段" aria-hidden="true">#</a></h3><div class="info custom-block"><p class="custom-block-title">简介</p><ol><li><strong>constructor(props)</strong>: 构造函数最先调⽤ <ol><li>初始化内部 state</li><li>为事件处理函数绑定实例</li></ol></li><li><strong>static getDerivedStateFromProps(props, state)</strong>: 罕⻅⽤例，即 state 的值任何时候都取决于 props <ol><li>静态方法，无 this</li><li>⼦组件的 state 取决于⽗组件的 props</li><li>return props or null，会返回一个对象用来更新当前的 state 对象</li></ol></li><li><strong>UNSAFE_componentWillMount()</strong>: 在组件挂载前调用（DOM插入前）</li><li><strong>render()</strong>: 是 class 组件中唯一必须实现的方法，返回需要渲染的DOM <ol><li>原生的DOM，如div</li><li>React组件</li><li>Fragment（片段）</li><li>Portals（插槽）</li><li>字符串和数字，被渲染成text节点</li><li>Boolean和null，不会渲染任何东西</li></ol></li><li><strong>componentDidMount()</strong>: 在组件挂载后调用（DOM插入后） <ol><li>适合添加订阅的地方</li><li>适合网络请求获取数据</li><li>获取DOM节点</li></ol></li></ol></div><h3 id="更新阶段" tabindex="-1">更新阶段 <a class="header-anchor" href="#更新阶段" aria-hidden="true">#</a></h3><div class="info custom-block"><p class="custom-block-title">简介</p><ol><li><strong>UNSAFE_componentWillReceiveProps(nextProps)</strong>: 在组件接收 props 前调⽤ <ol><li>在更新⼦组件，需要重新渲染组件时⽤到的⽐较多，更新state</li></ol></li><li><strong>static getDerivedStateFromProps(props, state)</strong>: 罕⻅⽤例，即 state 的值任何时候都取决于 props</li><li><strong>shouldComponentUpdate(nextProps, nextState)</strong>: 是否需要组件重新渲染 <ol><li>新的props，新的state</li><li>return Boolean（true表示组件重新渲染， false表示组件不冲洗渲染）</li></ol></li><li><strong>UNSAFE_componentWillUpdate(nextProps, nextState)</strong>: 组件更新前 <ol><li>在组件收到新的 props 或 state 时触发</li><li>不能此方法中调用 this.setState()</li></ol></li><li><strong>render()</strong>: 是 class 组件中唯一必须实现的方法，返回需要渲染的DOM</li><li><strong>getSnapshotBeforeUpdate(prevProps, prevState)</strong>: 获取快照在更新前， return的值在下个钩⼦中接收 <ol><li>在 DOM 更新前调⽤，可获取更新前的 DOM 信息</li><li>return null or snapshotValue</li></ol></li><li><strong>componentDidUpdate(prevProps, prevState, snapshotValue)</strong>: 组件更新后 <ol><li>可以操作 DOM，发送请求等</li></ol></li></ol></div><h3 id="卸载阶段" tabindex="-1">卸载阶段 <a class="header-anchor" href="#卸载阶段" aria-hidden="true">#</a></h3><div class="info custom-block"><p class="custom-block-title">简介</p><ol><li><strong>componentWillUnmount()</strong>: 组件卸载前触发 <ol><li>取消订阅等额外操作</li></ol></li></ol></div><h2 id="组件传值" tabindex="-1">组件传值 <a class="header-anchor" href="#组件传值" aria-hidden="true">#</a></h2><h3 id="props-1" tabindex="-1">props <a class="header-anchor" href="#props-1" aria-hidden="true">#</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 1. 父 -&gt; 子 传值</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#66D9EF;font-style:italic;">Hoc</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">job</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;工作&quot;</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#66D9EF;font-style:italic;">Hoc</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#88846F;">// 子组件 this.props.job 使用</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 2. 子 -&gt; 父 传值</span></span>
<span class="line"><span style="color:#A6E22E;">callback</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">   </span><span style="color:#88846F;">// 此处的value便是子组件带回</span></span>
<span class="line"><span style="color:#F8F8F2;">   </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">setState</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">      info: value,</span></span>
<span class="line"><span style="color:#F8F8F2;">   })</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#66D9EF;font-style:italic;">Son</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">callback</span><span style="color:#F92672;">={</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.callback</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 子组件 this.props.callback(e.target.value)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="context" tabindex="-1">context <a class="header-anchor" href="#context" aria-hidden="true">#</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// context.js</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> {createContext} </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;react&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">/**</span></span>
<span class="line"><span style="color:#88846F;"> * Provider,Consumer来源于同一个createContext()</span></span>
<span class="line"><span style="color:#88846F;"> * 通过Provider传入的value属性，将数据保存起来传递给其他组件</span></span>
<span class="line"><span style="color:#88846F;"> * 实现跨组件传值</span></span>
<span class="line"><span style="color:#88846F;"> *  */</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> MyContext </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createContext</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;context初始值&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> {Provider, Consumer} </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> MyContext;</span></span>
<span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> {MyContext, Provider, Consumer};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// person</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#66D9EF;font-style:italic;">Provider</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">value</span><span style="color:#F92672;">={</span><span style="color:#AE81FF;">111</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">   &lt;</span><span style="color:#66D9EF;font-style:italic;">Child</span><span style="color:#F8F8F2;">/&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#66D9EF;font-style:italic;">Provider</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// child</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#66D9EF;font-style:italic;">Consumer</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">   </span><span style="color:#F92672;">{</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">\`这是context传的值</span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">value</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;">\`</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">   }</span><span style="color:#F92672;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#66D9EF;font-style:italic;">Consumer</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="events" tabindex="-1">events <a class="header-anchor" href="#events" aria-hidden="true">#</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// events.js</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { EventEmitter } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;events&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">default</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">EventEmitter</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// person</span></span>
<span class="line"><span style="color:#88846F;">// 组件初始化时添加事件监听</span></span>
<span class="line"><span style="color:#F8F8F2;">emitter.</span><span style="color:#A6E22E;">addListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;info&quot;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FD971F;font-style:italic;">info</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">   console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;监听&quot;</span><span style="color:#F8F8F2;">, info);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 组件销毁前移除事件监听</span></span>
<span class="line"><span style="color:#F8F8F2;">emitter.</span><span style="color:#A6E22E;">removeListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;info&quot;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FD971F;font-style:italic;">info</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">   console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;移除&quot;</span><span style="color:#F8F8F2;">, info);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// child</span></span>
<span class="line"><span style="color:#88846F;">// 发射事件</span></span>
<span class="line"><span style="color:#F8F8F2;">emitter.</span><span style="color:#A6E22E;">emit</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;info&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;我是来自father的 info&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="页面路由" tabindex="-1">页面路由 <a class="header-anchor" href="#页面路由" aria-hidden="true">#</a></h2><h3 id="react-router-dom" tabindex="-1">react-router-dom <a class="header-anchor" href="#react-router-dom" aria-hidden="true">#</a></h3>`,38),g=s("ol",null,[s("li",null,"BrowserRouter 使用 HTML5 提供的 history API 实现"),s("li",null,"HashRouter 使用 # 方式跟在 URL 后面")],-1),f=p(`<div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { BrowserRouter } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;react-router-dom&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#66D9EF;font-style:italic;">BrowserRouter</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">   &lt;</span><span style="color:#66D9EF;font-style:italic;">App</span><span style="color:#F8F8F2;"> /&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#66D9EF;font-style:italic;">BrowserRouter</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#66D9EF;font-style:italic;">BrowserRouter</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">   &lt;</span><span style="color:#66D9EF;font-style:italic;">App</span><span style="color:#F8F8F2;"> /&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#66D9EF;font-style:italic;">BrowserRouter</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>`,1),D={start:"2"},v=s("ol",null,[s("li",null,"通常由 Switch 包裹 Route 匹配 URL 路径是否一致")],-1),A=p(`<div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { Route, Switch, Redirect } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;react-router-dom&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#66D9EF;font-style:italic;">Switch</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">   </span><span style="color:#F92672;">{</span><span style="color:#88846F;">/* 精确匹配 */</span><span style="color:#F92672;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">   &lt;</span><span style="color:#66D9EF;font-style:italic;">Route</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">path</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;/home&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#66D9EF;font-style:italic;">Home</span><span style="color:#F8F8F2;"> /&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">   &lt;/</span><span style="color:#66D9EF;font-style:italic;">Route</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">   </span><span style="color:#F92672;">{</span><span style="color:#88846F;">/* 模糊匹配 */</span><span style="color:#F92672;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">   </span><span style="color:#F92672;">{</span><span style="color:#88846F;">/* params接收参数 */</span><span style="color:#F92672;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">   </span><span style="color:#F92672;">{</span><span style="color:#88846F;">/* &lt;Route path=&quot;/page/:id&quot; component={Page}&gt;&lt;/Route&gt; */</span><span style="color:#F92672;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">   </span><span style="color:#F92672;">{</span><span style="color:#88846F;">/* search接收参数、state接收参数 */</span><span style="color:#F92672;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">   &lt;</span><span style="color:#66D9EF;font-style:italic;">Route</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">path</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;/page&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">component</span><span style="color:#F92672;">={</span><span style="color:#F8F8F2;">Page</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;"> /&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">   &lt;</span><span style="color:#66D9EF;font-style:italic;">Redirect</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">to</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;/home&quot;</span><span style="color:#F8F8F2;"> /&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#66D9EF;font-style:italic;">Switch</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>`,1),k={start:"3"},_=p(`<div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { Link, NavLink } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;react-router-dom&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#66D9EF;font-style:italic;">Link</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">to</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;/&#39;</span><span style="color:#F8F8F2;">&gt;Home&lt;/</span><span style="color:#66D9EF;font-style:italic;">Link</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 匹配成功会添加class or style</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#66D9EF;font-style:italic;">NavLink</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">to</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;/about&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">activeClassName</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;active&#39;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  About</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#66D9EF;font-style:italic;">NavLink</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 重定向 URL</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#66D9EF;font-style:italic;">Redirect</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">to</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;/&quot;</span><span style="color:#F8F8F2;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="redux" tabindex="-1">Redux <a class="header-anchor" href="#redux" aria-hidden="true">#</a></h2><p><img src="`+d+`" alt=""></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// index.js</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { Provider } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;react-redux&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> store </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;./redux/store&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> Main </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;./main&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">{</span><span style="color:#88846F;">/* 使用provider包裹app，让Main组件及所有后代组件都能接收到store */</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#66D9EF;font-style:italic;">Provider</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">store</span><span style="color:#F92672;">={</span><span style="color:#F8F8F2;">store</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">   &lt;</span><span style="color:#66D9EF;font-style:italic;">Main</span><span style="color:#F8F8F2;"> /&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#66D9EF;font-style:italic;">Provider</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// main.js</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { Component, Fragment } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;react&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> Todo </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;./redux/Todo&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">{</span><span style="color:#88846F;">/* 使用Todo */</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">default</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Main</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">extends</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;font-style:italic;text-decoration:underline;">Component</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">render</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> &lt;</span><span style="color:#66D9EF;font-style:italic;">Todo</span><span style="color:#F8F8F2;"> /&gt;;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// Todo.js</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> React, { Component } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;react&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> store </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;./store&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> actions </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;./actions&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { connect } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;react-redux&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { Button } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;antd&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Todo</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">extends</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;font-style:italic;text-decoration:underline;">Component</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">props</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">super</span><span style="color:#F8F8F2;">(props);</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(props);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">componentDidMount</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.unsubscribe </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> store.</span><span style="color:#A6E22E;">subscribe</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">e</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    });</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">componentWillUnmount</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">unsubscribe</span><span style="color:#F8F8F2;">(); </span><span style="color:#88846F;">//取消订阅</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">render</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">//console.log(&#39;counter render&#39;)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">        &lt;</span><span style="color:#F92672;">p</span><span style="color:#F8F8F2;">&gt;</span><span style="color:#F92672;">{</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.props.number</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">&lt;/</span><span style="color:#F92672;">p</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">        &lt;</span><span style="color:#66D9EF;font-style:italic;">Button</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">onClick</span><span style="color:#F92672;">={</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.props.increase</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">&gt; + &lt;/</span><span style="color:#66D9EF;font-style:italic;">Button</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">        &lt;</span><span style="color:#F92672;">br</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#F92672;">br</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">        &lt;</span><span style="color:#66D9EF;font-style:italic;">Button</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">onClick</span><span style="color:#F92672;">={</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.props.decrease</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">&gt; - &lt;/</span><span style="color:#66D9EF;font-style:italic;">Button</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">        &lt;</span><span style="color:#F92672;">br</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#F92672;">br</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">        &lt;</span><span style="color:#F92672;">br</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#F92672;">br</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">        &lt;</span><span style="color:#66D9EF;font-style:italic;">Button</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">onClick</span><span style="color:#F92672;">={</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.props.typeOpen</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">&gt; open &lt;/</span><span style="color:#66D9EF;font-style:italic;">Button</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">        &lt;</span><span style="color:#F92672;">br</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#F92672;">br</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">        &lt;</span><span style="color:#66D9EF;font-style:italic;">Button</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">onClick</span><span style="color:#F92672;">={</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.props.typeClose</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">&gt; close &lt;/</span><span style="color:#66D9EF;font-style:italic;">Button</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;/</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    );</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">/* 连接 Redux 和 React，它包在我们的容器组件的外一层，</span></span>
<span class="line"><span style="color:#88846F;">   它接收上面 Provider 提供的 store 里面的 state 和 dispatch，</span></span>
<span class="line"><span style="color:#88846F;">   传给一个构造函数，返回一个对象，以属性形式传回容器组件。</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">1. mapStateToProps: 将store中的数据作为props绑定到组件中，这个对象会与组件的props合并</span></span>
<span class="line"><span style="color:#88846F;">2. mapDispatchToProps: 将actions作为props绑定到组件中</span></span>
<span class="line"><span style="color:#88846F;">3. mergeProps: 接收reducer和state，返回的对象则是传入组件的props</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">default</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">  (</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> state,</span></span>
<span class="line"><span style="color:#F8F8F2;">  actions,</span></span>
<span class="line"><span style="color:#F8F8F2;">  (</span><span style="color:#FD971F;font-style:italic;">reducer</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> { </span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">reducer, </span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">state };</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">)(Todo);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// store.js</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { createStore } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;redux&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { composeWithDevTools } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;redux-devtools-extension&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> rootReducer </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;./reducers&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#88846F;">// 创建 store，传入reducer</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> store </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createStore</span><span style="color:#F8F8F2;">(rootReducer, </span><span style="color:#A6E22E;">composeWithDevTools</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">default</span><span style="color:#F8F8F2;"> store;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// reducers.js</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { combineReducers } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;redux&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> constant </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;./constant&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">reducer</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> { count: </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;"> }, </span><span style="color:#FD971F;font-style:italic;">action</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">switch</span><span style="color:#F8F8F2;"> (action.type) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">case</span><span style="color:#F8F8F2;"> constant.INCREASE:</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> { count: state.count </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">case</span><span style="color:#F8F8F2;"> constant.DECREASE:</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> { count: state.count </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">default</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> state;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">changeTypeReducer</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> { type: </span><span style="color:#E6DB74;">&quot;open&quot;</span><span style="color:#F8F8F2;"> }, </span><span style="color:#FD971F;font-style:italic;">action</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">switch</span><span style="color:#F8F8F2;"> (action.type) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">case</span><span style="color:#F8F8F2;"> constant.TYPE_OPEN:</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> { type: </span><span style="color:#E6DB74;">&quot;open&quot;</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">case</span><span style="color:#F8F8F2;"> constant.TYPE_CLOSE:</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> { type: </span><span style="color:#E6DB74;">&quot;close&quot;</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">default</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> state;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 汇总所有reducer变为一个总的reducer</span></span>
<span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">default</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">combineReducers</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  reducer,</span></span>
<span class="line"><span style="color:#F8F8F2;">  changeTypeReducer,</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// actions.js</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> constant </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;./constant&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">default</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">increase</span><span style="color:#F8F8F2;">: () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> ({ type: constant.INCREASE }),</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">decrease</span><span style="color:#F8F8F2;">: () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> ({ type: constant.DECREASE }),</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">typeOpen</span><span style="color:#F8F8F2;">: () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> ({ type: constant.TYPE_OPEN }),</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">typeClose</span><span style="color:#F8F8F2;">: () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> ({ type: constant.TYPE_CLOSE }),</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// constant.js</span></span>
<span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">default</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  INCREASE: </span><span style="color:#E6DB74;">&quot;INCREASE&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  DECREASE: </span><span style="color:#E6DB74;">&quot;DECREASE&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  TYPE_OPEN: </span><span style="color:#E6DB74;">&quot;TYPE_OPEN&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  TYPE_CLOSE: </span><span style="color:#E6DB74;">&quot;TYPE_CLOSE&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>参考链接：<a href="https://react.docschina.org/docs/getting-started.html" target="_blank" rel="noreferrer">https://react.docschina.org/docs/getting-started.html</a></p>`,11);function C(x,q,B,R,S,P){const e=l("BrowserRouter"),o=l("HashRouter"),t=l("Route"),r=l("Switch"),c=l("Link"),F=l("NavLink"),i=l("Redirect");return b(),u("div",null,[h,s("ol",null,[s("li",null,[n("路由组件(router components) 比如 "),a(e),n(" 和 "),a(o),g])]),f,s("ol",D,[s("li",null,[n("路由匹配组件(route matchers components) 比如 "),a(t),n(" 和 "),a(r),v])]),A,s("ol",k,[s("li",null,[n("导航组件(navigation components) 比如 "),a(c),n(", "),a(F),n(", 和 "),a(i)])]),_])}const w=y(E,[["render",C]]);export{j as __pageData,w as default};
