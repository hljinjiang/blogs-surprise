import{_ as s,c as n,o as a,a as l}from"./app.28367dfe.js";const p="/docs-surprise/assets/life.389d1586.png",e="/docs-surprise/assets/Aspose.Words.bdb07b23-8480-466b-9fef-08b6ea7387cb.001.4b54eb3a.jpeg",o="/docs-surprise/assets/Aspose.Words.bdb07b23-8480-466b-9fef-08b6ea7387cb.002.f2ba4eec.jpeg",g=JSON.parse('{"title":"React Basics","description":"","frontmatter":{},"headers":[{"level":2,"title":"组件类别","slug":"组件类别","link":"#组件类别","children":[{"level":3,"title":"类组件","slug":"类组件","link":"#类组件","children":[]},{"level":3,"title":"函数组件","slug":"函数组件","link":"#函数组件","children":[]}]},{"level":2,"title":"类组件和函数组件的区别","slug":"类组件和函数组件的区别","link":"#类组件和函数组件的区别","children":[{"level":3,"title":"编写方式区别","slug":"编写方式区别","link":"#编写方式区别","children":[]},{"level":3,"title":"状态管理区别","slug":"状态管理区别","link":"#状态管理区别","children":[]},{"level":3,"title":"生命周期区别","slug":"生命周期区别","link":"#生命周期区别","children":[]},{"level":3,"title":"成员属性区别","slug":"成员属性区别","link":"#成员属性区别","children":[]}]},{"level":2,"title":"State","slug":"state","link":"#state","children":[]},{"level":2,"title":"Props","slug":"props","link":"#props","children":[]},{"level":2,"title":"refs","slug":"refs","link":"#refs","children":[]},{"level":2,"title":"⽣命周期","slug":"生命周期","link":"#生命周期","children":[{"level":3,"title":"挂载阶段","slug":"挂载阶段","link":"#挂载阶段","children":[]},{"level":3,"title":"更新阶段","slug":"更新阶段","link":"#更新阶段","children":[]},{"level":3,"title":"卸载阶段","slug":"卸载阶段","link":"#卸载阶段","children":[]}]},{"level":2,"title":"组件传值","slug":"组件传值","link":"#组件传值","children":[]}],"relativePath":"react/react-basics.md","lastUpdated":1674900184000}'),t={name:"react/react-basics.md"},r=l(`<h1 id="react-basics" tabindex="-1">React Basics <a class="header-anchor" href="#react-basics" aria-hidden="true">#</a></h1><h2 id="组件类别" tabindex="-1">组件类别 <a class="header-anchor" href="#组件类别" aria-hidden="true">#</a></h2><h3 id="类组件" tabindex="-1">类组件 <a class="header-anchor" href="#类组件" aria-hidden="true">#</a></h3><div class="info custom-block"><p class="custom-block-title">简介</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> React </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;react&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Hoc</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">extends</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">React</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;font-style:italic;text-decoration:underline;">Component</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;Josh Perez&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">props</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">super</span><span style="color:#F8F8F2;">(props);</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.state </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      count: </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    };</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.handleClick </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.handleClick.</span><span style="color:#A6E22E;">bind</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">handleClick</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">setState</span><span style="color:#F8F8F2;">({ count: </span><span style="color:#F92672;">++</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.state.count });</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">render</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">        &lt;</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;">&gt;</span><span style="color:#F92672;">{</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">&lt;/</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">        &lt;</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;">&gt;</span><span style="color:#F92672;">{</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.state.count</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">&lt;/</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">        &lt;</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">onClick</span><span style="color:#F92672;">={</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.handleClick</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">&gt;Click me&lt;/</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;/</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    );</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">default</span><span style="color:#F8F8F2;"> Hoc;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div></div><h3 id="函数组件" tabindex="-1">函数组件 <a class="header-anchor" href="#函数组件" aria-hidden="true">#</a></h3><div class="info custom-block"><p class="custom-block-title">简介</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> React, { useState, useEffect } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;react&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Example</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 声明一个新的叫做 “count” 的 state 变量</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> [count, setCount] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">useState</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">useEffect</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Bye&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    };</span></span>
<span class="line"><span style="color:#F8F8F2;">  }, []);</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">handleClick</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">setCount</span><span style="color:#F8F8F2;">(count </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#F92672;">p</span><span style="color:#F8F8F2;">&gt;You clicked </span><span style="color:#F92672;">{</span><span style="color:#F8F8F2;">count</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;"> times&lt;/</span><span style="color:#F92672;">p</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">onClick</span><span style="color:#F92672;">={</span><span style="color:#F8F8F2;">() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">setCount</span><span style="color:#F8F8F2;">(count </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">&gt;Click me&lt;/</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#F92672;">br</span><span style="color:#F8F8F2;"> /&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">onClick</span><span style="color:#F92672;">={</span><span style="color:#F8F8F2;">handleClick</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">&gt;Click me&lt;/</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;/</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  );</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">default</span><span style="color:#F8F8F2;"> Example;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div></div><h2 id="类组件和函数组件的区别" tabindex="-1">类组件和函数组件的区别 <a class="header-anchor" href="#类组件和函数组件的区别" aria-hidden="true">#</a></h2><h3 id="编写方式区别" tabindex="-1">编写方式区别 <a class="header-anchor" href="#编写方式区别" aria-hidden="true">#</a></h3><ol><li>类组件使用 <strong>class</strong> 编写组件</li><li>函数组件使用 <strong>function</strong> 编写组件</li></ol><h3 id="状态管理区别" tabindex="-1">状态管理区别 <a class="header-anchor" href="#状态管理区别" aria-hidden="true">#</a></h3><ol><li>类组件使用 <strong>this.state</strong> 定义状态，<strong>this.setState</strong> 操作状态</li><li>函数组件使用 <strong>useState</strong> 定义状态，返回数组[value, setValue]，<strong>setValue</strong> 操作状态</li></ol><h3 id="生命周期区别" tabindex="-1">生命周期区别 <a class="header-anchor" href="#生命周期区别" aria-hidden="true">#</a></h3><ol><li>类组件存在 <strong>componentDidMount</strong> 等生命周期</li><li>函数组件没有生命周期，使用 <strong>useEffect</strong> 替代 componentDidMount 和 componentDidUpdate <ol><li><strong>useEffect</strong> 回调函数中 return 一个函数，则 return 的函数会在组件卸载的时候执行，正如componentWillUnmount</li></ol></li></ol><h3 id="成员属性区别" tabindex="-1">成员属性区别 <a class="header-anchor" href="#成员属性区别" aria-hidden="true">#</a></h3><ol><li>类组件通过 <strong>this</strong>调用内部成员 <ol><li>构造器 constructor 中 this 指向该实例对象（构造器只调⽤⼀次，只在 new 的时候调⽤）</li><li>事件调用中 this 指向丢失的原因 <ol><li>事件 onClick 触发执⾏时的函数在 dom 上直接调⽤，⽽不是在类实例对象中调⽤</li><li>由于普通函数的 this 指向为调⽤时所处的对象决定的，因⽽指向 window，⼜因为开启了 use strict， window 变为了 undefined</li></ol></li></ol></li><li>函数组件直接使用内部成员，没有 <strong>this</strong></li></ol><h2 id="state" tabindex="-1">State <a class="header-anchor" href="#state" aria-hidden="true">#</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 定义 state</span></span>
<span class="line"><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.state </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">   count: </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">   arr: [{ a: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;"> }]</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">// 更新 state 方式一</span></span>
<span class="line"><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">setState</span><span style="color:#F8F8F2;">({ count: </span><span style="color:#F92672;">++</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.state.count }, () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">   </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">setState</span><span style="color:#F8F8F2;">({ count: </span><span style="color:#F92672;">++</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.state.count });</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#88846F;">// 更新 state 方式二</span></span>
<span class="line"><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">setState</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">   (</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> ({ count: </span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">state.count }),</span></span>
<span class="line"><span style="color:#F8F8F2;">   () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">setState</span><span style="color:#F8F8F2;">({ count: </span><span style="color:#F92672;">++</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.state.count });</span></span>
<span class="line"><span style="color:#F8F8F2;">   }</span></span>
<span class="line"><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 第二个参数回调函数在 render 调用后才被调用</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-hidden="true">#</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 1、读取传入的属性值</span></span>
<span class="line"><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.props.name</span></span>
<span class="line"><span style="color:#F8F8F2;">​</span></span>
<span class="line"><span style="color:#88846F;">// 2、对props中的属性值进行类型限制和必要性限制</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> PropTypes </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;prop-types&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">Person.propTypes </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  name: PropTypes.string.isRequired,</span></span>
<span class="line"><span style="color:#F8F8F2;">  age: PropTypes.number.</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">​</span></span>
<span class="line"><span style="color:#88846F;">// 3、将对象的所有属性通过props传递</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#66D9EF;font-style:italic;">Person</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">{...</span><span style="color:#F8F8F2;">person</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">/&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">​</span></span>
<span class="line"><span style="color:#88846F;">// 4、默认属性值</span></span>
<span class="line"><span style="color:#F8F8F2;">Person.defaultProps </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  name: </span><span style="color:#E6DB74;">&#39;single&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  age: </span><span style="color:#AE81FF;">18</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// props是不可变的，⼦组件不可修改 props，由⽗组件传⼊⼦组件</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="refs" tabindex="-1">refs <a class="header-anchor" href="#refs" aria-hidden="true">#</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 1、字符串形式的ref</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">input</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">ref</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;inputTarget&quot;</span><span style="color:#F8F8F2;"> /&gt;</span></span>
<span class="line"><span style="color:#88846F;">// 通过this.refs.inputTarget 获取DOM</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 2、回调形式的ref</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">input</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">ref</span><span style="color:#F92672;">={</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.inputTarget </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> target}</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;"> /&gt;</span></span>
<span class="line"><span style="color:#88846F;">// 通过this.inputTarget 获取DOM</span></span>
<span class="line"><span style="color:#F8F8F2;">​</span></span>
<span class="line"><span style="color:#88846F;">// 3、createRef创建ref容器</span></span>
<span class="line"><span style="color:#F8F8F2;">myRef </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> React.</span><span style="color:#A6E22E;">createRef</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">input</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">ref</span><span style="color:#F92672;">={</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.myRef</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;"> /&gt;</span></span>
<span class="line"><span style="color:#88846F;">// 通过this.myRef.current 获取DOM</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// refs访问绑定的 DOM 节点</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="生命周期" tabindex="-1">⽣命周期 <a class="header-anchor" href="#生命周期" aria-hidden="true">#</a></h2><p><img src="`+p+'" alt="⽣命周期"> 参考链接：<a href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/" target="_blank" rel="noreferrer">https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/</a></p><h3 id="挂载阶段" tabindex="-1">挂载阶段 <a class="header-anchor" href="#挂载阶段" aria-hidden="true">#</a></h3><div class="info custom-block"><p class="custom-block-title">简介</p><ol><li><strong>constructor(props)</strong>: 构造函数最先调⽤ <ol><li>初始化内部 state</li><li>为事件处理函数绑定实例</li></ol></li><li><strong>static getDerivedStateFromProps(props, state)</strong>: 罕⻅⽤例，即 state 的值任何时候都取决于 props <ol><li>静态方法，无 this</li><li>⼦组件的 state 取决于⽗组件的 props</li><li>return props or null，会返回一个对象用来更新当前的 state 对象</li></ol></li><li><strong>UNSAFE_componentWillMount()</strong>: 在组件挂载前调用（DOM插入前）</li><li><strong>render()</strong>: 是 class 组件中唯一必须实现的方法，返回需要渲染的DOM <ol><li>原生的DOM，如div</li><li>React组件</li><li>Fragment（片段）</li><li>Portals（插槽）</li><li>字符串和数字，被渲染成text节点</li><li>Boolean和null，不会渲染任何东西</li></ol></li><li><strong>componentDidMount()</strong>: 在组件挂载后调用（DOM插入后） <ol><li>适合添加订阅的地方</li><li>适合网络请求获取数据</li><li>获取DOM节点</li></ol></li></ol></div><h3 id="更新阶段" tabindex="-1">更新阶段 <a class="header-anchor" href="#更新阶段" aria-hidden="true">#</a></h3><div class="info custom-block"><p class="custom-block-title">简介</p><ol><li><strong>UNSAFE_componentWillReceiveProps(nextProps)</strong>: 在组件接收 props 前调⽤ <ol><li>在更新⼦组件，需要重新渲染组件时⽤到的⽐较多，更新state</li></ol></li><li><strong>static getDerivedStateFromProps(props, state)</strong>: 罕⻅⽤例，即 state 的值任何时候都取决于 props</li><li><strong>shouldComponentUpdate(nextProps, nextState)</strong>: 是否需要组件重新渲染 <ol><li>新的props，新的state</li><li>return Boolean（true表示组件重新渲染， false表示组件不冲洗渲染）</li></ol></li><li><strong>UNSAFE_componentWillUpdate(nextProps, nextState)</strong>: 组件更新前 <ol><li>在组件收到新的 props 或 state 时触发</li><li>不能此方法中调用 this.setState()</li></ol></li><li><strong>render()</strong>: 是 class 组件中唯一必须实现的方法，返回需要渲染的DOM</li><li><strong>getSnapshotBeforeUpdate(prevProps, prevState)</strong>: 获取快照在更新前， return的值在下个钩⼦中接收 <ol><li>在 DOM 更新前调⽤，可获取更新前的 DOM 信息</li><li>return null or snapshotValue</li></ol></li><li><strong>componentDidUpdate(prevProps, prevState, snapshotValue)</strong>: 组件更新后 <ol><li>可以操作 DOM，发送请求等</li></ol></li></ol></div><h3 id="卸载阶段" tabindex="-1">卸载阶段 <a class="header-anchor" href="#卸载阶段" aria-hidden="true">#</a></h3><div class="info custom-block"><p class="custom-block-title">简介</p><ol><li><strong>componentWillUnmount()</strong>: 组件卸载前触发 <ol><li>取消订阅等额外操作</li></ol></li></ol></div><h2 id="组件传值" tabindex="-1">组件传值 <a class="header-anchor" href="#组件传值" aria-hidden="true">#</a></h2><ol><li><p>⽗⼦组件传值</p><ol><li>⽗传⼦， <strong>通过</strong> prop<strong>属性传值</strong></li><li>⼦传⽗，通过 prop属性 <strong>将⽗组件⽅法传⼊⼦组件</strong> ，⼦组件 <strong>调⽤传⼊的属性⽅法</strong> ， <strong>触发⽗组件的⽅法</strong></li></ol></li><li><p>react-router-dom</p><ol><li>路由组件和⼀般组件的区别</li><li>精确匹配和模糊匹配</li><li>params和 search(query)、 state</li><li>编程式路由导航 this.props.history.push(&#39;&#39;)</li><li>withRouter可以使⾮路由组件拥有路由组件特有的 API，进⾏编程式导航 <img src="'+e+'" alt=""></li></ol></li><li><p>redux <img src="'+o+'" alt=""></p><ol><li>异步和同步 action</li><li>react-redux集中式管理</li></ol></li><li><p>react-router</p></li><li><p>hooks</p></li><li><p>Fragment、 Context、 PureComponent、 getderivedStateFromError、 renderProps(插槽 )</p></li><li><p>组件间传值⽅式</p><ol><li>⽗⼦： props</li><li>兄弟： pubsub、 redux</li><li>祖孙组件： pubsub、 redux、 context</li></ol></li></ol>',31),c=[r];function F(i,y,u,b,d,m){return a(),n("div",null,c)}const f=s(t,[["render",F]]);export{g as __pageData,f as default};
