import{_ as e,c as a,b as s,d as l,e as t,a as n,o as p,r as i}from"./app.46bbe91d.js";const r="/docs-surprise/assets/Aspose.Words.bdb07b23-8480-466b-9fef-08b6ea7387cb.001.4b54eb3a.jpeg",c="/docs-surprise/assets/Aspose.Words.bdb07b23-8480-466b-9fef-08b6ea7387cb.002.f2ba4eec.jpeg",w=JSON.parse('{"title":"React Basics","description":"","frontmatter":{},"headers":[{"level":2,"title":"组件类别","slug":"组件类别","link":"#组件类别","children":[]}],"relativePath":"react/react-basics.md","lastUpdated":1674824658000}'),F={name:"react/react-basics.md"},u=n(`<h1 id="react-basics" tabindex="-1">React Basics <a class="header-anchor" href="#react-basics" aria-hidden="true">#</a></h1><h2 id="组件类别" tabindex="-1">组件类别 <a class="header-anchor" href="#组件类别" aria-hidden="true">#</a></h2><ol><li>函数组件（简单组件） <ol><li>没有状态组件，不能驱动视图更新</li><li>没有 this 指向</li></ol></li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> React, { useState } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;react&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Example</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 声明一个新的叫做 “count” 的 state 变量</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> [count, setCount] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">useState</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#F92672;">p</span><span style="color:#F8F8F2;">&gt;You clicked </span><span style="color:#F92672;">{</span><span style="color:#F8F8F2;">count</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;"> times&lt;/</span><span style="color:#F92672;">p</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">onClick</span><span style="color:#F92672;">={</span><span style="color:#F8F8F2;">() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">setCount</span><span style="color:#F8F8F2;">(count </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">&gt;Click me&lt;/</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;/</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  );</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">default</span><span style="color:#F8F8F2;"> Example;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>`,4),d={start:"2"},_=n("<li><p>类组件（复杂组件）</p><ol><li>有状态组件，驱动视图更新</li><li>有 this指向</li><li>构造器 constructor中的 this指向该实例对象（构造器只调⽤⼀次，只在 new的时候调⽤）</li><li>类⽅法中的 this指向丢失的原因？？？ <ol><li>函数指向给 onclick， onclick点击时执⾏的函数在 dom上 <strong>直接调⽤</strong> ，⽽ <strong>不是在类实例对象中调⽤</strong></li><li>由于普通函数的 this指向为调⽤时所处的对象决定的，因⽽指向 window，⼜因为开启了 use strict， window变为了 undefined</li></ol></li></ol></li>",1),y=s("p",null,"三⼤属性",-1),m=s("li",null,[l("state： "),s("ol",null,[s("li",null,"是⼀个对象，称为状态"),s("li",null,"包含多个 key-value"),s("li",null,[l("更新 state中的属性值，便可以重新渲染对应 UI视图⻚⾯ "),s("ol",null,[s("li",null,"state不可以直接更改属性"),s("li",null,"使⽤ this.setState({})只修改对应的属性以更改数据，驱动更改视图层")])])])],-1),b=s("li",null,"props是不可变的，⼦组件不可修改 props，由⽗组件传⼊⼦组件",-1),h=s("li",null,"import PropTypes from ‘prop-typesʼ，引⼊对属性 prop的限制",-1),g=s("li",null,"MyComponent.propTypes = { name: PropTypes.string.isRequired }；属性限制",-1),f=s("li",null,"MyComponent.defaultProps = { name: 'json' }：属性默认值",-1),E=s("li",null,"属性定义到 render中任何标签或组件上，以访问绑定的 dom节点",-1),T=s("li",null,"⻚⾯内所有输⼊类 dom，现⽤现取，属于⾮受控组件",-1),A=s("li",null,[s("code",null,'<input ref="input1" />')],-1),C=s("li",null,[s("code",null,"<input ref={e => (this.input2 = e)} />"),l("（更新数据时会触发两次事件，⼀次为 null⼀次为 dom节点；因 为每次渲染时会创建⼀个新的函数实例，所以 react清空旧的 ref并设置新的）")],-1),S=s("li",null,"通过将回调函数定义成 class的绑定函数可以避免",-1),x=s("li",null,[s("code",null,"<input ref={this.input1} />"),l("（通过 input1函数的形参接收 dom节点）")],-1),P={ref:"{this.myRef}"},v=n('<li><p>⽣命周期</p><ol><li>挂载阶段 <ol><li>constructor(props)（构造函数最先调⽤）</li><li>static getDerivedStateFromProps(props, state)（罕⻅⽤例，即 state的值取决于 props） <ol><li>⼦组件的 state取决于⽗组件的 props</li><li>return props or null</li></ol></li><li>componentWillmount（在组件挂载前）</li><li>render（渲染）</li><li>componentDidmount（在组件挂载后）</li></ol></li><li>更新阶段 <ol><li>props传⼊的更新阶段 <ol><li>componentWillReceiveRrops(nextProps)（在组件接收参数前调⽤） <ol><li>在更新⼦组件，需要重新渲染组件时⽤到的⽐较多</li></ol></li><li>shouldComponentUpdate（需要组件更新） <ol><li>return Boolean（ true表示组件更新， false表示组件不更新）</li></ol></li><li>componentWillUpdate（组件更新前）</li><li>render（渲染）</li><li>getSnapshotBeforeUpdate（获取快照在更新前， return的值在下个钩⼦中接收） <ol><li>在 dom更新前调⽤，获取更新前的 dom信息</li><li>return null or snapshotValue</li></ol></li><li>componentDidUpdate(preProps, preState, snapshotValue)（组件更新后）</li></ol></li><li>state渲染更新 <ol><li>shouldComponentUpdate</li><li>componentWillUpdate</li><li>render</li><li>componentDidUpdate</li></ol></li></ol></li><li>卸载阶段 <ol><li>componentWillUnmount（组件卸载前）</li></ol></li></ol></li><li><p>⽗⼦组件传值</p><ol><li>⽗传⼦， <strong>通过</strong> prop<strong>属性传值</strong></li><li>⼦传⽗，通过 prop属性 <strong>将⽗组件⽅法传⼊⼦组件</strong> ，⼦组件 <strong>调⽤传⼊的属性⽅法</strong> ， <strong>触发⽗组件的⽅法</strong></li></ol></li><li><p>react-router-dom</p><ol><li>路由组件和⼀般组件的区别</li><li>精确匹配和模糊匹配</li><li>params和 search(query)、 state</li><li>编程式路由导航 this.props.history.push(&#39;&#39;)</li><li>withRouter可以使⾮路由组件拥有路由组件特有的 API，进⾏编程式导航 <img src="'+r+'" alt=""></li></ol></li><li><p>redux <img src="'+c+'" alt=""></p><ol><li>异步和同步 action</li><li>react-redux集中式管理</li></ol></li><li><p>react-router</p></li><li><p>hooks</p></li><li><p>Fragment、 Context、 PureComponent、 getderivedStateFromError、 renderProps(插槽 )</p></li><li><p>组件间传值⽅式</p><ol><li>⽗⼦： props</li><li>兄弟： pubsub、 redux</li><li>祖孙组件： pubsub、 redux、 context</li></ol></li>',8);function R(D,k,V,U,B,I){const o=i("A");return p(),a("div",null,[u,s("ol",d,[_,s("li",null,[y,s("ol",null,[m,s("li",null,[l("props "),s("ol",null,[b,s("li",null,[l("对⼦组件传⼊ prop"),t(o,{name:"1",name1:"{1}"})]),h,g,f])]),s("li",null,[l("refs "),s("ol",null,[E,T,s("li",null,[l("⻚⾯内所有输⼊类 dom，value值存储于 state⾥⾯，需要⽤的时候才拿出来，数据由 state状态管理，属 于受控组件 "),s("ol",null,[A,C,S,x,s("li",null,[l("myRef = React.createRef()； "),s("input",P,null,512),l("； this.myRef.current则指向 dom")])])])])])])]),v])])}const W=e(F,[["render",R]]);export{w as __pageData,W as default};
