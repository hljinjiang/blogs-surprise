import{_ as s,c as n,o as a,a as l}from"./app.12c66922.js";const p="/assets/vue2_reactive_pattern.15301511.png",d=JSON.parse('{"title":"Vue2 Reactive","description":"","frontmatter":{},"headers":[{"level":2,"title":"Dep","slug":"dep","link":"#dep","children":[]},{"level":2,"title":"Observer","slug":"observer","link":"#observer","children":[]},{"level":2,"title":"Watcher","slug":"watcher","link":"#watcher","children":[]},{"level":2,"title":"Compiler","slug":"compiler","link":"#compiler","children":[]},{"level":2,"title":"Vue","slug":"vue","link":"#vue","children":[]},{"level":2,"title":"全部集成","slug":"全部集成","link":"#全部集成","children":[]}],"relativePath":"vue/vue2-reactive.md","lastUpdated":1679922642000}'),e={name:"vue/vue2-reactive.md"},o=l('<h1 id="vue2-reactive" tabindex="-1">Vue2 Reactive <a class="header-anchor" href="#vue2-reactive" aria-hidden="true">#</a></h1><p><img src="'+p+`" alt="vue2_reactive_pattern.png"></p><div class="info custom-block"><p class="custom-block-title">简介</p><p><strong>Vue2 响应式基本流程：</strong></p><ol><li>Vue实例创建 -&gt; Observer 对实例中 Data 遍历使用 Object.defineProperty 进行数据劫持，并使用 getter 和 setter 获取监听</li><li>Vue Template or Render 进行编译 -&gt; 编译中遇到 Model变量 的引用 -&gt; 创建 Watcher观察者 -&gt; 并通过 Object.defineProperty 中的 getter 向 Dep发布者 添加观察者 -&gt; 最后编译完成，创建 View层</li><li>View层 or Model层 的数据变化 -&gt; 会被 Object.defineProperty 监听到变化 -&gt; 此时 Dep 进行遍历 Watcher 进行通知 -&gt; Watcher 内部通过 newValue和oldValue 的比较来更新 View层</li></ol><p><strong>响应式介绍：</strong><br> 连接数据层和视图层，数据驱动应用，数据变化，视图更新<br> 响应式 + 虚拟DOM，提升开发效率，降低开发难度<br> Object.defineProperty() 未对数组所有元素进行 数据劫持，只是重写了数组的7个方法来对数组的变更做出响应 ( pop, push, reverse, shift, sort, splice, unshift )</p></div><h2 id="dep" tabindex="-1">Dep <a class="header-anchor" href="#dep" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">发布者</p><p>存储 Watcher观察者，并通知 Watcher观察者 数据已变化</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Dep</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// 存储所有Watcher</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.subs </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 添加Watcher</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">addSub</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">sub</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.subs.</span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">(sub);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 对每个Watcher发布通知</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">notify</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.subs.</span><span style="color:#A6E22E;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">sub</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">            sub.</span><span style="color:#A6E22E;">update</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">        });</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div></div><h2 id="observer" tabindex="-1">Observer <a class="header-anchor" href="#observer" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">数据劫持</p><p>对 data对象 中的数据进行数据劫持<br> 并在 Compiler编译时，添加 Watcher观察者，以便后续数据变化进行通知更新</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Observer</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">data</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 触发数据劫持</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">transitionData</span><span style="color:#F8F8F2;">(data);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 遍历data进行数据劫持</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">transitionData</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">data</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 检测属性值是否是对象，如果是则继续将对象转换为响应式的</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> data </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;object&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">&amp;&amp;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">!</span><span style="color:#F8F8F2;">Array.</span><span style="color:#A6E22E;">isArray</span><span style="color:#F8F8F2;">(data)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      Object.</span><span style="color:#A6E22E;">keys</span><span style="color:#F8F8F2;">(data).</span><span style="color:#A6E22E;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">defineReactive</span><span style="color:#F8F8F2;">(data, key, data[key]);</span></span>
<span class="line"><span style="color:#F8F8F2;">      });</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 将data中的属性注册为响应式</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">defineReactive</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">data</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 递归注册属性</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">transitionData</span><span style="color:#F8F8F2;">(value);</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 创建Dep对象 给每个data添加一个观察者</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> dep </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Dep</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> that </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    Object.</span><span style="color:#A6E22E;">defineProperty</span><span style="color:#F8F8F2;">(data, key, {</span></span>
<span class="line"><span style="color:#F8F8F2;">      enumerable: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      configurable: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// 当Watcher创建时，会对Dep.target赋值为Watcher实例，并访问Data对应属性</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// 这将触发该get，并往Dep添加Watcher观察者，最后清空Dep.target，返回value</span></span>
<span class="line"><span style="color:#F8F8F2;">        Dep.target </span><span style="color:#F92672;">&amp;&amp;</span><span style="color:#F8F8F2;"> dep.</span><span style="color:#A6E22E;">addSub</span><span style="color:#F8F8F2;">(Dep.target);</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> value;</span></span>
<span class="line"><span style="color:#F8F8F2;">      },</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">newValue</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// 若新值等于旧值则返回</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (newValue </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> value) {</span></span>
<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// 向该作用域中value进行更新赋值</span></span>
<span class="line"><span style="color:#F8F8F2;">        value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> newValue;</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// 赋值以后检查属性是否是对象，如果是则继续将对象转换为响应式的</span></span>
<span class="line"><span style="color:#F8F8F2;">        that.</span><span style="color:#A6E22E;">transitionData</span><span style="color:#F8F8F2;">(newValue);</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// 数据变化后通过Dep发送通知</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// 这将循环Watcher对比vm[key] !== oldValue，如果成立则触发update方法</span></span>
<span class="line"><span style="color:#F8F8F2;">        dep.</span><span style="color:#A6E22E;">notify</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">      },</span></span>
<span class="line"><span style="color:#F8F8F2;">    });</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div></div><h2 id="watcher" tabindex="-1">Watcher <a class="header-anchor" href="#watcher" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">观察者</p><p>存储 vue实例、响应属性、回调函数，以及缓存响应属性值，并将自身实例对象存储到 Dep发布者中<br> update函数 比较新旧值，并调用 回调函数 传入新值，更新视图</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Watcher</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">vm</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">cb</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 获取vm</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.vm </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> vm;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 获取data中的属性</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.key </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> key;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 回调函数（更新视图的具体方法）</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.cb </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> cb;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 将watcher对象挂载到Dep.target</span></span>
<span class="line"><span style="color:#F8F8F2;">    Dep.target </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 访问缓存旧值，同时触发数据劫持中对应属性的get，在Dep中存储Watcher实例，用来后续通知数据更新</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.oldValue </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> vm[key];</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// get值之后，清除Dep中的实例</span></span>
<span class="line"><span style="color:#F8F8F2;">    Dep.target </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 通过Dep通知调用，更新视图</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">update</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 调用update的时候，获取新值</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> newValue </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.vm[</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.key];</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 新值和旧值相同则不更新</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (newValue </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.oldValue) </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.oldValue </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> newValue;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 调用具体的更新方法</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">cb</span><span style="color:#F8F8F2;">(newValue);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div></div><h2 id="compiler" tabindex="-1">Compiler <a class="header-anchor" href="#compiler" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">编译器</p><p>编译模板，解析指令/插值表达式<br> 当数据变化后，通过 Watcher观察者 重新渲染视图</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Compiler</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">vm</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 获取vm</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.vm </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> vm;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 获取el</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.el </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> vm.$el;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 编译模板 渲染视图</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">compile</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.el);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 编译模板渲染视图</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">compile</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">el</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 无el则结束</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">!</span><span style="color:#F8F8F2;">el) </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 获取子节点</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> nodes </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> el.childNodes;</span></span>
<span class="line"><span style="color:#F8F8F2;">    nodes.</span><span style="color:#A6E22E;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">node</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#88846F;">// 判断是否为文本节点</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#88846F;">// 这里只对文本进行判断，需判断其它节点可在此进行扩展</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">isTextNode</span><span style="color:#F8F8F2;">(node)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">compileText</span><span style="color:#F8F8F2;">(node);</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    });</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 编译文本节点</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">compileText</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">node</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 表示任意单个字符，不包含换行符、+ 表示匹配前面多个相同的字符、？表示非贪婪模式，尽可能早的结束查找</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> reg </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> /</span><span style="color:#AE81FF;">\\{\\{</span><span style="color:#E6DB74;">(</span><span style="color:#AE81FF;">.</span><span style="color:#F92672;">+?</span><span style="color:#E6DB74;">)</span><span style="color:#AE81FF;">\\}\\}</span><span style="color:#E6DB74;">/</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 获取节点的文本内容</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> param </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> node.textContent;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 判断是否有 {{}}</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (reg.</span><span style="color:#A6E22E;">test</span><span style="color:#F8F8F2;">(param)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#88846F;">// 匹配内容，去除前后空格</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> key </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> reg.</span><span style="color:#A6E22E;">exec</span><span style="color:#F8F8F2;">(param)[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">].</span><span style="color:#A6E22E;">trim</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#88846F;">// value赋值给node文本内容</span></span>
<span class="line"><span style="color:#F8F8F2;">      node.textContent </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> param.</span><span style="color:#A6E22E;">replace</span><span style="color:#F8F8F2;">(reg, </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.vm[key]);</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#88846F;">// 编译模板的时，会创建一个watcher实例，并在内部挂载到Dep上</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#88846F;">// Watcher内部会进行访问存储，并添加到Dep中用来后续通知数据更新</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Watcher</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.vm, key, (</span><span style="color:#FD971F;font-style:italic;">newValue</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// 通过回调函数，更新视图</span></span>
<span class="line"><span style="color:#F8F8F2;">        node.textContent </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> newValue;</span></span>
<span class="line"><span style="color:#F8F8F2;">      });</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 判断是否是文本节点</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">isTextNode</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">node</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> node </span><span style="color:#F92672;">&amp;&amp;</span><span style="color:#F8F8F2;"> node.nodeType </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 判断是否是元素节点</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">isElementNode</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">node</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> node </span><span style="color:#F92672;">&amp;&amp;</span><span style="color:#F8F8F2;"> node.nodeType </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br></div></div></div><h2 id="vue" tabindex="-1">Vue <a class="header-anchor" href="#vue" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">Vue实例对象</p><p>入口类，调用 Observer、Compiler 进行数据劫持、模板编译<br> 挂载 data数据</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Vue</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">options</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 将Vue实例挂载到el元素上</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.$el </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#A6E22E;">querySelector</span><span style="color:#F8F8F2;">(options.el);</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 获取绑定data数据</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.$data </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> options.data;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 对data所有数据进行递归劫持</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Observer</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.$data);</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 在Vue实例对象上挂载data的所有属性</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">_proxyData</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.$data);</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 传入Vue实例，编译解析模板</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Compiler</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 在Vue实例对象上挂载data的所有属性</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">_proxyData</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">data</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 遍历data对象的所有属性，进行数据劫持，挂载到Vue实例根上</span></span>
<span class="line"><span style="color:#F8F8F2;">    Object.</span><span style="color:#A6E22E;">keys</span><span style="color:#F8F8F2;">(data).</span><span style="color:#A6E22E;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      Object.</span><span style="color:#A6E22E;">defineProperty</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">, key, {</span></span>
<span class="line"><span style="color:#F8F8F2;">        enumerable: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        configurable: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> data[key];</span></span>
<span class="line"><span style="color:#F8F8F2;">        },</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">newValue</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (newValue </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> data[key]) {</span></span>
<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">          }</span></span>
<span class="line"><span style="color:#F8F8F2;">          data[key] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> newValue;</span></span>
<span class="line"><span style="color:#F8F8F2;">        },</span></span>
<span class="line"><span style="color:#F8F8F2;">      });</span></span>
<span class="line"><span style="color:#F8F8F2;">    });</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div></div><h2 id="全部集成" tabindex="-1">全部集成 <a class="header-anchor" href="#全部集成" aria-hidden="true">#</a></h2><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">&lt;!</span><span style="color:#F92672;">DOCTYPE</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">html</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">html</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">lang</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;en&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#F92672;">head</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;</span><span style="color:#F92672;">meta</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">charset</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;UTF-8&quot;</span><span style="color:#F8F8F2;"> /&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;</span><span style="color:#F92672;">meta</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">http-equiv</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;X-UA-Compatible&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">content</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;IE=edge&quot;</span><span style="color:#F8F8F2;"> /&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;</span><span style="color:#F92672;">meta</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">name</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;viewport&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">content</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#F8F8F2;"> /&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;</span><span style="color:#F92672;">title</span><span style="color:#F8F8F2;">&gt;Vue2_Reactive&lt;/</span><span style="color:#F92672;">title</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;</span><span style="color:#F92672;">style</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#66D9EF;font-style:italic;">text-align</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;">center</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;/</span><span style="color:#F92672;">style</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;</span><span style="color:#F92672;">script</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">src</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;./js/Dep.js&quot;</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#F92672;">script</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;</span><span style="color:#F92672;">script</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">src</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;./js/Observer.js&quot;</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#F92672;">script</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;</span><span style="color:#F92672;">script</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">src</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;./js/Watcher.js&quot;</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#F92672;">script</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;</span><span style="color:#F92672;">script</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">src</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;./js/Compiler.js&quot;</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#F92672;">script</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;</span><span style="color:#F92672;">script</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">src</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;./js/Vue.js&quot;</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#F92672;">script</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;/</span><span style="color:#F92672;">head</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#F92672;">body</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">id</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;app&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      {{ count }}</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#F92672;">hr</span><span style="color:#F8F8F2;"> /&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">type</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;button&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">onclick</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;</span><span style="color:#A6E22E;">notifyMe</span><span style="color:#E6DB74;">()&quot;</span><span style="color:#F8F8F2;">&gt;add count !!!&lt;/</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;/</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;</span><span style="color:#F92672;">script</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#88846F;">// 初始化数据</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> data </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        count: </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        arr: [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">        obj: {</span></span>
<span class="line"><span style="color:#F8F8F2;">          childName: </span><span style="color:#E6DB74;">&quot;test&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        },</span></span>
<span class="line"><span style="color:#F8F8F2;">      };</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> vm </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Vue</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">        el: </span><span style="color:#E6DB74;">&quot;#app&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        data: data,</span></span>
<span class="line"><span style="color:#F8F8F2;">      });</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">notifyMe</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        data.count</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">      };</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;/</span><span style="color:#F92672;">script</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;/</span><span style="color:#F92672;">body</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#F92672;">html</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><p>参考链接：<a href="https://github.com/tera-li/vue-source/tree/main/vue2/js" target="_blank" rel="noreferrer">https://github.com/tera-li/vue-source/tree/main/vue2/js</a></p>`,16),F=[o];function r(c,t,y,i,b,u){return a(),n("div",null,F)}const E=s(e,[["render",r]]);export{d as __pageData,E as default};
